/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.5
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function () {
  /*
  Chosen source: generate output using 'cake build'
  Copyright (c) 2011 by Harvest
  */var $, Chosen, get_side_border_padding, root;
  var __bind = function __bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };
  root = this;
  $ = jQuery;
  $.fn.extend({
    chosen: function chosen(options) {
      if ($.browser === "msie" && ($.browser.version === "6.0" || $.browser.version === "7.0")) {
        return this;
      }
      return $(this).each(function (input_field) {
        if (!$(this).hasClass("chzn-done")) {
          return new Chosen(this, options);
        }
      });
    }
  });
  Chosen = function () {
    function Chosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.set_default_values();
      this.form_field_jq = $(this.form_field);
      this.is_multiple = this.form_field.multiple;
      this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
      this.default_text_default = this.form_field.multiple ? this.options.placeholder_text_multiple || this.options.placeholder_text || "Select Some Options" : this.options.placeholder_text_single || this.options.placeholder_text || "Select an Option";
      this.set_up_html();
      this.register_observers();
      this.form_field_jq.addClass("chzn-done");
    }
    Chosen.prototype.set_default_values = function () {
      this.click_test_action = __bind(function (evt) {
        return this.test_active_click(evt);
      }, this);
      this.activate_action = __bind(function (evt) {
        return this.activate_field(evt);
      }, this);
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.choices = 0;
      return this.results_none_found = this.options.no_results_text || "No results match";
    };
    Chosen.prototype.set_up_html = function () {
      var container_div, dd_top, dd_width, sf_width;
      this.container_id = this.form_field.id.length ? this.form_field.id.replace(/(:|\.)/g, '_') : this.generate_field_id();
      this.container_id += "_chzn";
      this.f_width = this.form_field_jq.outerWidth();
      this.default_text = this.form_field_jq.data('placeholder') ? this.form_field_jq.data('placeholder') : this.default_text_default;
      container_div = $("<div />", {
        id: this.container_id,
        "class": "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),
        style: 'width: ' + this.f_width + 'px;'
      });
      if (this.is_multiple) {
        container_div.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      } else {
        container_div.html('<a href="javascript:void(0)" class="chzn-single"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(container_div);
      this.container = $('#' + this.container_id);
      this.container.addClass("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      if (!this.is_multiple && this.form_field.options.length <= this.disable_search_threshold) {
        this.container.addClass("chzn-container-single-nosearch");
      }
      this.dropdown = this.container.find('div.chzn-drop').first();
      dd_top = this.container.height();
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.css({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.css({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      return this.set_tab_index();
    };
    Chosen.prototype.register_observers = function () {
      this.container.mousedown(__bind(function (evt) {
        return this.container_mousedown(evt);
      }, this));
      this.container.mouseup(__bind(function (evt) {
        return this.container_mouseup(evt);
      }, this));
      this.container.mouseenter(__bind(function (evt) {
        return this.mouse_enter(evt);
      }, this));
      this.container.mouseleave(__bind(function (evt) {
        return this.mouse_leave(evt);
      }, this));
      this.search_results.mouseup(__bind(function (evt) {
        return this.search_results_mouseup(evt);
      }, this));
      this.search_results.mouseover(__bind(function (evt) {
        return this.search_results_mouseover(evt);
      }, this));
      this.search_results.mouseout(__bind(function (evt) {
        return this.search_results_mouseout(evt);
      }, this));
      this.form_field_jq.bind("liszt:updated", __bind(function (evt) {
        return this.results_update_field(evt);
      }, this));
      this.search_field.blur(__bind(function (evt) {
        return this.input_blur(evt);
      }, this));
      this.search_field.keyup(__bind(function (evt) {
        return this.keyup_checker(evt);
      }, this));
      this.search_field.keydown(__bind(function (evt) {
        return this.keydown_checker(evt);
      }, this));
      if (this.is_multiple) {
        this.search_choices.click(__bind(function (evt) {
          return this.choices_click(evt);
        }, this));
        return this.search_field.focus(__bind(function (evt) {
          return this.input_focus(evt);
        }, this));
      }
    };
    Chosen.prototype.search_field_disabled = function () {
      this.is_disabled = this.form_field_jq.attr('disabled');
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field.attr('disabled', true);
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field.attr('disabled', false);
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };
    Chosen.prototype.container_mousedown = function (evt) {
      var target_closelink;
      if (!this.is_disabled) {
        target_closelink = evt != null ? $(evt.target).hasClass("search-choice-close") : false;
        if (evt && evt.type === "mousedown") {
          evt.stopPropagation();
        }
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && ($(evt.target) === this.selected_item || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };
    Chosen.prototype.container_mouseup = function (evt) {
      if (evt.target.nodeName === "ABBR") {
        return this.results_reset(evt);
      }
    };
    Chosen.prototype.mouse_enter = function () {
      return this.mouse_on_container = true;
    };
    Chosen.prototype.mouse_leave = function () {
      return this.mouse_on_container = false;
    };
    Chosen.prototype.input_focus = function (evt) {
      if (!this.active_field) {
        return setTimeout(__bind(function () {
          return this.container_mousedown();
        }, this), 50);
      }
    };
    Chosen.prototype.input_blur = function (evt) {
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout(__bind(function () {
          return this.blur_test();
        }, this), 100);
      }
    };
    Chosen.prototype.blur_test = function (evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };
    Chosen.prototype.close_field = function () {
      $(document).unbind("click", this.click_test_action);
      if (!this.is_multiple) {
        this.selected_item.attr("tabindex", this.search_field.attr("tabindex"));
        this.search_field.attr("tabindex", -1);
      }
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };
    Chosen.prototype.activate_field = function () {
      if (!this.is_multiple && !this.active_field) {
        this.search_field.attr("tabindex", this.selected_item.attr("tabindex"));
        this.selected_item.attr("tabindex", -1);
      }
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };
    Chosen.prototype.test_active_click = function (evt) {
      if ($(evt.target).parents('#' + this.container_id).length) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };
    Chosen.prototype.results_build = function () {
      var content, data, startTime, _i, _len, _ref;
      startTime = new Date();
      this.parsing = true;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        this.search_choices.find("li.search-choice").remove();
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.find("span").text(this.default_text);
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.find("span").text(data.text);
            if (this.allow_single_deselect) {
              this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
            }
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.html(content);
      return this.parsing = false;
    };
    Chosen.prototype.result_add_group = function (group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
      } else {
        return "";
      }
    };
    Chosen.prototype.result_add_option = function (option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) {
          classes.push("result-selected");
        }
        if (option.group_array_index != null) {
          classes.push("group-option");
        }
        if (option.classes !== "") {
          classes.push(option.classes);
        }
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };
    Chosen.prototype.results_update_field = function () {
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };
    Chosen.prototype.result_do_highlight = function (el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };
    Chosen.prototype.result_clear_highlight = function () {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };
    Chosen.prototype.results_toggle = function () {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };
    Chosen.prototype.results_show = function () {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-single-with-drop");
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      }
      dd_top = this.is_multiple ? this.container.height() : this.container.height() - 1;
      this.dropdown.css({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };
    Chosen.prototype.results_hide = function () {
      if (!this.is_multiple) {
        this.selected_item.removeClass("chzn-single-with-drop");
      }
      this.result_clear_highlight();
      this.dropdown.css({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };
    Chosen.prototype.set_tab_index = function (el) {
      var ti;
      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        if (this.is_multiple) {
          return this.search_field.attr("tabindex", ti);
        } else {
          this.selected_item.attr("tabindex", ti);
          return this.search_field.attr("tabindex", -1);
        }
      }
    };
    Chosen.prototype.show_search_field_default = function () {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };
    Chosen.prototype.search_results_mouseup = function (evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        return this.result_select(evt);
      }
    };
    Chosen.prototype.search_results_mouseover = function (evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };
    Chosen.prototype.search_results_mouseout = function (evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };
    Chosen.prototype.choices_click = function (evt) {
      evt.preventDefault();
      if (this.active_field && !$(evt.target).hasClass("search-choice" || $(evt.target).parents('.search-choice').first) && !this.results_showing) {
        return this.results_show();
      }
    };
    Chosen.prototype.choice_build = function (item) {
      var choice_id, link;
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      this.search_container.before('<li class="search-choice" id="' + choice_id + '"><span>' + item.html + '</span><a href="javascript:void(0)" class="search-choice-close" rel="' + item.array_index + '"></a></li>');
      link = $('#' + choice_id).find("a").first();
      return link.click(__bind(function (evt) {
        return this.choice_destroy_link_click(evt);
      }, this));
    };
    Chosen.prototype.choice_destroy_link_click = function (evt) {
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy($(evt.target));
      } else {
        return evt.stopPropagation;
      }
    };
    Chosen.prototype.choice_destroy = function (link) {
      this.choices -= 1;
      this.show_search_field_default();
      if (this.is_multiple && this.choices > 0 && this.search_field.val().length < 1) {
        this.results_hide();
      }
      this.result_deselect(link.attr("rel"));
      return link.parents('li').first().remove();
    };
    Chosen.prototype.results_reset = function (evt) {
      this.form_field.options[0].selected = true;
      this.selected_item.find("span").text(this.default_text);
      this.show_search_field_default();
      $(evt.target).remove();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };
    Chosen.prototype.result_select = function (evt) {
      var high, high_id, item, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        high_id = high.attr("id");
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
        }
        high.addClass("result-selected");
        position = high_id.substr(high_id.lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.selected_item.find("span").first().text(item.text);
          if (this.allow_single_deselect) {
            this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
          }
        }
        if (!(evt.metaKey && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        this.form_field_jq.trigger("change");
        return this.search_field_scale();
      }
    };
    Chosen.prototype.result_activate = function (el) {
      return el.addClass("active-result");
    };
    Chosen.prototype.result_deactivate = function (el) {
      return el.removeClass("active-result");
    };
    Chosen.prototype.result_deselect = function (pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      result_data.selected = false;
      this.form_field.options[result_data.options_index].selected = false;
      result = $("#" + this.container_id + "_o_" + pos);
      result.removeClass("result-selected").addClass("active-result").show();
      this.result_clear_highlight();
      this.winnow_results();
      this.form_field_jq.trigger("change");
      return this.search_field_scale();
    };
    Chosen.prototype.results_search = function (evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };
    Chosen.prototype.winnow_results = function () {
      var found, option, part, parts, regex, result_id, results, searchText, startTime, startpos, text, zregex, _i, _j, _len, _len2, _ref;
      startTime = new Date();
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
      regex = new RegExp('^' + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $('#' + option.dom_id).hide();
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len2 = parts.length; _j < _len2; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              if ($("#" + result_id).html !== text) {
                $("#" + result_id).html(text);
              }
              this.result_activate($("#" + result_id));
              if (option.group_array_index != null) {
                $("#" + this.results_data[option.group_array_index].dom_id).show();
              }
            } else {
              if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                this.result_clear_highlight();
              }
              this.result_deactivate($("#" + result_id));
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };
    Chosen.prototype.winnow_results_clear = function () {
      var li, lis, _i, _len, _results;
      this.search_field.val("");
      lis = this.search_results.find("li");
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        li = $(li);
        _results.push(li.hasClass("group-result") ? li.show() : !this.is_multiple || !li.hasClass("result-selected") ? this.result_activate(li) : void 0);
      }
      return _results;
    };
    Chosen.prototype.winnow_results_set_highlight = function () {
      var do_high, selected_results;
      if (!this.result_highlight) {
        selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
        do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
        if (do_high != null) {
          return this.result_do_highlight(do_high);
        }
      }
    };
    Chosen.prototype.no_results = function (terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      return this.search_results.append(no_results_html);
    };
    Chosen.prototype.no_results_clear = function () {
      return this.search_results.find(".no-results").remove();
    };
    Chosen.prototype.keydown_arrow = function () {
      var first_active, next_sib;
      if (!this.result_highlight) {
        first_active = this.search_results.find("li.active-result").first();
        if (first_active) {
          this.result_do_highlight($(first_active));
        }
      } else if (this.results_showing) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          this.result_do_highlight(next_sib);
        }
      }
      if (!this.results_showing) {
        return this.results_show();
      }
    };
    Chosen.prototype.keyup_arrow = function () {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };
    Chosen.prototype.keydown_backstroke = function () {
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        this.pending_backstroke = this.search_container.siblings("li.search-choice").last();
        return this.pending_backstroke.addClass("search-choice-focus");
      }
    };
    Chosen.prototype.clear_backstroke = function () {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };
    Chosen.prototype.keyup_checker = function (evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            return this.results_hide();
          }
          break;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };
    Chosen.prototype.keydown_checker = function (evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };
    Chosen.prototype.search_field_scale = function () {
      var dd_top, div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        if (w > this.f_width - 10) {
          w = this.f_width - 10;
        }
        this.search_field.css({
          'width': w + 'px'
        });
        dd_top = this.container.height();
        return this.dropdown.css({
          "top": dd_top + "px"
        });
      }
    };
    Chosen.prototype.generate_field_id = function () {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };
    Chosen.prototype.generate_random_id = function () {
      var string;
      string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
      while ($("#" + string).length > 0) {
        string += this.generate_random_char();
      }
      return string;
    };
    Chosen.prototype.generate_random_char = function () {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };
    return Chosen;
  }();
  get_side_border_padding = function get_side_border_padding(elmt) {
    var side_border_padding;
    return side_border_padding = elmt.outerWidth() - elmt.width();
  };
  root.get_side_border_padding = get_side_border_padding;
}).call(undefined);
(function () {
  var SelectParser;
  SelectParser = function () {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }
    SelectParser.prototype.add_node = function (child) {
      if (child.nodeName === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };
    SelectParser.prototype.add_group = function (group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };
    SelectParser.prototype.add_option = function (option, group_position, group_disabled) {
      if (option.nodeName === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };
    return SelectParser;
  }();
  SelectParser.select_to_array = function (select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };
  this.SelectParser = SelectParser;
}).call(undefined);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ccm_previewComposerDraft(cID, draftTitle) {
	$.fn.dialog.open({
		title: draftTitle,
		href: CCM_TOOLS_PATH + "/composer/preview_frame?previewCID=" + cID,
		width: '85%',
		modal: false,
		height: '75%'
	});
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ccm_totalAdvancedSearchFields = 0;
var ccm_alLaunchType = new Array();
var ccm_alActiveAssetField = "";
var ccm_alProcessorTarget = "";
var ccm_alDebug = false;

ccm_triggerSelectFile = function ccm_triggerSelectFile(fID, af) {
	if (af == null) {
		var af = ccm_alActiveAssetField;
	}
	//alert(af);
	var obj = $('#' + af + "-fm-selected");
	var dobj = $('#' + af + "-fm-display");
	dobj.hide();
	obj.show();
	obj.load(CCM_TOOLS_PATH + '/files/selector_data?fID=' + fID + '&ccm_file_selected_field=' + af, function () {
		/*
  $(this).find('a.ccm-file-manager-clear-asset').click(function(e) {
  	var field = $(this).attr('ccm-file-manager-field');
  	ccm_clearFile(e, field);
  });
  */
		obj.attr('fID', fID);
		obj.attr('ccm-file-manager-can-view', obj.children('div').attr('ccm-file-manager-can-view'));
		obj.attr('ccm-file-manager-can-edit', obj.children('div').attr('ccm-file-manager-can-edit'));
		obj.attr('ccm-file-manager-can-admin', obj.children('div').attr('ccm-file-manager-can-admin'));
		obj.attr('ccm-file-manager-can-replace', obj.children('div').attr('ccm-file-manager-can-replace'));
		obj.attr('ccm-file-manager-instance', af);

		obj.unbind('click.concrete');
		obj.on('click.concrete', function (e) {
			e.stopPropagation();
			ccm_alActivateMenu($(this), e);
		});

		if (typeof ccm_triggerSelectFileComplete == 'function') {
			ccm_triggerSelectFileComplete(fID, af);
		}
	});
	var vobj = $('#' + af + "-fm-value");
	vobj.attr('value', fID);
	ccm_alSetupFileProcessor();
};

ccm_alGetFileData = function ccm_alGetFileData(fID, onComplete) {
	$.getJSON(CCM_TOOLS_PATH + '/files/get_data.php?fID=' + fID, function (resp) {
		onComplete(resp);
	});
};

ccm_clearFile = function ccm_clearFile(e, af) {
	e.stopPropagation();
	var obj = $('#' + af + "-fm-selected");
	var dobj = $('#' + af + "-fm-display");
	var vobj = $('#' + af + "-fm-value");
	vobj.attr('value', 0);
	obj.hide();
	dobj.show();
};

ccm_activateFileManager = function ccm_activateFileManager(altype, searchInstance) {
	//delegate event handling to table container so clicks
	//to our star don't interfer with clicks to our rows
	ccm_alLaunchType[searchInstance] = altype;
	ccm_alSetupSelectFiles(searchInstance);

	$(document).click(function (e) {
		e.stopPropagation();
		ccm_alSelectNone();
	});

	ccm_setupAdvancedSearch(searchInstance);

	if (altype == 'DASHBOARD') {
		$(".dialog-launch").dialog();
	}

	ccm_alSetupCheckboxes(searchInstance);
	ccm_alSetupFileProcessor();
	ccm_alSetupSingleUploadForm();

	$("form#ccm-" + searchInstance + "-advanced-search select[name=fssID]").change(function () {
		if (altype == 'DASHBOARD') {
			window.location.href = CCM_DISPATCHER_FILENAME + '/dashboard/files/search?fssID=' + $(this).val();
		} else {
			jQuery.fn.dialog.showLoader();
			var url = $("div#ccm-" + searchInstance + "-overlay-wrapper input[name=dialogAction]").val() + "&refreshDialog=1&fssID=" + $(this).val();
			$.get(url, function (resp) {
				jQuery.fn.dialog.hideLoader();
				$("div#ccm-" + searchInstance + "-overlay-wrapper").html(resp);
				$("div#ccm-" + searchInstance + "-overlay-wrapper a.dialog-launch").dialog();
			});
		}
	});

	ccm_searchActivatePostFunction[searchInstance] = function () {
		ccm_alSetupCheckboxes(searchInstance);
		ccm_alSetupSelectFiles(searchInstance);
		ccm_alSetupSingleUploadForm();
	};

	// setup upload form
};

ccm_alSetupSingleUploadForm = function ccm_alSetupSingleUploadForm() {
	$(".ccm-file-manager-submit-single").submit(function () {
		$(this).attr('target', ccm_alProcessorTarget);
		ccm_alSubmitSingle($(this).get(0));
	});
};

ccm_activateFileSelectors = function ccm_activateFileSelectors() {
	$(".ccm-file-manager-launch").unbind();
	$(".ccm-file-manager-launch").click(function () {
		ccm_alLaunchSelectorFileManager($(this).parent().attr('ccm-file-manager-field'));
	});
};

ccm_alLaunchSelectorFileManager = function ccm_alLaunchSelectorFileManager(selector) {
	ccm_alActiveAssetField = selector;
	var filterStr = "";

	var types = $('#' + selector + '-fm-display input.ccm-file-manager-filter');
	if (types.length) {
		var fields = {},
		    name;
		for (i = 0; i < types.length; i++) {
			name = $(types[i]).attr('name');
			if (!(name in fields)) {
				fields[name] = [];
			}
			fields[name].push($(types[i]).attr('value'));
		}
		for (name in fields) {
			if (fields[name].length == 1) {
				filterStr += "&" + name + "=" + encodeURIComponent(fields[name][0]);
			} else {
				$.each(fields[name], function (i, value) {
					filterStr += "&" + name + "[]=" + encodeURIComponent(value);
				});
			}
		}
	}

	ccm_launchFileManager(filterStr);
};

// public method - do not remove or rename
ccm_launchFileManager = function ccm_launchFileManager(filters) {
	$.fn.dialog.open({
		width: '90%',
		height: '70%',
		appendButtons: true,
		modal: false,
		href: CCM_TOOLS_PATH + "/files/search_dialog?ocID=" + CCM_CID + "&search=1" + filters,
		title: ccmi18n_filemanager.title
	});
};

ccm_launchFileSetPicker = function ccm_launchFileSetPicker(fsID) {
	$.fn.dialog.open({
		width: 500,
		height: 160,
		modal: false,
		href: CCM_TOOLS_PATH + '/files/pick_set?oldFSID=' + fsID,
		title: ccmi18n_filemanager.sets
	});
};

ccm_alSubmitSetsForm = function ccm_alSubmitSetsForm(searchInstance) {
	ccm_deactivateSearchResults(searchInstance);
	jQuery.fn.dialog.showLoader();
	$("#ccm-" + searchInstance + "-add-to-set-form").ajaxSubmit(function (resp) {
		jQuery.fn.dialog.closeTop();
		jQuery.fn.dialog.hideLoader();
		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
			$("#ccm-" + searchInstance + "-sets-search-wrapper").load(CCM_TOOLS_PATH + '/files/search_sets_reload', { 'searchInstance': searchInstance }, function () {
				$(".chosen-select").chosen(ccmi18n_chosen);
				ccm_parseAdvancedSearchResponse(resp, searchInstance);
			});
		});
	});
};

ccm_alSubmitPasswordForm = function ccm_alSubmitPasswordForm(searchInstance) {
	ccm_deactivateSearchResults(searchInstance);
	$("#ccm-" + searchInstance + "-password-form").ajaxSubmit(function (resp) {
		jQuery.fn.dialog.closeTop();
		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
			ccm_parseAdvancedSearchResponse(resp, searchInstance);
		});
	});
};

ccm_alSubmitStorageForm = function ccm_alSubmitStorageForm(searchInstance) {
	ccm_deactivateSearchResults(searchInstance);
	$("#ccm-" + searchInstance + "-storage-form").ajaxSubmit(function (resp) {
		jQuery.fn.dialog.closeTop();
		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
			ccm_parseAdvancedSearchResponse(resp, searchInstance);
		});
	});
};

ccm_alSubmitPermissionsForm = function ccm_alSubmitPermissionsForm(searchInstance) {
	ccm_deactivateSearchResults(searchInstance);
	$("#ccm-" + searchInstance + "-permissions-form").ajaxSubmit(function (resp) {
		jQuery.fn.dialog.closeTop();
		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
			ccm_parseAdvancedSearchResponse(resp, searchInstance);
		});
	});
};

ccm_alSetupSetsForm = function ccm_alSetupSetsForm(searchInstance) {
	// activate file set search
	$('#fsAddToSearchName').liveUpdate('ccm-file-search-add-to-sets-list', 'fileset');

	// Setup the tri-state checkboxes
	$('.ccm-file-set-add-cb a').each(function () {
		var cb = $(this);
		var startingState = cb.attr("ccm-tri-state-startup");
		$(this).click(function () {
			var selectedState = $(this).attr("ccm-tri-state-selected");
			var toSetState = 0;
			switch (selectedState) {
				case '0':
					if (startingState == '1') {
						toSetState = '1';
					} else {
						toSetState = '2';
					}
					break;
				case '1':
					toSetState = '2';
					break;
				case '2':
					toSetState = '0';
					break;
			}

			$(this).attr('ccm-tri-state-selected', toSetState);
			$(this).parent().find('input').val(toSetState);
			$(this).find('img').attr('src', CCM_IMAGE_PATH + '/checkbox_state_' + toSetState + '.png');
		});
	});
	$("#ccm-" + searchInstance + "-add-to-set-form input[name=fsNew]").click(function () {
		if (!$(this).prop('checked')) {
			$("#ccm-" + searchInstance + "-add-to-set-form input[name=fsNewText]").val('');
		}
	});
	$("#ccm-" + searchInstance + "-add-to-set-form").submit(function () {
		ccm_alSubmitSetsForm(searchInstance);
		return false;
	});
};

ccm_alSetupPasswordForm = function ccm_alSetupPasswordForm() {
	$("#ccm-file-password-form").submit(function () {
		ccm_alSubmitPasswordForm();
		return false;
	});
};
ccm_alRescanFiles = function ccm_alRescanFiles() {
	var turl = CCM_TOOLS_PATH + '/files/rescan?';
	var files = arguments;
	for (i = 0; i < files.length; i++) {
		turl += 'fID[]=' + files[i] + '&';
	}
	$.fn.dialog.open({
		title: ccmi18n_filemanager.rescan,
		href: turl,
		width: 350,
		modal: false,
		height: 200,
		onClose: function onClose() {
			if (files.length == 1) {
				$('#ccm-file-properties-wrapper').html('');
				jQuery.fn.dialog.showLoader();

				// open the properties window for this bad boy.
				$("#ccm-file-properties-wrapper").load(CCM_TOOLS_PATH + '/files/properties?fID=' + files[0] + '&reload=1', false, function () {
					jQuery.fn.dialog.hideLoader();
					$(this).find(".dialog-launch").dialog();
				});
			}
		}
	});
};

ccm_alSelectPermissionsEntity = function ccm_alSelectPermissionsEntity(selector, id, name) {
	var html = $('#ccm-file-permissions-entity-base').html();
	$('#ccm-file-permissions-entities-wrapper').append('<div class="ccm-file-permissions-entity">' + html + '<\/div>');
	var p = $('.ccm-file-permissions-entity');
	var ap = p[p.length - 1];
	$(ap).find('h3 span').html(name);
	$(ap).find('input[type=hidden]').val(selector + '_' + id);
	$(ap).find('select').each(function () {
		$(this).attr('name', $(this).attr('name') + '_' + selector + '_' + id);
	});
	$(ap).find('div.ccm-file-access-extensions input[type=checkbox]').each(function () {
		$(this).attr('name', $(this).attr('name') + '_' + selector + '_' + id + '[]');
	});

	ccm_alActivateFilePermissionsSelector();
};

ccm_alActivateFilePermissionsSelector = function ccm_alActivateFilePermissionsSelector() {
	$(".ccm-file-access-add select").unbind();
	$(".ccm-file-access-add select").change(function () {
		var p = $(this).parents('div.ccm-file-permissions-entity')[0];
		if ($(this).val() == ccmi18n_filemanager.PTYPE_CUSTOM) {
			$(p).find('div.ccm-file-access-add-extensions').show();
		} else {
			$(p).find('div.ccm-file-access-add-extensions').hide();
		}
	});
	$(".ccm-file-access-file-manager select").change(function () {
		var p = $(this).parents('div.ccm-file-permissions-entity')[0];
		if ($(this).val() != ccmi18n_filemanager.PTYPE_NONE) {
			$(p).find('.ccm-file-access-add').show();
			$(p).find('.ccm-file-access-edit').show();
			$(p).find('.ccm-file-access-admin').show();
			//$(p).find('div.ccm-file-access-add-extensions').show();				
		} else {
			$(p).find('.ccm-file-access-add').hide();
			$(p).find('.ccm-file-access-edit').hide();
			$(p).find('.ccm-file-access-admin').hide();
			$(p).find('div.ccm-file-access-add-extensions').hide();
		}
	});

	$("a.ccm-file-permissions-remove").click(function () {
		$(this).parent().parent().fadeOut(100, function () {
			$(this).remove();
		});
	});
	$("input[name=toggleCanAddExtension]").unbind();
	$("input[name=toggleCanAddExtension]").click(function () {
		var ext = $(this).parent().parent().find('div.ccm-file-access-extensions');

		if ($(this).prop('checked') == 1) {
			ext.find('input').attr('checked', true);
		} else {
			ext.find('input').attr('checked', false);
		}
	});
};

ccm_alSetupVersionSelector = function ccm_alSetupVersionSelector() {
	$("#ccm-file-versions-grid input[type=radio]").click(function () {
		$('#ccm-file-versions-grid tr').removeClass('ccm-file-versions-grid-active');

		var trow = $(this).parent().parent();
		var fID = trow.attr('fID');
		var fvID = trow.attr('fvID');
		var postStr = 'task=approve_version&fID=' + fID + '&fvID=' + fvID;
		$.post(CCM_TOOLS_PATH + '/files/properties', postStr, function (resp) {
			trow.addClass('ccm-file-versions-grid-active');
			trow.find('td').show('highlight', {
				color: '#FFF9BB'
			});
		});
	});

	$(".ccm-file-versions-remove").click(function () {
		var trow = $(this).parent().parent();
		var fID = trow.attr('fID');
		var fvID = trow.attr('fvID');
		var postStr = 'task=delete_version&fID=' + fID + '&fvID=' + fvID;
		$.post(CCM_TOOLS_PATH + '/files/properties', postStr, function (resp) {
			trow.fadeOut(200, function () {
				trow.remove();
			});
		});
		return false;
	});
};

ccm_alDeleteFiles = function ccm_alDeleteFiles(searchInstance) {
	$("#ccm-" + searchInstance + "-delete-form").ajaxSubmit(function (resp) {
		ccm_parseJSON(resp, function () {
			jQuery.fn.dialog.closeTop();
			ccm_deactivateSearchResults(searchInstance);
			$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
				ccm_parseAdvancedSearchResponse(resp, searchInstance);
			});
		});
	});
};

ccm_alDuplicateFiles = function ccm_alDuplicateFiles(searchInstance) {
	$("#ccm-" + searchInstance + "-duplicate-form").ajaxSubmit(function (resp) {
		ccm_parseJSON(resp, function () {
			jQuery.fn.dialog.closeTop();
			ccm_deactivateSearchResults(searchInstance);
			var r = eval('(' + resp + ')');

			$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
				ccm_parseAdvancedSearchResponse(resp, searchInstance);
				var highlight = new Array();
				for (i = 0; i < r.fID.length; i++) {
					fID = r.fID[i];
					ccm_uploadedFiles.push(fID);
					highlight.push(fID);
				}
				ccm_alRefresh(highlight, searchInstance);
				ccm_filesUploadedDialog(searchInstance);
			});
		});
	});
};

ccm_alSetupSelectFiles = function ccm_alSetupSelectFiles(searchInstance) {
	$('.ccm-file-list').unbind();
	/*
 $('.ccm-file-list').click(function(e){
 	e.stopPropagation();
 	if ($(e.target).is('img.ccm-star')) {	
 		var fID = $(e.target).parents('tr.ccm-list-record')[0].id;
 		fID = fID.substring(3);
 		ccm_starFile(e.target,fID);
 	}
 	else{
 		$(e.target).parents('tr.ccm-list-record').each(function(){
 			ccm_alActivateMenu($(this), e);		
 		});
 	}
 });
 */

	$('.ccm-file-list tr.ccm-list-record').click(function (e) {
		e.stopPropagation();
		ccm_alActivateMenu($(this), e);
	});
	$('.ccm-file-list img.ccm-star').click(function (e) {
		e.stopPropagation();
		var fID = $(e.target).parents('tr.ccm-list-record')[0].id;
		fID = fID.substring(3);
		ccm_starFile(e.target, fID);
	});
	if (ccm_alLaunchType[searchInstance] == 'DASHBOARD') {
		$(".ccm-file-list-thumbnail").hover(function (e) {
			var fID = $(this).attr('fID');
			var obj = $('#fID' + fID + 'hoverThumbnail');
			if (obj.length > 0) {
				var tdiv = obj.find('div');
				var pos = obj.position();
				tdiv.css('top', pos.top);
				tdiv.css('left', pos.left);
				tdiv.show();
			}
		}, function () {
			var fID = $(this).attr('fID');
			var obj = $('#fID' + fID + 'hoverThumbnail');
			var tdiv = obj.find('div');
			tdiv.hide();
		});
	}
};

ccm_alSetupCheckboxes = function ccm_alSetupCheckboxes(searchInstance) {
	$("#ccm-" + searchInstance + "-list-cb-all").unbind();
	$("#ccm-" + searchInstance + "-list-cb-all").click(function () {
		ccm_hideMenus();
		if ($(this).prop('checked') == true) {
			$('#ccm-' + searchInstance + '-search-results td.ccm-file-list-cb input[type=checkbox]').attr('checked', true);
			$("#ccm-" + searchInstance + "-list-multiple-operations").attr('disabled', false);
		} else {
			$('#ccm-' + searchInstance + '-search-results td.ccm-file-list-cb input[type=checkbox]').attr('checked', false);
			$("#ccm-" + searchInstance + "-list-multiple-operations").attr('disabled', true);
		}
	});
	$("#ccm-" + searchInstance + "-search-results td.ccm-file-list-cb input[type=checkbox]").click(function (e) {
		e.stopPropagation();
		ccm_hideMenus();
		ccm_alRescanMultiFileMenu(searchInstance);
	});
	$("#ccm-" + searchInstance + "-search-results td.ccm-file-list-cb").click(function (e) {
		e.stopPropagation();
		ccm_hideMenus();
		$(this).find('input[type=checkbox]').click();
		ccm_alRescanMultiFileMenu(searchInstance);
	});

	// if we're not in the dashboard, add to the multiple operations select menu
	if (ccm_alLaunchType[searchInstance] != 'DASHBOARD' && ccm_alLaunchType[searchInstance] != 'BROWSE') {
		var chooseText = ccmi18n_filemanager.select;
		$("#ccm-" + searchInstance + "-list-multiple-operations option:eq(0)").after("<option value=\"choose\">" + chooseText + "</option>");
	}
	$("#ccm-" + searchInstance + "-list-multiple-operations").change(function () {
		var action = $(this).val();
		var fIDstring = ccm_alGetSelectedFileIDs(searchInstance);
		switch (action) {
			case 'choose':
				var fIDs = new Array();
				$("#ccm-" + searchInstance + "-search-results td.ccm-file-list-cb input[type=checkbox]:checked").each(function () {
					fIDs.push($(this).val());
				});
				ccm_alSelectFile(fIDs, true);
				break;
			case "delete":
				jQuery.fn.dialog.open({
					width: 500,
					height: 400,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/files/delete?' + fIDstring + '&searchInstance=' + searchInstance,
					title: ccmi18n_filemanager.deleteFile
				});
				break;
			case "duplicate":
				jQuery.fn.dialog.open({
					width: 500,
					height: 400,
					modal: false,
					href: CCM_TOOLS_PATH + '/files/duplicate?' + fIDstring + '&searchInstance=' + searchInstance,
					title: ccmi18n_filemanager.duplicateFile
				});
				break;
			case "sets":
				jQuery.fn.dialog.open({
					width: 500,
					height: 400,
					modal: false,
					href: CCM_TOOLS_PATH + '/files/add_to?' + fIDstring + '&searchInstance=' + searchInstance,
					title: ccmi18n_filemanager.sets
				});
				break;
			case "properties":
				jQuery.fn.dialog.open({
					width: 690,
					height: 440,
					modal: false,
					href: CCM_TOOLS_PATH + '/files/bulk_properties?' + fIDstring + '&searchInstance=' + searchInstance,
					title: ccmi18n.properties
				});
				break;
			case "rescan":
				jQuery.fn.dialog.open({
					width: 350,
					height: 200,
					modal: false,
					href: CCM_TOOLS_PATH + '/files/rescan?' + fIDstring + '&searchInstance=' + searchInstance,
					title: ccmi18n_filemanager.rescan,
					onClose: function onClose() {
						$("#ccm-" + searchInstance + "-advanced-search").submit();
					}
				});
				break;
			case "download":
				window.frames[ccm_alProcessorTarget].location = CCM_TOOLS_PATH + '/files/download?' + fIDstring;
				break;
		}

		$(this).get(0).selectedIndex = 0;
	});

	// activate the file sets checkboxes
	ccm_alSetupFileSetSearch(searchInstance);
};

ccm_alSetupFileSetSearch = function ccm_alSetupFileSetSearch(searchInstance) {
	$("#ccm-" + searchInstance + "-sets-search-wrapper select").chosen(ccmi18n_chosen).unbind();
	$("#ccm-" + searchInstance + "-sets-search-wrapper select").chosen(ccmi18n_chosen).change(function () {
		var sel = $("#ccm-" + searchInstance + "-sets-search-wrapper option:selected");
		$("#ccm-" + searchInstance + "-advanced-search").submit();
	});

	/*
 $(".ccm-" + searchInstance + "-search-advanced-sets-cb input[type=checkbox]").unbind();
 $(".ccm-" + searchInstance + "-search-advanced-sets-cb input[type=checkbox]").click(function() {
 	$("input[name=fsIDNone][instance=" + searchInstance + "]").attr('checked', false);
 	$("#ccm-" + searchInstance + "-advanced-search").submit();
 });
 
 // activate file set search
 $('div.ccm-file-sets-search-wrapper-input input').liveUpdate('ccm-file-search-advanced-sets-list', 'fileset');
 
 $("input[name=fsIDNone][instance=" + searchInstance + "]").unbind();
 $("input[name=fsIDNone][instance=" + searchInstance + "]").click(function() {
 	if ($(this).prop('checked')) {
 		$(".ccm-" + searchInstance + "-search-advanced-sets-cb input[type=checkbox]").attr('checked', false);
 		$(".ccm-" + searchInstance + "-search-advanced-sets-cb input[type=checkbox]").attr('disabled', true);
 	} else {
 		$(".ccm-" + searchInstance + "-search-advanced-sets-cb input[type=checkbox]").attr('disabled', false);
 	}
 	$("#ccm-" + searchInstance + "-advanced-search").submit();
 });
 */
};

ccm_alGetSelectedFileIDs = function ccm_alGetSelectedFileIDs(searchInstance) {
	var fidstr = '';
	$("#ccm-" + searchInstance + "-search-results td.ccm-file-list-cb input[type=checkbox]:checked").each(function () {
		fidstr += 'fID[]=' + $(this).val() + '&';
	});
	return fidstr;
};

ccm_alRescanMultiFileMenu = function ccm_alRescanMultiFileMenu(searchInstance) {
	if ($("#ccm-" + searchInstance + "-search-results td.ccm-file-list-cb input[type=checkbox]:checked").length > 0) {
		$("#ccm-" + searchInstance + "-list-multiple-operations").attr('disabled', false);
	} else {
		$("#ccm-" + searchInstance + "-list-multiple-operations").attr('disabled', true);
	}
};

ccm_alSetupFileProcessor = function ccm_alSetupFileProcessor() {
	if (ccm_alProcessorTarget != '') {
		return false;
	}

	var ts = parseInt(new Date().getTime().toString().substring(0, 10));
	var ifr;
	try {
		//IE7 hack
		ifr = document.createElement('<iframe name="ccm-al-upload-processor' + ts + '">');
	} catch (ex) {
		ifr = document.createElement('iframe');
	}
	ifr.id = 'ccm-al-upload-processor' + ts;
	ifr.name = 'ccm-al-upload-processor' + ts;
	ifr.style.border = '0px';
	ifr.style.width = '0px';
	ifr.style.height = '0px';
	ifr.style.display = "none";
	document.body.appendChild(ifr);

	if (ccm_alDebug) {
		ccm_alProcessorTarget = "_blank";
	} else {
		ccm_alProcessorTarget = 'ccm-al-upload-processor' + ts;
	}
};

ccm_alSubmitSingle = function ccm_alSubmitSingle(form) {
	if ($(form).find(".ccm-al-upload-single-file").val() == '') {
		return false;
	} else {
		$(form).find('.ccm-al-upload-single-submit').hide();
		$(form).find('.ccm-al-upload-single-loader').show();
	}
};

ccm_alResetSingle = function ccm_alResetSingle() {
	$('.ccm-al-upload-single-file').val('');
	$('.ccm-al-upload-single-loader').hide();
	$('.ccm-al-upload-single-submit').show();
};

var ccm_uploadedFiles = [];
ccm_filesUploadedDialog = function ccm_filesUploadedDialog(searchInstance) {
	if (document.getElementById('ccm-file-upload-multiple-tab')) jQuery.fn.dialog.closeTop();
	var fIDstring = '';
	for (var i = 0; i < ccm_uploadedFiles.length; i++) {
		fIDstring = fIDstring + '&fID[]=' + ccm_uploadedFiles[i];
	}jQuery.fn.dialog.open({
		width: 690,
		height: 440,
		modal: false,
		href: CCM_TOOLS_PATH + '/files/bulk_properties/?' + fIDstring + '&uploaded=true&searchInstance=' + searchInstance,
		onClose: function onClose() {
			ccm_deactivateSearchResults(searchInstance);
			$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
				ccm_parseAdvancedSearchResponse(resp, searchInstance);
			});
		},
		title: ccmi18n_filemanager.uploadComplete
	});
	ccm_uploadedFiles = [];
};

ccm_alSetupUploadDetailsForm = function ccm_alSetupUploadDetailsForm(searchInstance) {
	$("#ccm-" + searchInstance + "-update-uploaded-details-form").submit(function () {
		ccm_alSubmitUploadDetailsForm(searchInstance);
		return false;
	});
};

ccm_alSubmitUploadDetailsForm = function ccm_alSubmitUploadDetailsForm(searchInstance) {
	jQuery.fn.dialog.showLoader();
	$("#ccm-" + searchInstance + "-update-uploaded-details-form").ajaxSubmit(function (r1) {
		var r1a = eval('(' + r1 + ')');
		var form = $("#ccm-" + searchInstance + "-advanced-search");
		if (form.length > 0) {
			form.ajaxSubmit(function (resp) {
				$("#ccm-" + searchInstance + "-sets-search-wrapper").load(CCM_TOOLS_PATH + '/files/search_sets_reload', { 'searchInstance': searchInstance }, function () {
					jQuery.fn.dialog.hideLoader();
					jQuery.fn.dialog.closeTop();
					ccm_parseAdvancedSearchResponse(resp, searchInstance);
					ccm_alHighlightFileIDArray(r1a);
				});
			});
		} else {
			jQuery.fn.dialog.hideLoader();
			jQuery.fn.dialog.closeTop();
		}
	});
};

ccm_alRefresh = function ccm_alRefresh(highlightFIDs, searchInstance, fileSelector) {
	var ids = highlightFIDs;
	ccm_deactivateSearchResults(searchInstance);
	$("#ccm-" + searchInstance + "-search-results").load(CCM_TOOLS_PATH + '/files/search_results', {
		'ccm_order_by': 'fvDateAdded',
		'ccm_order_dir': 'desc',
		'fileSelector': fileSelector,
		'searchType': ccm_alLaunchType[searchInstance],
		'searchInstance': searchInstance
	}, function () {
		ccm_activateSearchResults(searchInstance);
		if (ids != false) {
			ccm_alHighlightFileIDArray(ids);
		}
		ccm_alSetupSelectFiles(searchInstance);
	});
};

ccm_alHighlightFileIDArray = function ccm_alHighlightFileIDArray(ids) {
	for (i = 0; i < ids.length; i++) {
		var td = $('tr[fID=' + ids[i] + '] td');
		var oldBG = td.css('backgroundColor');
		td.animate({ backgroundColor: '#FFF9BB' }, { queue: true, duration: 1000 }).animate({ backgroundColor: oldBG }, 500);
	}
};

ccm_alSelectFile = function ccm_alSelectFile(fID) {

	if (typeof ccm_chooseAsset == 'function') {
		var qstring = '';
		if ((typeof fID === "undefined" ? "undefined" : _typeof(fID)) == 'object') {
			for (i = 0; i < fID.length; i++) {
				qstring += 'fID[]=' + fID[i] + '&';
			}
		} else {
			qstring += 'fID=' + fID;
		}

		$.getJSON(CCM_TOOLS_PATH + '/files/get_data.php?' + qstring, function (resp) {
			ccm_parseJSON(resp, function () {
				for (i = 0; i < resp.length; i++) {
					ccm_chooseAsset(resp[i]);
				}
				jQuery.fn.dialog.closeTop();
			});
		});
	} else {
		if ((typeof fID === "undefined" ? "undefined" : _typeof(fID)) == 'object') {
			for (i = 0; i < fID.length; i++) {
				ccm_triggerSelectFile(fID[i]);
			}
		} else {
			ccm_triggerSelectFile(fID);
		}
		jQuery.fn.dialog.closeTop();
	}
};

ccm_alActivateMenu = function ccm_alActivateMenu(obj, e) {

	// Is this a file that's already been chosen that we're selecting?
	// If so, we need to offer the reset switch

	var selectedFile = $(obj).find('div[ccm-file-manager-field]');
	var selector = '';
	if (selectedFile.length > 0) {
		selector = selectedFile.attr('ccm-file-manager-field');
	}
	if (!selector) {
		selector = ccm_alActiveAssetField;
	}
	ccm_hideMenus();

	var fID = $(obj).attr('fID');
	var searchInstance = $(obj).attr('ccm-file-manager-instance');

	// now, check to see if this menu has been made
	var bobj = document.getElementById("ccm-al-menu" + fID + searchInstance + selector);

	// This immediate click mode has promise, but it's annoying more than it's helpful
	/*
 if (ccm_alLaunchType != 'DASHBOARD' && selector == '') {
 	// then we are in file list mode in the site, which means we 
 	// we don't give out all the options in the list
 	ccm_alSelectFile(fID);
 	return;
 }
 */

	if (!bobj) {
		// create the 1st instance of the menu
		el = document.createElement("DIV");
		el.id = "ccm-al-menu" + fID + searchInstance + selector;
		el.className = "ccm-menu ccm-ui";
		el.style.display = "block";
		el.style.visibility = "hidden";
		document.body.appendChild(el);

		var passedFilters = $('div[ccm-file-manager-field=' + selector + '] input.ccm-file-manager-filter');
		var filterStr = '';
		if (passedFilters.length > 0) {
			passedFilters.each(function () {
				filterStr += '&' + $(this).attr('name') + '=' + $(this).attr('value');
			});
		}
		var filepath = $(obj).attr('al-filepath');
		bobj = $("#ccm-al-menu" + fID + searchInstance + selector);
		bobj.css("position", "absolute");

		//contents  of menu
		var html = '<div class="popover"><div class="arrow"></div><div class="inner"><div class="content">';
		html += '<ul>';
		if (ccm_alLaunchType[searchInstance] != 'DASHBOARD' && ccm_alLaunchType[searchInstance] != 'BROWSE') {
			// if we're launching this at the selector level, that means we've already chosen a file, and this should instead launch the library
			var onclick = selectedFile.length > 0 ? 'ccm_alLaunchSelectorFileManager(\'' + selector + '\')' : 'ccm_alSelectFile(' + fID + ')';
			var chooseText = selectedFile.length > 0 ? ccmi18n_filemanager.chooseNew : ccmi18n_filemanager.select;
			html += '<li><a class="ccm-menu-icon ccm-icon-choose-file-menu" dialog-modal="false" dialog-width="90%" dialog-height="70%" dialog-title="' + ccmi18n_filemanager.select + '" id="menuSelectFile' + fID + '" href="javascript:void(0)" onclick="' + onclick + '">' + chooseText + '<\/a><\/li>';
		}
		if (selectedFile.length > 0) {
			html += '<li><a class="ccm-menu-icon ccm-icon-clear-file-menu" href="javascript:void(0)" id="menuClearFile' + fID + searchInstance + selector + '">' + ccmi18n_filemanager.clear + '<\/a><\/li>';
		}

		if (ccm_alLaunchType[searchInstance] != 'DASHBOARD' && ccm_alLaunchType[searchInstance] != 'BROWSE' && selectedFile.length > 0) {
			html += '<li class="ccm-menu-separator"></li>';
		}
		if ($(obj).attr('ccm-file-manager-can-view') == '1') {
			html += '<li><a class="ccm-menu-icon ccm-icon-view dialog-launch" dialog-modal="false" dialog-append-buttons="true" dialog-width="90%" dialog-height="75%" dialog-title="' + ccmi18n_filemanager.view + '" id="menuView' + fID + '" href="' + CCM_TOOLS_PATH + '/files/view?fID=' + fID + '">' + ccmi18n_filemanager.view + '<\/a><\/li>';
		} else {
			html += '<li><a class="ccm-menu-icon ccm-icon-download-menu" href="javascript:void(0)" id="menuDownload' + fID + '" onclick="window.frames[\'' + ccm_alProcessorTarget + '\'].location=\'' + CCM_TOOLS_PATH + '/files/download?fID=' + fID + '\'">' + ccmi18n_filemanager.download + '<\/a><\/li>';
		}
		if ($(obj).attr('ccm-file-manager-can-edit') == '1') {
			html += '<li><a class="ccm-menu-icon ccm-icon-edit-menu dialog-launch" dialog-modal="false" dialog-width="90%" dialog-height="75%" dialog-title="' + ccmi18n_filemanager.edit + '" id="menuEdit' + fID + '" href="' + CCM_TOOLS_PATH + '/files/edit?searchInstance=' + searchInstance + '&fID=' + fID + filterStr + '">' + ccmi18n_filemanager.edit + '<\/a><\/li>';
		}
		html += '<li><a class="ccm-menu-icon ccm-icon-properties-menu dialog-launch" dialog-modal="false" dialog-width="680" dialog-height="450" dialog-title="' + ccmi18n_filemanager.properties + '" id="menuProperties' + fID + '" href="' + CCM_TOOLS_PATH + '/files/properties?searchInstance=' + searchInstance + '&fID=' + fID + '">' + ccmi18n_filemanager.properties + '<\/a><\/li>';
		if ($(obj).attr('ccm-file-manager-can-replace') == '1') {
			html += '<li><a class="ccm-menu-icon ccm-icon-replace dialog-launch" dialog-modal="false" dialog-width="300" dialog-height="260" dialog-title="' + ccmi18n_filemanager.replace + '" id="menuFileReplace' + fID + '" href="' + CCM_TOOLS_PATH + '/files/replace?searchInstance=' + searchInstance + '&fID=' + fID + '">' + ccmi18n_filemanager.replace + '<\/a><\/li>';
		}
		if ($(obj).attr('ccm-file-manager-can-duplicate') == '1') {
			html += '<li><a class="ccm-menu-icon ccm-icon-copy-menu" id="menuFileDuplicate' + fID + '" href="javascript:void(0)" onclick="ccm_alDuplicateFile(' + fID + ',\'' + searchInstance + '\')">' + ccmi18n_filemanager.duplicate + '<\/a><\/li>';
		}
		html += '<li><a class="ccm-menu-icon ccm-icon-sets dialog-launch" dialog-modal="false" dialog-width="500" dialog-height="400" dialog-title="' + ccmi18n_filemanager.sets + '" id="menuFileSets' + fID + '" href="' + CCM_TOOLS_PATH + '/files/add_to?searchInstance=' + searchInstance + '&fID=' + fID + '">' + ccmi18n_filemanager.sets + '<\/a><\/li>';
		if ($(obj).attr('ccm-file-manager-can-admin') == '1' || $(obj).attr('ccm-file-manager-can-delete') == '1') {
			html += '<li class="ccm-menu-separator"></li>';
		}
		if ($(obj).attr('ccm-file-manager-can-admin') == '1') {
			html += '<li><a class="ccm-menu-icon ccm-icon-access-permissions dialog-launch" dialog-modal="false" dialog-width="400" dialog-height="450" dialog-title="' + ccmi18n_filemanager.permissions + '" id="menuFilePermissions' + fID + '" href="' + CCM_TOOLS_PATH + '/files/permissions?searchInstance=' + searchInstance + '&fID=' + fID + '">' + ccmi18n_filemanager.permissions + '<\/a><\/li>';
		}
		if ($(obj).attr('ccm-file-manager-can-delete') == '1') {
			html += '<li><a class="ccm-icon-delete-menu ccm-menu-icon dialog-launch" dialog-append-buttons="true" dialog-modal="false" dialog-width="500" dialog-height="200" dialog-title="' + ccmi18n_filemanager.deleteFile + '" id="menuDeleteFile' + fID + '" href="' + CCM_TOOLS_PATH + '/files/delete?searchInstance=' + searchInstance + '&fID=' + fID + '">' + ccmi18n_filemanager.deleteFile + '<\/a><\/li>';
		}
		html += '</ul>';
		html += '</div></div></div>';
		bobj.append(html);

		$(bobj).find('a').bind('click.hide-menu', function (e) {
			ccm_hideMenus();
			return false;
		});

		$("#ccm-al-menu" + fID + searchInstance + selector + " a.dialog-launch").dialog();

		$('a#menuClearFile' + fID + searchInstance + selector).click(function (e) {
			ccm_clearFile(e, selector);
			ccm_hideMenus();
		});
	} else {
		bobj = $("#ccm-al-menu" + fID + searchInstance + selector);
	}

	ccm_fadeInMenu(bobj, e);
};

ccm_alSelectNone = function ccm_alSelectNone() {
	ccm_hideMenus();
};

var checkbox_status = false;
toggleCheckboxStatus = function toggleCheckboxStatus(form) {
	if (checkbox_status) {
		for (i = 0; i < form.elements.length; i++) {
			if (form.elements[i].type == "checkbox") {
				form.elements[i].checked = false;
			}
		}
		checkbox_status = false;
	} else {
		for (i = 0; i < form.elements.length; i++) {
			if (form.elements[i].type == "checkbox") {
				form.elements[i].checked = true;
			}
		}
		checkbox_status = true;
	}
};

ccm_alDuplicateFile = function ccm_alDuplicateFile(fID, searchInstance) {
	var postStr = 'fID=' + fID + '&searchInstance=' + searchInstance;

	$.post(CCM_TOOLS_PATH + '/files/duplicate', postStr, function (resp) {
		var r = eval('(' + resp + ')');

		if (r.error == 1) {
			ccmAlert.notice(ccmi18n.error, r.message);
			return false;
		}

		var highlight = new Array();
		if (r.fID) {
			highlight.push(r.fID);
			ccm_alRefresh(highlight, searchInstance);
			ccm_uploadedFiles.push(r.fID);
			ccm_filesUploadedDialog(searchInstance);
		}
	});
};

ccm_alSelectMultipleIncomingFiles = function ccm_alSelectMultipleIncomingFiles(obj) {
	if ($(obj).prop('checked')) {
		$("input.ccm-file-select-incoming").attr('checked', true);
	} else {
		$("input.ccm-file-select-incoming").attr('checked', false);
	}
};

ccm_starFile = function ccm_starFile(img, fID) {
	var action = '';
	if ($(img).attr('src').indexOf(CCM_STAR_STATES.unstarred) != -1) {
		$(img).attr('src', $(img).attr('src').replace(CCM_STAR_STATES.unstarred, CCM_STAR_STATES.starred));
		action = 'star';
	} else {
		$(img).attr('src', $(img).attr('src').replace(CCM_STAR_STATES.starred, CCM_STAR_STATES.unstarred));
		action = 'unstar';
	}

	$.post(CCM_TOOLS_PATH + '/' + CCM_STAR_ACTION, { 'action': action, 'file-id': fID }, function (data, textStatus) {
		//callback, in case we want to do some post processing
	});
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 *
 * Color picker
 * Author: Stefan Petre www.eyecon.ro
 * 
 */
(function ($) {
	var ColorPicker = function () {
		var ids = {},
		    inAction,
		    charMin = 65,
		    visible,
		    tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" class="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" class="text" maxlength="3" size="3" /><span></span></div><input type="button" class="colorpicker_none" name="none" value="x" /><input type="button" class="colorpicker_submit" name="save" value="Ok" /></div>',
		    defaults = {
			eventName: 'click',
			onShow: function onShow() {},
			onBeforeShow: function onBeforeShow() {},
			onHide: function onHide() {},
			onNone: function onNone() {},
			onChange: function onChange() {},
			onSubmit: function onSubmit() {},
			color: 'ff0000',
			livePreview: true,
			flat: false
		},
		    fillRGBFields = function fillRGBFields(hsb, cal) {
			var rgb = HSBToRGB(hsb);
			$(cal).data('colorpicker').fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
		},
		    fillHSBFields = function fillHSBFields(hsb, cal) {
			$(cal).data('colorpicker').fields.eq(4).val(hsb.h).end().eq(5).val(hsb.s).end().eq(6).val(hsb.b).end();
		},
		    fillHexFields = function fillHexFields(hsb, cal) {
			$(cal).data('colorpicker').fields.eq(0).val(HSBToHex(hsb)).end();
		},
		    setSelector = function setSelector(hsb, cal) {
			$(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({ h: hsb.h, s: 100, b: 100 }));
			$(cal).data('colorpicker').selectorIndic.css({
				left: parseInt(150 * hsb.s / 100, 10),
				top: parseInt(150 * (100 - hsb.b) / 100, 10)
			});
		},
		    setHue = function setHue(hsb, cal) {
			$(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
		},
		    setCurrentColor = function setCurrentColor(hsb, cal) {
			$(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
		},
		    setNewColor = function setNewColor(hsb, cal) {
			$(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
		},
		    keyDown = function keyDown(ev) {
			var pressedKey = ev.charCode || ev.keyCode || -1;
			if (pressedKey > charMin && pressedKey <= 90 || pressedKey == 32) {
				return false;
			}
			var cal = $(this).parent().parent();
			if (cal.data('colorpicker').livePreview === true) {
				change.apply(this);
			}
		},
		    change = function change(ev) {
			var cal = $(this).parent().parent(),
			    col;

			if (!cal.data('colorpicker') || !cal.data('colorpicker').fields) return;

			if (this.parentNode.className.indexOf('_hex') > 0) {
				cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
			} else if (this.parentNode.className.indexOf('_hsb') > 0) {
				cal.data('colorpicker').color = col = fixHSB({
					h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
					s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
					b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
				});
			} else {
				cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
					r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
					g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
					b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
				}));
			}
			if (ev) {
				fillRGBFields(col, cal.get(0));
				fillHexFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
			}
			setSelector(col, cal.get(0));
			setHue(col, cal.get(0));
			setNewColor(col, cal.get(0));
			cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
		},
		    blur = function blur(ev) {
			var cal = $(this).parent().parent();
			var colorpicker = cal.data('colorpicker');
			if (colorpicker && colorpicker.fields) colorpicker.fields.parent().removeClass('colorpicker_focus');
		},
		    focus = function focus() {
			charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
			//alert(this.parentNode.innerHTML+' '+this.parentNode.id);
			var colorpicker = $(this).parent().parent().data('colorpicker');
			if (colorpicker && colorpicker.fields) colorpicker.fields.parent().removeClass('colorpicker_focus');
			$(this).parent().addClass('colorpicker_focus');
		},
		    downIncrement = function downIncrement(ev) {
			var field = $(this).parent().find('input').focus();
			var current = {
				el: $(this).parent().addClass('colorpicker_slider'),
				max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255,
				y: ev.pageY,
				field: field,
				val: parseInt(field.val(), 10),
				preview: $(this).parent().parent().data('colorpicker').livePreview
			};
			$(document).bind('mouseup', current, upIncrement);
			$(document).bind('mousemove', current, moveIncrement);
		},
		    moveIncrement = function moveIncrement(ev) {
			ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
			if (ev.data.preview) {
				change.apply(ev.data.field.get(0), [true]);
			}
			return false;
		},
		    upIncrement = function upIncrement(ev) {
			change.apply(ev.data.field.get(0), [true]);
			ev.data.el.removeClass('colorpicker_slider').find('input').focus();
			$(document).unbind('mouseup', upIncrement);
			$(document).unbind('mousemove', moveIncrement);
			return false;
		},
		    downHue = function downHue(ev) {
			var current = {
				cal: $(this).parent(),
				y: $(this).offset().top
			};
			current.preview = current.cal.data('colorpicker').livePreview;
			$(document).bind('mouseup', current, upHue);
			$(document).bind('mousemove', current, moveHue);
		},
		    moveHue = function moveHue(ev) {
			change.apply(ev.data.cal.data('colorpicker').fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, ev.pageY - ev.data.y))) / 150, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upHue = function upHue(ev) {
			fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
			$(document).unbind('mouseup', upHue);
			$(document).unbind('mousemove', moveHue);
			return false;
		},
		    downSelector = function downSelector(ev) {
			var current = {
				cal: $(this).parent(),
				pos: $(this).offset()
			};
			current.preview = current.cal.data('colorpicker').livePreview;
			$(document).bind('mouseup', current, upSelector);
			$(document).bind('mousemove', current, moveSelector);
		},
		    moveSelector = function moveSelector(ev) {
			change.apply(ev.data.cal.data('colorpicker').fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, ev.pageY - ev.data.pos.top))) / 150, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(150, ev.pageX - ev.data.pos.left)) / 150, 10)).get(0), [ev.data.preview]);
			return false;
		},
		    upSelector = function upSelector(ev) {
			fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
			fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
			$(document).unbind('mouseup', upSelector);
			$(document).unbind('mousemove', moveSelector);
			return false;
		},
		    enterSubmit = function enterSubmit(ev) {
			$(this).addClass('colorpicker_focus');
		},
		    leaveSubmit = function leaveSubmit(ev) {
			$(this).removeClass('colorpicker_focus');
		},
		    clickSubmit = function clickSubmit(ev) {
			var cal = $(this).parent();
			var col = cal.data('colorpicker').color;
			cal.data('colorpicker').origColor = col;
			setCurrentColor(col, cal.get(0));
			var cal2 = $('#' + $(this).data('colorpickerId'));
			cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal);
		},
		    clickNone = function clickNone(ev) {
			var cal = $(this).parent();
			cal.data('colorpicker').onNone(cal);
			cal.hide();
		},
		    show = function show(ev) {
			var cal = $('#' + $(this).data('colorpickerId'));
			cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
			var pos = $(this).offset();
			var viewPort = getViewport();
			var top = pos.top + this.offsetHeight;
			var left = pos.left;
			if (top + 176 > viewPort.t + viewPort.h) {
				top -= this.offsetHeight + 176;
			}
			if (left + 356 > viewPort.l + viewPort.w) {
				left -= 356;
			}
			cal.css({ left: left + 'px', top: top + 'px' });
			if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
				cal.show();
			}
			$(document).bind('mousedown', { cal: cal }, hide);
			return false;
		},
		    hide = function hide(ev) {
			if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
				if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
					ev.data.cal.hide();
				}
				$(document).unbind('mousedown', hide);
			}
		},
		    isChildOf = function isChildOf(parentEl, el, container) {
			if (parentEl == el) {
				return true;
			}
			if (parentEl.contains) {
				return parentEl.contains(el);
			}
			if (parentEl.compareDocumentPosition) {
				return !!(parentEl.compareDocumentPosition(el) & 16);
			}
			var prEl = el.parentNode;
			while (prEl && prEl != container) {
				if (prEl == parentEl) return true;
				prEl = prEl.parentNode;
			}
			return false;
		},
		    getViewport = function getViewport() {
			var m = document.compatMode == 'CSS1Compat';
			return {
				l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
				t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
				w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
				h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
			};
		},
		    fixHSB = function fixHSB(hsb) {
			return {
				h: Math.min(360, Math.max(0, hsb.h)),
				s: Math.min(100, Math.max(0, hsb.s)),
				b: Math.min(100, Math.max(0, hsb.b))
			};
		},
		    fixRGB = function fixRGB(rgb) {
			return {
				r: Math.min(255, Math.max(0, rgb.r)),
				g: Math.min(255, Math.max(0, rgb.g)),
				b: Math.min(255, Math.max(0, rgb.b))
			};
		},
		    fixHex = function fixHex(hex) {
			var len = 6 - hex.length;
			if (len > 0) {
				var o = [];
				for (var i = 0; i < len; i++) {
					o.push('0');
				}
				o.push(hex);
				hex = o.join('');
			}
			return hex;
		},
		    HexToRGB = function HexToRGB(hex) {
			var hex = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);
			return { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: hex & 0x0000FF };
		},
		    HexToHSB = function HexToHSB(hex) {
			return RGBToHSB(HexToRGB(hex));
		},
		    RGBToHSB = function RGBToHSB(rgb) {
			var hsb = {};
			hsb.b = Math.max(Math.max(rgb.r, rgb.g), rgb.b);
			hsb.s = hsb.b <= 0 ? 0 : Math.round(100 * (hsb.b - Math.min(Math.min(rgb.r, rgb.g), rgb.b)) / hsb.b);
			hsb.b = Math.round(hsb.b / 255 * 100);
			if (rgb.r == rgb.g && rgb.g == rgb.b) hsb.h = 0;else if (rgb.r >= rgb.g && rgb.g >= rgb.b) hsb.h = 60 * (rgb.g - rgb.b) / (rgb.r - rgb.b);else if (rgb.g >= rgb.r && rgb.r >= rgb.b) hsb.h = 60 + 60 * (rgb.g - rgb.r) / (rgb.g - rgb.b);else if (rgb.g >= rgb.b && rgb.b >= rgb.r) hsb.h = 120 + 60 * (rgb.b - rgb.r) / (rgb.g - rgb.r);else if (rgb.b >= rgb.g && rgb.g >= rgb.r) hsb.h = 180 + 60 * (rgb.b - rgb.g) / (rgb.b - rgb.r);else if (rgb.b >= rgb.r && rgb.r >= rgb.g) hsb.h = 240 + 60 * (rgb.r - rgb.g) / (rgb.b - rgb.g);else if (rgb.r >= rgb.b && rgb.b >= rgb.g) hsb.h = 300 + 60 * (rgb.r - rgb.b) / (rgb.r - rgb.g);else hsb.h = 0;
			hsb.h = Math.round(hsb.h);
			return hsb;
		},
		    HSBToRGB = function HSBToRGB(hsb) {
			var rgb = {};
			var h = Math.round(hsb.h);
			var s = Math.round(hsb.s * 255 / 100);
			var v = Math.round(hsb.b * 255 / 100);
			if (s == 0) {
				rgb.r = rgb.g = rgb.b = v;
			} else {
				var t1 = v;
				var t2 = (255 - s) * v / 255;
				var t3 = (t1 - t2) * (h % 60) / 60;
				if (h == 360) h = 0;
				if (h < 60) {
					rgb.r = t1;rgb.b = t2;rgb.g = t2 + t3;
				} else if (h < 120) {
					rgb.g = t1;rgb.b = t2;rgb.r = t1 - t3;
				} else if (h < 180) {
					rgb.g = t1;rgb.r = t2;rgb.b = t2 + t3;
				} else if (h < 240) {
					rgb.b = t1;rgb.r = t2;rgb.g = t1 - t3;
				} else if (h < 300) {
					rgb.b = t1;rgb.g = t2;rgb.r = t2 + t3;
				} else if (h < 360) {
					rgb.r = t1;rgb.g = t2;rgb.b = t1 - t3;
				} else {
					rgb.r = 0;rgb.g = 0;rgb.b = 0;
				}
			}
			return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b) };
		},
		    RGBToHex = function RGBToHex(rgb) {
			var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];
			$.each(hex, function (nr, val) {
				if (val.length == 1) {
					hex[nr] = '0' + val;
				}
			});
			return hex.join('');
		},
		    HSBToHex = function HSBToHex(hsb) {
			return RGBToHex(HSBToRGB(hsb));
		};
		return {
			init: function init(options) {
				options = $.extend({}, defaults, options || {});
				if (typeof options.color == 'string') {
					options.color = HexToHSB(options.color);
				} else if (options.color.r != undefined && options.color.g != undefined && options.color.b != undefined) {
					options.color = RGBToHSB(options.color);
				} else if (options.color.h != undefined && options.color.s != undefined && options.color.b != undefined) {
					options.color = fixHSB(options.color);
				} else {
					return this;
				}
				options.origColor = options.color;
				return this.each(function () {
					if (!$(this).data('colorpickerId')) {
						var id = 'collorpicker_' + parseInt(Math.random() * 1000);

						//alert(id);

						$(this).data('colorpickerId', id);
						var cal = $(tpl).attr('id', id);

						if (options.flat) {
							cal.appendTo(this).show();
						} else {
							cal.appendTo(document.body);
						}
						options.fields = cal.find('input').bind('keydown', keyDown).bind('change', change).bind('blur', blur).bind('focus', focus);
						cal.find('span').bind('mousedown', downIncrement);
						options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
						options.selectorIndic = options.selector.find('div div');
						options.hue = cal.find('div.colorpicker_hue div');
						cal.find('div.colorpicker_hue').bind('mousedown', downHue);
						options.newColor = cal.find('div.colorpicker_new_color');
						options.currentColor = cal.find('div.colorpicker_current_color');
						cal.data('colorpicker', options);

						/*
      var noneBTN = cal.find('input.colorpicker_none');
      noneBTN.get(0).cal=cal.get(0);
      noneBTN.click( function(){ 
      		
      		cal.hide();
      	}); 
      */
						cal.find('input.colorpicker_none').bind('click', clickNone);
						cal.find('input.colorpicker_submit').bind('click', clickSubmit);
						/*
      .bind('mouseenter', enterSubmit)
      .bind('mouseleave', leaveSubmit)
      */

						fillRGBFields(options.color, cal.get(0));
						fillHSBFields(options.color, cal.get(0));
						fillHexFields(options.color, cal.get(0));
						setHue(options.color, cal.get(0));
						setSelector(options.color, cal.get(0));
						setCurrentColor(options.color, cal.get(0));
						setNewColor(options.color, cal.get(0));
						if (options.flat) {
							cal.css({
								position: 'relative',
								display: 'block'
							});
						} else {
							$(this).bind(options.eventName, show);
						}
					}
				});
			},
			showPicker: function showPicker() {
				return this.each(function () {
					if ($(this).data('colorpickerId')) {
						show.apply(this);
					}
				});
			},
			hidePicker: function hidePicker() {
				return this.each(function () {
					if ($(this).data('colorpickerId')) {
						$('#' + $(this).data('colorpickerId')).hide();
					}
				});
			},
			setColor: function setColor(col) {
				if (typeof col == 'string') {
					col = HexToHSB(col);
				} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
					col = RGBToHSB(col);
				} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
					col = fixHSB(col);
				} else {
					return this;
				}
				return this.each(function () {
					if ($(this).data('colorpickerId')) {
						var cal = $('#' + $(this).data('colorpickerId'));
						cal.data('colorpicker').color = col;
						cal.data('colorpicker').origColor = col;
						fillRGBFields(col, cal.get(0));
						fillHSBFields(col, cal.get(0));
						fillHexFields(col, cal.get(0));
						setHue(col, cal.get(0));
						setSelector(col, cal.get(0));
						setCurrentColor(col, cal.get(0));
						setNewColor(col, cal.get(0));
					}
				});
			}
		};
	}();
	$.fn.extend({
		ColorPicker: ColorPicker.init,
		ColorPickerHide: ColorPicker.hide,
		ColorPickerShow: ColorPicker.show,
		ColorPickerSetColor: ColorPicker.setColor
	});
})(jQuery);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Cookie plugin
 *
 * Copyright (c) 2006 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

/**
 * Create a cookie with the given name and value and other optional parameters.
 *
 * @example $.cookie('the_cookie', 'the_value');
 * @desc Set the value of a cookie.
 * @example $.cookie('the_cookie', 'the_value', { expires: 7, path: '/', domain: 'jquery.com', secure: true });
 * @desc Create a cookie with all available options.
 * @example $.cookie('the_cookie', 'the_value');
 * @desc Create a session cookie.
 * @example $.cookie('the_cookie', null);
 * @desc Delete a cookie by passing null as value. Keep in mind that you have to use the same path and domain
 *       used when the cookie was set.
 *
 * @param String name The name of the cookie.
 * @param String value The value of the cookie.
 * @param Object options An object literal containing key/value pairs to provide optional cookie attributes.
 * @option Number|Date expires Either an integer specifying the expiration date from now on in days or a Date object.
 *                             If a negative value is specified (e.g. a date in the past), the cookie will be deleted.
 *                             If set to null or omitted, the cookie will be a session cookie and will not be retained
 *                             when the the browser exits.
 * @option String path The value of the path atribute of the cookie (default: path of page that created the cookie).
 * @option String domain The value of the domain attribute of the cookie (default: domain of page that created the cookie).
 * @option Boolean secure If true, the secure attribute of the cookie will be set and the cookie transmission will
 *                        require a secure protocol (like HTTPS).
 * @type undefined
 *
 * @name $.cookie
 * @cat Plugins/Cookie
 * @author Klaus Hartl/klaus.hartl@stilbuero.de
 */

/**
 * Get the value of a cookie with the given name.
 *
 * @example $.cookie('the_cookie');
 * @desc Get the value of a cookie.
 *
 * @param String name The name of the cookie.
 * @return The value of the cookie.
 * @type String
 *
 * @name $.cookie
 * @cat Plugins/Cookie
 * @author Klaus Hartl/klaus.hartl@stilbuero.de
 */
jQuery.cookie = function (name, value, options) {
    if (typeof value != 'undefined') {
        // name and value given, set cookie
        options = options || {};
        if (value === null) {
            value = '';
            options = $.extend({}, options); // clone object since it's unexpected behavior if the expired property were changed
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + options.expires * 24 * 60 * 60 * 1000);
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE
        }
        // NOTE Needed to parenthesize options.path and options.domain
        // in the following expressions, otherwise they evaluate to undefined
        // in the packed version for some reason...
        var path = options.path ? '; path=' + options.path : '';
        var domain = options.domain ? '; domain=' + options.domain : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else {
        // only name given, get cookie
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == name + '=') {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
* 
* hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
* 
* hoverIntent is currently available for use in all personal or commercial 
* projects under both MIT and GPL licenses. This means that you can choose 
* the license that best suits your project, and use it accordingly.
* 
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
* 
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*	sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*	interval: 100,   // number = milliseconds of polling interval
*	over: showNav,  // function = onMouseOver callback (required)
*	timeout: 0,   // number = milliseconds delay before onMouseOut function call
*	out: hideNav    // function = onMouseOut callback (required)
* });
* 
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne brian(at)cherne(dot)net
*/
(function ($) {
	$.fn.hoverIntent = function (f, g) {
		// default configuration options
		var cfg = {
			sensitivity: 7,
			interval: 100,
			timeout: 0
		};
		// override configuration options with user supplied object
		cfg = $.extend(cfg, g ? { over: f, out: g } : f);

		// instantiate variables
		// cX, cY = current X and Y position of mouse, updated by mousemove event
		// pX, pY = previous X and Y position of mouse, set by mouseover and polling interval
		var cX, cY, pX, pY;

		// A private function for getting mouse position
		var track = function track(ev) {
			cX = ev.pageX;
			cY = ev.pageY;
		};

		// A private function for comparing current and previous mouse position
		var compare = function compare(ev, ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			// compare mouse positions to see if they've crossed the threshold
			if (Math.abs(pX - cX) + Math.abs(pY - cY) < cfg.sensitivity) {
				$(ob).unbind("mousemove", track);
				// set hoverIntent state to true (so mouseOut can be called)
				ob.hoverIntent_s = 1;
				return cfg.over.apply(ob, [ev]);
			} else {
				// set previous coordinates for next time
				pX = cX;pY = cY;
				// use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
				ob.hoverIntent_t = setTimeout(function () {
					compare(ev, ob);
				}, cfg.interval);
			}
		};

		// A private function for delaying the mouseOut function
		var delay = function delay(ev, ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			ob.hoverIntent_s = 0;
			return cfg.out.apply(ob, [ev]);
		};

		// A private function for handling mouse 'hovering'
		var handleHover = function handleHover(e) {
			// copy objects to be passed into t (required for event object to be passed in IE)
			var ev = jQuery.extend({}, e);
			var ob = this;

			// cancel hoverIntent timer if it exists
			if (ob.hoverIntent_t) {
				ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			}

			// if e.type == "mouseenter"
			if (e.type == "mouseenter") {
				// set "previous" X and Y position based on initial entry point
				pX = ev.pageX;pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$(ob).bind("mousemove", track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				if (ob.hoverIntent_s != 1) {
					ob.hoverIntent_t = setTimeout(function () {
						compare(ev, ob);
					}, cfg.interval);
				}

				// else e.type == "mouseleave"
			} else {
				// unbind expensive mousemove event
				$(ob).unbind("mousemove", track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				if (ob.hoverIntent_s == 1) {
					ob.hoverIntent_t = setTimeout(function () {
						delay(ev, ob);
					}, cfg.timeout);
				}
			}
		};

		// bind the function to the two event listeners
		return this.bind('mouseenter', handleHover).bind('mouseleave', handleHover);
	};
})(jQuery);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * Much thanks to http://static.railstips.org/orderedlist
 */

(function ($) {
	var self = null;
	var lutype = 'blocktypes';
	var searchValue = null;

	$.fn.liveUpdate = function (list, type) {
		return this.each(function () {
			new $.liveUpdate(this, list, type);
		});
	};

	$.liveUpdate = function (e, list, type) {
		this.field = $(e);
		$(e).data('liveUpdate', this);
		this.list = $('#' + list);
		this.lutype = 'blocktypes';

		if (typeof type != 'undefined') {
			this.lutype = type;
		}

		if (this.list.length > 0) {
			this.init();
		}
	};

	$.liveUpdate.prototype = {
		init: function init() {
			var self = this;
			this.setupCache();
			this.field.parents('form').submit(function () {
				return false;
			});
			this.field.keyup(function () {
				self.filter();
			});
			self.filter();
		},

		filter: function filter() {
			if (this.field.val() != searchValue) {
				if ($.trim(this.field.val()) == '') {
					if (this.lutype == 'blocktypes') {
						this.list.children('li').addClass('ccm-block-type-available');
						this.list.children('li').removeClass('ccm-block-type-selected');
					} else if (this.lutype == 'attributes') {
						this.list.children('li').addClass('ccm-attribute-available');
						this.list.children('li').removeClass('ccm-attribute-selected');
					} else if (this.lutype == 'stacks') {
						this.list.children('li').addClass('ccm-stack-available');
						this.list.children('li').removeClass('ccm-stack-selected');
					} else if (this.lutype == 'intelligent-search') {
						if (this.list.is(':visible')) {
							this.list.hide();
						}
					} else {
						this.list.children('li').show();
					}
					return;
				}
				if (this.lutype != 'intelligent-search' || this.field.val().length > 2) {
					this.displayResults(this.getScores(this.field.val().toLowerCase()));
				} else if (this.lutype == 'intelligent-search') {
					if (this.list.is(':visible')) {
						this.list.hide();
					}
				}
			}
			searchValue = this.field.val();
			if (searchValue == '' && this.lutype == 'intelligent-search') {
				if (this.list.is(':visible')) {
					this.list.hide();
				}
			}
		},

		setupCache: function setupCache() {
			var self = this;
			this.cache = [];
			this.rows = [];
			var lutype = this.lutype;
			this.list.find('li').each(function () {
				if (lutype == 'blocktypes') {
					self.cache.push($(this).find('a.ccm-block-type-inner').html().toLowerCase());
				} else if (lutype == 'attributes') {
					var val = $(this).find('a,span').html().toLowerCase();
					self.cache.push(val);
				} else if (lutype == 'stacks') {
					var val = $(this).find('a,span').html().toLowerCase();
					self.cache.push(val);
				} else if (lutype == 'fileset') {
					self.cache.push($(this).find('label').html().toLowerCase());
				} else if (lutype == 'intelligent-search') {
					var s = $(this).find('span').html();
					if (s) {
						self.cache.push(s.toLowerCase());
					}
				}
				self.rows.push($(this));
			});
			this.cache_length = this.cache.length;
		},

		displayResults: function displayResults(scores) {
			var self = this;
			if (this.lutype == 'blocktypes') {
				this.list.children('li').removeClass('ccm-block-type-available');
				this.list.children('li').removeClass('ccm-block-type-selected');
				$.each(scores, function (i, score) {
					self.rows[score[1]].addClass('ccm-block-type-available');
				});
				$(this.list.find('li.ccm-block-type-available')[0]).addClass('ccm-block-type-selected');
			} else if (this.lutype == 'attributes') {
				this.list.children('li').removeClass('ccm-attribute-available');
				this.list.children('li').removeClass('ccm-attribute-selected');
				this.list.children('li').removeClass('ccm-item-selected');
				$.each(scores, function (i, score) {
					self.rows[score[1]].addClass('ccm-attribute-available');
				});
				this.list.children('li.item-select-list-header').removeClass("ccm-attribute-available");
				$(this.list.find('li.ccm-attribute-available')[0]).addClass('ccm-item-selected');
			} else if (this.lutype == 'stacks') {
				this.list.children('li').removeClass('ccm-stack-available');
				this.list.children('li').removeClass('ccm-stack-selected');
				this.list.children('li').removeClass('ccm-item-selected');
				$.each(scores, function (i, score) {
					self.rows[score[1]].addClass('ccm-stack-available');
				});
				this.list.children('li.item-select-list-header').removeClass("ccm-stack-available");
				$(this.list.find('li.ccm-stack-available')[0]).addClass('ccm-item-selected');
			} else if (this.lutype == 'intelligent-search') {
				if (!this.list.is(':visible')) {
					this.list.fadeIn(160, 'easeOutExpo');
				}
				this.list.find('.ccm-intelligent-search-results-module-onsite').hide();
				this.list.find('li').hide();
				var shown = 0;
				$.each(scores, function (i, score) {
					$li = self.rows[score[1]];
					if (score[0] > 0.75) {
						shown++;
						if (!$li.parent().parent().is(':visible')) {
							$li.parent().parent().show();
						}
						$li.show();
					}
				});
				this.list.find('li a').removeClass('ccm-intelligent-search-result-selected');
				this.list.find('li:visible a:first').addClass('ccm-intelligent-search-result-selected');
			} else {
				this.list.children('li').hide();
				$.each(scores, function (i, score) {
					self.rows[score[1]].show();
				});
			}
		},

		getScores: function getScores(term) {
			var scores = [];
			for (var i = 0; i < this.cache_length; i++) {
				var score = this.cache[i].score(term);
				if (score > 0) {
					scores.push([score, i]);
				}
			}
			return scores.sort(function (a, b) {
				return b[0] - a[0];
			});
		}
	};
})(jQuery);

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Metadata - jQuery plugin for parsing metadata from elements
 *
 * Copyright (c) 2006 John Resig, Yehuda Katz, Jˆrn Zaefferer, Paul McLanahan
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id$
 *
 */

/**
 * Sets the type of metadata to use. Metadata is encoded in JSON, and each property
 * in the JSON will become a property of the element itself.
 *
 * There are three supported types of metadata storage:
 *
 *   attr:  Inside an attribute. The name parameter indicates *which* attribute.
 *          
 *   class: Inside the class attribute, wrapped in curly braces: { }
 *   
 *   elem:  Inside a child element (e.g. a script tag). The
 *          name parameter indicates *which* element.
 *          
 * The metadata for an element is loaded the first time the element is accessed via jQuery.
 *
 * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements
 * matched by expr, then redefine the metadata type and run another $(expr) for other elements.
 * 
 * @name $.metadata.setType
 *
 * @example <p id="one" class="some_class {item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("class")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from the class attribute
 * 
 * @example <p id="one" class="some_class" data="{item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("attr", "data")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a "data" attribute
 * 
 * @example <p id="one" class="some_class"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>
 * @before $.metadata.setType("elem", "script")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a nested script element
 * 
 * @param String type The encoding type
 * @param String name The name of the attribute to be used to get metadata (optional)
 * @cat Plugins/Metadata
 * @descr Sets the type of encoding to be used when loading metadata for the first time
 * @type undefined
 * @see metadata()
 */

(function ($) {

  $.extend({
    metadata: {
      defaults: {
        type: 'class',
        name: 'metadata',
        cre: /({.*})/,
        single: 'metadata'
      },
      setType: function setType(type, name) {
        this.defaults.type = type;
        this.defaults.name = name;
      },
      get: function get(elem, opts) {
        var settings = $.extend({}, this.defaults, opts);
        // check for empty string in single property
        if (!settings.single.length) settings.single = 'metadata';

        var data = $.data(elem, settings.single);
        // returned cached data if it already exists
        if (data) return data;

        data = "{}";

        if (settings.type == "class") {
          var m = settings.cre.exec(elem.className);
          if (m) data = m[1];
        } else if (settings.type == "elem") {
          if (!elem.getElementsByTagName) return;
          var e = elem.getElementsByTagName(settings.name);
          if (e.length) data = $.trim(e[0].innerHTML);
        } else if (elem.getAttribute != undefined) {
          var attr = elem.getAttribute(settings.name);
          if (attr) data = attr;
        }

        if (data.indexOf('{') < 0) data = "{" + data + "}";

        data = eval("(" + data + ")");

        $.data(elem, settings.single, data);
        return data;
      }
    }
  });

  /**
   * Returns the metadata object for the first member of the jQuery object.
   *
   * @name metadata
   * @descr Returns element's metadata object
   * @param Object opts An object contianing settings to override the defaults
   * @type jQuery
   * @cat Plugins/Metadata
   */
  $.fn.metadata = function (opts) {
    return $.metadata.get(this[0], opts);
  };
})(jQuery);

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// use as an object: 
// var myLayout = new ccmLayout();

function ccmLayout(areaNameNumber, cvalID, layout_id, area, locked) {

	this.layout_id = layout_id;
	this.cvalID = cvalID;
	this.locked = locked;
	this.area = area;
	this.areaNameNumber = areaNameNumber;

	this.init = function () {

		//ccmAlert.hud( 'test3', 2000, 'add', 'test2');

		var layoutObj = this;
		this.layoutWrapper = $('#ccm-layout-wrapper-' + this.cvalID);
		this.ccmControls = this.layoutWrapper.find("#ccm-layout-controls-" + this.cvalID);
		this.ccmControls.get(0).layoutObj = this;
		/*
  this.layoutWrapper.mouseover(function(){
  	layoutObj.ccmControls.show(200);
  })
  
  this.ccmControls.mouseout(function(){
  	layoutObj.ccmControls.hide(200).delay(5000);
  });
  */

		this.ccmControls.mouseover(function () {
			layoutObj.dontUpdateTwins = 0;layoutObj.highlightAreas(1);
		});

		this.ccmControls.mouseout(function () {
			if (!layoutObj.moving) layoutObj.highlightAreas(0);
		});

		this.ccmControls.find('.ccm-layout-menu-button').click(function (e) {
			layoutObj.optionsMenu(e);
		});

		this.gridSizing();
	};

	this.highlightAreas = function (show) {
		var els = this.layoutWrapper.find('.ccm-add-block');
		if (show) els.addClass('ccm-layout-area-highlight');else els.removeClass('ccm-layout-area-highlight');
	};

	this.optionsMenu = function (e) {

		ccm_hideMenus();
		e.stopPropagation();
		ccm_menuActivated = true;

		// now, check to see if this menu has been made
		var aobj = document.getElementById("ccm-layout-options-menu-" + this.cvalID);

		if (!aobj) {
			// create the 1st instance of the menu
			el = document.createElement("DIV");
			el.id = "ccm-layout-options-menu-" + this.cvalID;
			el.className = "ccm-menu ccm-ui";
			el.style.display = "none";
			document.body.appendChild(el);

			aobj = $(el);
			aobj.css("position", "absolute");

			//contents  of menu
			var html = '<div class="popover"><div class="arrow"></div><div class="inner"><div class="content">';
			html += '<ul>';

			//the arHandle here should be encoded with encodeURIComponent(), but it leads to a double encoding issue in ccm.dialog.js 
			html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-edit-menu" dialog-title="' + ccmi18n.editAreaLayout + '" dialog-modal="false" dialog-width="550" dialog-height="280" dialog-append-buttons="true" id="menuEditLayout' + this.cvalID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + this.layout_id + '&cvalID=' + this.cvalID + '&atask=layout">' + ccmi18n.editAreaLayout + '</a></li>';

			html += '<li><a onclick="ccm_hideMenus()" href="javascript:void(0)" class="ccm-menu-icon ccm-icon-move-up" id="menuAreaLayoutMoveUp' + this.cvalID + '">' + ccmi18n.moveLayoutUp + '</a></li>';

			html += '<li><a onclick="ccm_hideMenus()" href="javascript:void(0)" class="ccm-menu-icon ccm-icon-move-down" id="menuAreaLayoutMoveDown' + this.cvalID + '">' + ccmi18n.moveLayoutDown + '</a></li>';

			var lockText = this.locked ? ccmi18n.unlockAreaLayout : ccmi18n.lockAreaLayout;
			html += '<li><a onclick="ccm_hideMenus()" href="javascript:void(0)" class="ccm-menu-icon ccm-icon-lock-menu" id="menuAreaLayoutLock' + this.cvalID + '">' + lockText + '</a></li>';

			html += '<li><a onclick="ccm_hideMenus()" href="javascript:void(0)" class="ccm-menu-icon ccm-icon-delete-menu" dialog-append-buttons="true" id="menuAreaLayoutDelete' + this.cvalID + '">' + ccmi18n.deleteLayout + '</a></li>';

			html += '</ul>';
			html += '</div></div></div>';
			aobj.append(html);

			var aJQobj = $(aobj);
			var layoutObj = this;

			aJQobj.find('#menuEditLayout' + this.cvalID).dialog();

			aJQobj.find('#menuAreaLayoutMoveUp' + this.cvalID).click(function () {
				layoutObj.moveLayout('up');
			});

			aJQobj.find('#menuAreaLayoutMoveDown' + this.cvalID).click(function () {
				layoutObj.moveLayout('down');
			});

			//lock click 
			aJQobj.find('#menuAreaLayoutLock' + this.cvalID).click(function () {
				layoutObj.lock();
			});

			//delete click
			aJQobj.find('#menuAreaLayoutDelete' + this.cvalID).click(function () {
				layoutObj.deleteLayoutOptions();
			});
		} else {
			aobj = $("#ccm-layout-options-menu-" + this.cvalID);
		}

		ccm_fadeInMenu(aobj, e);
	};

	this.moveLayout = function (direction) {

		this.moving = 1;
		ccm_hideHighlighter();
		//jQuery.fn.dialog.showLoader();
		this.highlightAreas(1);
		this.servicesAjax = $.ajax({
			url: CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + this.layout_id + '&cvalID=' + this.cvalID + '&task=move&direction=' + direction + '&areaNameNumber=' + this.areaNameNumber,
			success: function success(response) {
				eval('var jObj=' + response);
				if (parseInt(jObj.success) != 1) {
					alert(jObj.msg);
				} else {
					//success
					ccm_mainNavDisableDirectExit();
					//location.reload();
				}
			}
		});

		var el = $('#ccm-layout-wrapper-' + this.cvalID);
		var layoutObj = this;
		if (direction == 'down') {
			var nextLayout = el.next();
			if (nextLayout.hasClass('ccm-layout-wrapper')) {
				el.slideUp(600, function () {
					el.insertAfter(nextLayout);
					el.slideDown(600, function () {
						layoutObj.highlightAreas(0);layoutObj.moving = 0;
					});
				});
				return;
			}
			//at boundry
			ccmAlert.hud(ccmi18n.moveLayoutAtBoundary, 4000, 'icon_move_down', ccmi18n.moveLayoutDown);
		} else if (direction == 'up') {
			var previousLayout = el.prev();
			if (previousLayout.hasClass('ccm-layout-wrapper')) {
				el.slideUp(600, function () {
					el.insertBefore(previousLayout);
					el.slideDown(600, function () {
						layoutObj.highlightAreas(0);layoutObj.moving = 0;
					});
				});
				return;
			}
			//at boundry
			ccmAlert.hud(ccmi18n.moveLayoutAtBoundary, 4000, 'icon_move_up', ccmi18n.moveLayoutUp);
		}
	};

	this.lock = function (lock, twinLock) {
		var a = $('#menuAreaLayoutLock' + this.cvalID);
		this.locked = !this.locked;
		if (this.locked) {
			a.html(ccmi18n.unlockAreaLayout);
			if (this.s) this.s.slider('disable');
		} else {
			a.find('span').html(ccmi18n.lockAreaLayout);
			if (this.s) this.s.slider('enable');
		}

		var lock = this.locked ? 1 : 0;
		if (!twinLock) {

			this.servicesAjax = $.ajax({
				url: CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + this.layout_id + '&task=lock&lock=' + lock,
				success: function success(response) {
					eval('var jObj=' + response);
					if (parseInt(jObj.success) != 1) {
						alert(jObj.msg);
					} else {
						//success
					}
				}
			});

			this.getTwins();
			for (var i = 0; i < this.layoutTwinObjs.length; i++) {
				this.layoutTwinObjs[i].lock(lock, 1);
			}
		}
	};

	this.hasBeenQuickSaved = 0;
	this.quickSaveLayoutId = 0;
	this.quickSave = function () {
		var breakPoints = this.ccmControls.find('#layout_col_break_points_' + this.cvalID).val().replace(/%/g, '');
		clearTimeout(this.secondSavePauseTmr);
		if (!this.hasBeenQuickSaved && this.quickSaveInProgress) {
			quickSaveLayoutObj = this;
			this.secondSavePauseTmr = setTimeout('quickSaveLayoutObj.quickSave()', 100);
			return;
		}
		this.quickSaveInProgress = 1;
		var layoutObj = this;
		var modifyLayoutId = this.quickSaveLayoutId ? this.quickSaveLayoutId : this.layout_id;
		this.quickSaveAjax = $.ajax({
			url: CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + modifyLayoutId + '&task=quicksave&breakpoints=' + encodeURIComponent(breakPoints),
			success: function success(response) {
				eval('var jObj=' + response);
				if (parseInt(jObj.success) != 1) {
					alert(jObj.msg);
				} else {
					//success
					layoutObj.hasBeenQuickSaved = 1;
					layoutObj.quickSaveInProgress = 0;
					if (jObj.layoutID) {
						layoutObj.quickSaveLayoutId = jObj.layoutID;
					}
					ccm_mainNavDisableDirectExit();
				}
			}
		});
	};

	this.deleteLayoutOptions = function () {
		var hasBlocks = 0;
		deleteLayoutObj = this;
		this.layoutWrapper.find('.ccm-block').each(function (i, el) {
			if (el.style.display != 'none') hasBlocks = 1;
		});
		var dialogHeight = hasBlocks ? '135px' : '70px';

		$.fn.dialog.open({
			title: ccmi18n.deleteLayoutOptsTitle,
			href: CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + this.layout_id + '&task=deleteOpts&hasBlocks=' + hasBlocks,
			width: '340px',
			modal: false,
			appendButtons: true,
			height: dialogHeight
		});
	};

	this.deleteLayout = function (deleteBlocks) {

		ccm_hideMenus();

		jQuery.fn.dialog.closeTop();

		this.layoutWrapper.slideUp(300);

		jQuery.fn.dialog.showLoader();

		var cvalID = this.cvalID;
		this.servicesAjax = $.ajax({
			url: CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(this.area) + '&layoutID=' + this.layout_id + '&task=delete&deleteBlocks=' + parseInt(deleteBlocks) + '&areaNameNumber=' + this.areaNameNumber,
			success: function success(response) {
				eval('var jObj=' + response);
				if (parseInt(jObj.success) != 1) {
					alert(jObj.msg);
					jQuery.fn.dialog.hideLoader();
				} else {
					//success
					$('#ccm-layout-wrapper-' + cvalID).remove();
					ccm_hideHighlighter();
					ccm_mainNavDisableDirectExit();

					if (jObj.refreshPage) window.location = window.location;else jQuery.fn.dialog.hideLoader();
				}
			}
		});
	};

	this.gridSizing = function () {
		this.ccmGrid = $("#ccm-layout-" + this.layout_id);

		//append layout id to start of all selectors
		var cols = parseInt(this.ccmControls.find('.layout_column_count').val());

		if (cols > 1) {
			var startPoints = this.ccmControls.find('#layout_col_break_points_' + this.cvalID).val().replace(/%/g, '').split('|');

			this.s = this.ccmControls.find(".ccm-layout-controls-slider");

			this.s.get(0).layoutObj = this;
			this.s.get(0).ccmGrid = this.ccmGrid;

			this.s.slider({
				step: 1,
				values: startPoints,
				change: function change() {
					if (this.layoutObj.dontUpdateTwins) return;
					this.layoutObj.resizeGrid(this.childNodes);
					var breakPoints = [];
					for (var z = 0; z < this.childNodes.length; z++) {
						breakPoints.push(parseFloat(this.childNodes[z].style.left.replace('%', '')));
					}breakPoints.sort(function (a, b) {
						return a - b;
					});

					this.layoutObj.ccmControls.find('.layout_col_break_points').val(breakPoints.join('%|') + '%');
					this.layoutObj.quickSave();
					ccm_arrangeMode = 0;
					this.layoutObj.moving = 0;
					this.layoutObj.highlightAreas(0);
				},
				slide: function slide() {
					ccm_arrangeMode = 1;
					this.layoutObj.moving = 1;
					if (this.layoutObj.dontUpdateTwins) return;
					this.layoutObj.resizeGrid(this.childNodes);
				}
			});

			if (parseInt(this.ccmControls.find('.layout_locked').val())) this.s.slider('disable');
		}
	};

	this.getTwins = function () {
		if (!this.layoutTwins) {
			this.layoutTwins = $('.ccm-layout-controls-layoutID-' + this.layout_id).not(this.ccmControls);
			this.layoutTwinObjs = [];
			for (var q = 0; q < this.layoutTwins.length; q++) {
				this.layoutTwinObjs.push(this.layoutTwins[q].layoutObj);
				this.layoutTwins[q].handles = $(this.layoutTwins[q]).find('.ui-slider-handle');
			}
		}
		return this.layoutTwins;
	};

	this.resizeGrid = function (childNodes) {

		var positions = [];

		this.getTwins();

		for (var y = 0; y < childNodes.length; y++) {
			var pos = parseFloat(childNodes[y].style.left.replace('%', ''));
			positions.push(pos);
			if (!this.dontUpdateTwins) for (var w = 0; w < this.layoutTwinObjs.length; w++) {
				this.layoutTwinObjs[w].dontUpdateTwins = 1;
				this.layoutTwinObjs[w].s.slider('values', y, pos);
			}
		}
		positions.sort(function (a, b) {
			return a - b;
		});

		var prevW = 0;
		var i;
		for (i = 0; i < positions.length; i++) {
			var pos = positions[i];
			var w = pos - prevW;
			prevW += w;
			$('.ccm-layout-' + this.layout_id + '-col-' + (i + 1)).css('width', w + '%');

			if (!this.dontUpdateTwins) for (j = 0; j < this.layoutTwins.length; j++) {
				this.layoutTwins[j].handles[i].style.left = pos + '%';
			}
		}
		$('.ccm-layout-' + this.layout_id + '-col-' + (i + 1)).css('width', 100 - prevW + '%');
	};
}

var quickSaveLayoutObj;
var deleteLayoutObj;

var ccmLayoutEdit = {

	init: function init() {

		this.showPresetDeleteIcon();

		//change preset selector
		$('#ccmLayoutPresentIdSelector').change(function () {
			//ccmLayoutEdit.showPresetDeleteIcon();

			var lpID = parseInt($(this).val());
			var layoutID = $('#ccmAreaLayoutForm_layoutID').val();

			jQuery.fn.dialog.showLoader();
			if (lpID > 0) {
				var action = $('#ccm-layout-refresh-action').val() + '&lpID=' + lpID;
			} else {
				var action = $('#ccm-layout-refresh-action').val() + '&layoutID=' + layoutID;
			}

			$.get(action, function (r) {
				$("#ccm-layout-edit-wrapper").html(r);
				jQuery.fn.dialog.hideLoader();
				ccmLayoutEdit.showPresetDeleteIcon();
			});
		});

		$('#layoutPresetActionNew input[name=layoutPresetAction]').click(function () {
			if ($(this).val() == 'create_new_preset' && $(this).prop('checked')) {
				$('input[name=layoutPresetName]').attr('disabled', false).focus();
			} else {
				$('input[name=layoutPresetName]').val('').attr('disabled', true);
			}
		});

		$('#layoutPresetActions input[name=layoutPresetAction]').click(function () {
			if ($(this).val() == 'create_new_preset' && $(this).prop('checked')) {
				$('input[name=layoutPresetNameAlt]').attr('disabled', false).focus();
			} else {
				$('input[name=layoutPresetNameAlt]').val('').attr('disabled', true);
			}
		});

		if ($("#layoutPresetActions").length > 0) {
			$("#ccmLayoutConfigOptions input, #ccmLayoutConfigOptions select").bind('change click', function () {
				//if( $('#ccmLayoutPresentIdSelector').val() > 0 ){ 
				$("#layoutPresetActions").show();
				$("#layoutPresetActionNew").hide();
				$("#ccmLayoutConfigOptions input, #ccmLayoutConfigOptions select").unbind('change click');
				//}
			});
		}
	},

	showPresetDeleteIcon: function showPresetDeleteIcon() {
		if ($('#ccmLayoutPresentIdSelector').val() > 0) {
			$("#ccm-layout-delete-preset").show();
		} else {
			$("#ccm-layout-delete-preset").hide();
		}
	},

	deletePreset: function deletePreset() {
		var lpID = parseInt($('#ccmLayoutPresentIdSelector').val());
		if (lpID > 0) {
			if (!confirm(ccmi18n.confirmLayoutPresetDelete)) return false;

			jQuery.fn.dialog.showLoader();
			var area = $('#ccmAreaLayoutForm_arHandle').val();
			var url = CCM_TOOLS_PATH + '/layout_services/?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(area) + '&task=deletePreset&lpID=' + lpID;
			$.get(url, function (r) {
				eval('var jObj=' + r);
				if (parseInt(jObj.success) != 1) {
					alert(jObj.msg);
				} else {
					//success 
					$("#ccmLayoutPresentIdSelector option[value='" + lpID + "']").remove();
				}
				jQuery.fn.dialog.hideLoader();
			});
		}
	}
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


$.widget.bridge("jqdialog", $.ui.dialog);

// wrap our old dialog function in the new dialog() function.
jQuery.fn.dialog = function () {
	// Pass this over to jQuery UI Dialog in a few circumstances
	if (arguments.length > 0) {
		$(this).jqdialog(arguments[0], arguments[1], arguments[2]);
		return;
	} else if ($(this).is('div')) {
		$(this).jqdialog();
		return;
	}
	// LEGACY SUPPORT
	return $(this).each(function () {
		$(this).unbind('click.make-dialog').bind('click.make-dialog', function (e) {
			var href = $(this).attr('href');
			var width = $(this).attr('dialog-width');
			var height = $(this).attr('dialog-height');
			var title = $(this).attr('dialog-title');
			var onOpen = $(this).attr('dialog-on-open');
			var onDestroy = $(this).attr('dialog-on-destroy');
			/*
    * no longer necessary. we auto detect
   	var appendButtons = $(this).attr('dialog-append-buttons');
   */
			var onClose = $(this).attr('dialog-on-close');
			obj = {
				modal: true,
				href: href,
				width: width,
				height: height,
				title: title,
				onOpen: onOpen,
				onDestroy: onDestroy,
				onClose: onClose
			};
			jQuery.fn.dialog.open(obj);
			return false;
		});
	});
};

jQuery.fn.dialog.close = function (num) {
	num++;
	$("#ccm-dialog-content" + num).jqdialog('close');
};

jQuery.fn.dialog.open = function (obj) {
	jQuery.fn.dialog.showLoader();
	if (ccm_uiLoaded) {
		ccm_hideMenus();
	}
	var nd = $(".ui-dialog").length;
	nd++;
	$('body').append('<div id="ccm-dialog-content' + nd + '" style="display: none"></div>');

	if (typeof obj.width == 'string') {
		if (obj.width.indexOf('%', 0) > 0) {
			w = obj.width.replace('%', '');
			w = $(window).width() * (w / 100);
			w = w + 50;
		} else {
			w = parseInt(obj.width) + 50;
		}

		if (obj.height.indexOf('%', 0) > 0) {
			h = obj.height.replace('%', '');
			h = $(window).height() * (h / 100);
			h = h + 100;
		} else {
			h = parseInt(obj.height) + 100;
		}
	} else if (obj.width) {
		w = parseInt(obj.width) + 50;
		h = parseInt(obj.height) + 100;
	} else {
		w = 550;
		h = 400;
	}
	if (h > $(window).height()) {
		h = $(window).height();
	}
	$("#ccm-dialog-content" + nd).jqdialog({
		'modal': true,
		'height': h,
		'width': w,
		show: {
			effect: "fade",
			duration: 150,
			easing: "easeInExpo"
		},
		'escapeClose': true,
		'title': obj.title,
		/*
  // no hide because it causes problems when closing and opening in rapid succession
  hide: {
  	effect: 'fade',
  	duration: 75,
  	easing: 'easeOutExpo'
  },*/

		'open': function open() {
			var nd = $(".ui-dialog").length;
			if (nd == 1) {
				$("body").attr('data-last-overflow', $('body').css('overflow'));
				$("body").css("overflow", "hidden");
			}
		},
		'beforeClose': function beforeClose() {
			var nd = $(".ui-dialog").length;
			if (nd == 1) {
				$("body").css("overflow", $('body').attr('data-last-overflow'));
			}
		},
		'close': function close(ev, u) {
			$(this).jqdialog('destroy').remove();
			$("#ccm-dialog-content" + nd).remove();
			if (typeof obj.onClose != "undefined") {
				if (typeof obj.onClose == 'function') {
					obj.onClose();
				} else {
					eval(obj.onClose);
				}
			}
			if (typeof obj.onDestroy != "undefined") {
				if (typeof obj.onDestroy == 'function') {
					obj.onDestroy();
				} else {
					eval(obj.onDestroy);
				}
			}
			nd--;
		}
	});

	if (!obj.element) {
		$.ajax({
			type: 'GET',
			url: obj.href,
			success: function success(r) {
				jQuery.fn.dialog.hideLoader();
				jQuery.fn.dialog.replaceTop(r);

				if (typeof obj.onOpen != "undefined") {
					if (typeof obj.onOpen == 'function') {
						obj.onOpen();
					} else {
						eval(obj.onOpen);
					}
				}
			}
		});
	} else {
		jQuery.fn.dialog.hideLoader();
		jQuery.fn.dialog.replaceTop($(obj.element));
		if (typeof obj.onOpen != "undefined") {
			if (typeof obj.onOpen == 'function') {
				obj.onOpen();
			} else {
				eval(obj.onOpen);
			}
		}
	}
};

jQuery.fn.dialog.replaceTop = function (r) {
	var nd = $(".ui-dialog").length;
	if (typeof r == 'string') {
		$("#ccm-dialog-content" + nd).html(r);
	} else {
		var r2 = r.clone(true, true).appendTo('#ccm-dialog-content' + nd);
		if (r2.css('display') == 'none') {
			r2.show();
		}
	}

	$("#ccm-dialog-content" + nd + " .dialog-launch").dialog();
	$("#ccm-dialog-content" + nd + " .ccm-dialog-close").click(function (event) {
		event.preventDefault();
		jQuery.fn.dialog.closeTop();
	});
	if ($("#ccm-dialog-content" + nd + " .dialog-buttons").length > 0) {
		$("#ccm-dialog-content" + nd).jqdialog('option', 'buttons', [{}]);
		$("#ccm-dialog-content" + nd).parent().find(".ui-dialog-buttonset").remove();
		$("#ccm-dialog-content" + nd).parent().find(".ui-dialog-buttonpane").html('');
		$("#ccm-dialog-content" + nd + " .dialog-buttons").appendTo($("#ccm-dialog-content" + nd).parent().find('.ui-dialog-buttonpane').addClass("ccm-ui"));
	}
	if ($("#ccm-dialog-content" + nd + " .dialog-help").length > 0) {
		$("#ccm-dialog-content" + nd + " .dialog-help").hide();
		var helpContent = $("#ccm-dialog-content" + nd + " .dialog-help").html();
		if (ccmi18n.helpPopup) {
			var helpText = ccmi18n.helpPopup;
		} else {
			var helpText = 'Help';
		}
		$("#ccm-dialog-content" + nd).parent().find('.ui-dialog-titlebar').append('<span class="ccm-dialog-help"><a href="javascript:void(0)" title="' + helpText + '" class="ccm-menu-help-trigger">Help</a></span>');
		var $ccmDialogHelp = $("#ccm-dialog-content" + nd).parent().find('.ui-dialog-titlebar .ccm-menu-help-trigger').popover({ content: function content() {
				return helpContent;
			}, placement: 'bottom', html: true, trigger: 'click' });
		if ($ccmDialogHelp.length) {
			$ccmDialogHelp.closest('.ui-dialog').on('dialogbeforeclose', function () {
				if (typeof $ccmDialogHelp.data('popover') != 'undefined') {
					$ccmDialogHelp.data('popover').hide();
				}
			});
		}
	}
};

jQuery.fn.dialog.showLoader = function (text) {
	if (typeof imgLoader == 'undefined' || !imgLoader || !imgLoader.src) return false;
	if ($('#ccm-dialog-loader').length < 1) {
		$("body").append("<div id='ccm-dialog-loader-wrapper' class='ccm-ui'><img id='ccm-dialog-loader' src='" + imgLoader.src + "' /></div>"); //add loader to the page
	}
	if (text != null) {
		$("<div />").attr('id', 'ccm-dialog-loader-text').html(text).prependTo($("#ccm-dialog-loader-wrapper"));
	}

	var w = $("#ccm-dialog-loader-wrapper").width();
	var h = $("#ccm-dialog-loader-wrapper").height();
	var tw = $(window).width();
	var th = $(window).height();
	var _left = (tw - w) / 2;
	var _top = (th - h) / 2;
	$("#ccm-dialog-loader-wrapper").css('left', _left + 'px').css('top', _top + 'px');
	$('#ccm-dialog-loader-wrapper').show(); //show loader
	//$('#ccm-dialog-loader-wrapper').fadeTo('slow', 0.2);
};

jQuery.fn.dialog.hideLoader = function () {
	$("#ccm-dialog-loader-wrapper").hide();
	$("#ccm-dialog-loader-text").remove();
};

jQuery.fn.dialog.closeTop = function () {
	var nd = $(".ui-dialog").length;
	$("#ccm-dialog-content" + nd).jqdialog('close');
};

jQuery.fn.dialog.closeAll = function () {
	$($(".ui-dialog-content").get().reverse()).jqdialog('close');
};

var imgLoader;
var ccm_dialogOpen = 0;
jQuery.fn.dialog.loaderImage = CCM_IMAGE_PATH + "/throbber_white_32.gif";

var ccmAlert = {
	notice: function notice(title, message, onCloseFn) {
		$.fn.dialog.open({
			href: CCM_TOOLS_PATH + '/alert',
			title: title,
			width: 320,
			height: 160,
			modal: false,
			onOpen: function onOpen() {
				$("#ccm-popup-alert-message").html(message);
			},
			onDestroy: onCloseFn
		});
	},

	hud: function hud(message, time, icon, title) {
		if ($('#ccm-notification-inner').length == 0) {
			$(document.body).append('<div id="ccm-notification" class="ccm-ui"><div id="ccm-notification-inner"></div></div>');
		}

		if (icon == null) {
			icon = 'edit_small';
		}

		if (title == null) {
			var messageText = message;
		} else {
			var messageText = '<h3>' + title + '</h3>' + message;
		}
		$('#ccm-notification-inner').html('<img id="ccm-notification-icon" src="' + CCM_IMAGE_PATH + '/icons/' + icon + '.png" width="16" height="16" /><div id="ccm-notification-message">' + messageText + '</div>');

		$('#ccm-notification').show();

		if (time > 0) {
			setTimeout(function () {
				$('#ccm-notification').fadeOut({ easing: 'easeOutExpo', duration: 300 });
			}, time);
		}
	}
};

$(document).ready(function () {
	imgLoader = new Image(); // preload image
	imgLoader.src = jQuery.fn.dialog.loaderImage;
});

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


ccm_closeNewsflow = function ccm_closeNewsflow(r) {
	$ovl = ccm_getNewsflowOverlayWindow();
	$ovl.fadeOut(300, 'easeOutExpo');
	$('.ui-widget-overlay').fadeOut(300, 'easeOutExpo', function () {
		$(this).remove();
	});
};

ccm_setNewsflowPagingArrowHeight = function ccm_setNewsflowPagingArrowHeight() {
	if ($("#ccm-marketplace-detail").length > 0) {
		var $ovl = $("#ccm-marketplace-detail");
	} else {
		var $ovl = $("#newsflow-main");
	}

	var h = $ovl.height();
	$(".newsflow-paging-previous a, .newsflow-paging-next a").css('height', h + 'px');
	$(".newsflow-paging-previous, .newsflow-paging-next").css('height', h + 'px');
	$(".newsflow-paging-next").show();
	$(".newsflow-paging-previous").show();
};

ccm_setNewsflowOverlayDimensions = function ccm_setNewsflowOverlayDimensions() {
	if ($("#newsflow-overlay").length > 0) {
		var w = $("#newsflow-overlay").width();
		var tw = $(window).width();
		var th = $(window).height();

		var optimalHeight = 650;
		var availableSpace = th - 80;

		// we use h strictly for the _top param below

		if (availableSpace > optimalHeight) {
			h = optimalHeight;
		} else {
			h = availableSpace;
		}
		$("#newsflow-overlay").css('height', optimalHeight);

		var _left = (tw - w) / 2;
		var _top = (th - h) / 2;
		_top = _top + 29; // handle the top toolbar
		_left = _left + "px";
		_top = _top + "px";
		$("#newsflow-overlay").css('left', _left).css('top', _top);
	}
};

ccm_getNewsflowOverlayWindow = function ccm_getNewsflowOverlayWindow() {
	if ($('#ccm-dashboard-content').length > 0 && $("#newsflow-main").length > 0 && $("#newsflow-overlay").length == 0) {
		var $ovl = $("#newsflow-main").parent();
	} else {
		// Ok. we're going to use #newsflow-overlay but we don't know if it's been added to the page yet
		if ($("#newsflow-overlay").length > 0) {
			var $ovl = $("#newsflow-overlay");
		} else {
			var $ovl = $('<div />').attr('id', 'newsflow-overlay').attr('class', 'ccm-ui').css('display', 'none').appendTo(document.body);
		}
	}
	return $ovl;
};
/** 
 * Newsflow
 */

ccm_showNewsflowOverlayWindow = function ccm_showNewsflowOverlayWindow(url, callback) {

	// if we're NOT showing newsflow on a dashboard page, we load an overlay
	if ($('#ccm-dashboard-content').length > 0 && $("#newsflow-main").length > 0) {} else {
		if ($('.ui-widget-overlay').length < 1) {
			var $overlay = $('<div class="ui-widget-overlay"></div>').hide().appendTo('body');
		}
		$('.ui-widget-overlay').show();
	}

	// Make the overlay resize when a browser window is resized
	$(window).resize(function () {
		ccm_setNewsflowOverlayDimensions();
	});

	// load the content into it.
	// we get the div we're loading content into
	// if we're in the dashboard, it's going to be newsflow-main
	$ovl = ccm_getNewsflowOverlayWindow();
	$ovl.load(url, function () {
		// if we're showing the overlay, we hide it
		$ovl.hide();

		// hide all the arrows too
		$(".newsflow-paging-next").hide();
		$(".newsflow-paging-previous").hide();

		$ovl.html($(this).html());

		if (callback) {
			callback();
		}

		ccm_setNewsflowOverlayDimensions();
		ccm_setupTrickleUpNewsflowStyles();

		$ovl.fadeIn('300', 'easeOutExpo', function () {
			ccm_setNewsflowPagingArrowHeight();
		});
	});
};

ccm_setupTrickleUpNewsflowStyles = function ccm_setupTrickleUpNewsflowStyles() {
	ovl = ccm_getNewsflowOverlayWindow();
	ovl.find('.newsflow-em1').each(function () {
		$(this).parent().addClass('newsflow-em1');
	});
};

ccm_showDashboardNewsflowWelcome = function ccm_showDashboardNewsflowWelcome() {
	jQuery.fn.dialog.showLoader(ccmi18n.newsflowLoading);
	ccm_showNewsflowOverlayWindow(CCM_DISPATCHER_FILENAME + '/dashboard/home?_ccm_dashboard_external=1', function () {
		jQuery.fn.dialog.hideLoader();
	});
};

ccm_showNewsflowOffsite = function ccm_showNewsflowOffsite(id) {
	jQuery.fn.dialog.showLoader();
	ccm_showNewsflowOverlayWindow(CCM_TOOLS_PATH + '/newsflow?cID=' + id, function () {
		jQuery.fn.dialog.hideLoader();
	});
};

ccm_showAppIntroduction = function ccm_showAppIntroduction() {
	ccm_showNewsflowOverlayWindow(CCM_DISPATCHER_FILENAME + '/dashboard/welcome?_ccm_dashboard_external=1');
};

ccm_getNewsflowByPath = function ccm_getNewsflowByPath(path) {
	jQuery.fn.dialog.showLoader();
	ccm_showNewsflowOverlayWindow(CCM_TOOLS_PATH + '/newsflow?cPath=' + path, function () {
		jQuery.fn.dialog.hideLoader();
	});
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * Page Reindexing
 */

ccm_doPageReindexing = function ccm_doPageReindexing() {
  $.get(CCM_TOOLS_PATH + '/reindex_pending_pages?ccm_token=' + CCM_SECURITY_TOKEN);
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// qs_score - Quicksilver Score
// 
// A port of the Quicksilver string ranking algorithm
// 
// "hello world".score("axl") //=> 0.0
// "hello world".score("ow") //=> 0.6
// "hello world".score("hello world") //=> 1.0
//
// Tested in Firefox 2 and Safari 3
//
// The Quicksilver code is available here
// http://code.google.com/p/blacktree-alchemy/
// http://blacktree-alchemy.googlecode.com/svn/trunk/Crucible/Code/NSString+BLTRRanking.m
//
// The MIT License
// 
// Copyright (c) 2008 Lachie Cox
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


String.prototype.score = function (abbreviation, offset) {
  offset = offset || 0; // TODO: I think this is unused... remove

  if (abbreviation.length == 0) return 0.9;
  if (abbreviation.length > this.length) return 0.0;

  for (var i = abbreviation.length; i > 0; i--) {
    var sub_abbreviation = abbreviation.substring(0, i);
    var index = this.indexOf(sub_abbreviation);

    if (index < 0) continue;
    if (index + abbreviation.length > this.length + offset) continue;

    var next_string = this.substring(index + sub_abbreviation.length);
    var next_abbreviation = null;

    if (i >= abbreviation.length) next_abbreviation = '';else next_abbreviation = abbreviation.substring(i);

    var remaining_score = next_string.score(next_abbreviation, offset + index);

    if (remaining_score > 0) {
      var score = this.length - next_string.length;

      if (index != 0) {
        var j = 0;

        var c = this.charCodeAt(index - 1);
        if (c == 32 || c == 9) {
          for (var j = index - 2; j >= 0; j--) {
            c = this.charCodeAt(j);
            score -= c == 32 || c == 9 ? 1 : 0.15;
          }

          // XXX maybe not port this heuristic
          // 
          //          } else if ([[NSCharacterSet uppercaseLetterCharacterSet] characterIsMember:[self characterAtIndex:matchedRange.location]]) {
          //            for (j = matchedRange.location-1; j >= (int) searchRange.location; j--) {
          //              if ([[NSCharacterSet uppercaseLetterCharacterSet] characterIsMember:[self characterAtIndex:j]])
          //                score--;
          //              else
          //                score -= 0.15;
          //            }
        } else {
          score -= index;
        }
      }

      score += remaining_score * next_string.length;
      score /= this.length;
      return score;
    }
  }
  return 0.0;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Remote Marketplace
 */

ccm_openThemeLauncher = function ccm_openThemeLauncher() {
	jQuery.fn.dialog.closeTop();
	jQuery.fn.dialog.showLoader();
	ccm_testMarketplaceConnection(function () {
		$.fn.dialog.open({
			title: ccmi18n.community,
			href: CCM_TOOLS_PATH + '/marketplace/themes',
			width: '905',
			modal: false,
			height: '410'
		});
	}, 'open_theme_launcher');
};

ccm_testMarketplaceConnection = function ccm_testMarketplaceConnection(onComplete, task, mpID) {
	if (mpID) {
		mpIDStr = '&mpID=' + mpID;
	} else {
		mpIDStr = '';
	}

	if (!task) {
		task = '';
	}

	params = { 'mpID': mpID };

	$.getJSON(CCM_TOOLS_PATH + '/marketplace/connect', params, function (resp) {
		if (resp.isConnected) {
			onComplete();
		} else {
			$.fn.dialog.open({
				title: ccmi18n.community,
				href: CCM_TOOLS_PATH + '/marketplace/frame?task=' + task + mpIDStr + '&ccm_token=' + resp.token,
				width: '90%',
				modal: false,
				height: '70%'
			});
			return false;
		}
	});
};

ccm_openAddonLauncher = function ccm_openAddonLauncher() {
	jQuery.fn.dialog.closeTop();
	jQuery.fn.dialog.showLoader();
	ccm_testMarketplaceConnection(function () {
		$.fn.dialog.open({
			title: ccmi18n.community,
			href: CCM_TOOLS_PATH + '/marketplace/add-ons',
			width: '905',
			modal: false,
			height: '410'
		});
	}, 'open_addon_launcher');
};

ccm_setupMarketplaceDialogForm = function ccm_setupMarketplaceDialogForm() {
	$(".ccm-pane-dialog-pagination").each(function () {
		$(this).closest('.ui-dialog-content').dialog('option', 'buttons', [{}]);
		$(this).closest('.ui-dialog').find('.ui-dialog-buttonpane .ccm-pane-dialog-pagination').remove();
		$(this).appendTo($(this).closest('.ui-dialog').find('.ui-dialog-buttonpane').addClass('ccm-ui'));
	});
	$('.ccm-pane-dialog-pagination a').click(function () {
		jQuery.fn.dialog.showLoader();
		$('#ccm-marketplace-browser-form').closest('.ui-dialog-content').load($(this).attr('href'), function () {
			jQuery.fn.dialog.hideLoader();
		});
		return false;
	});
	ccm_marketplaceBrowserInit();
	$("#ccm-marketplace-browser-form").ajaxForm({
		beforeSubmit: function beforeSubmit() {
			jQuery.fn.dialog.showLoader();
		},
		success: function success(resp) {
			jQuery.fn.dialog.hideLoader();
			$('#ccm-marketplace-browser-form').closest('.ui-dialog-content').html(resp);
		}
	});
};

ccm_marketplaceBrowserInit = function ccm_marketplaceBrowserInit() {
	$(".ccm-marketplace-item").click(function () {
		ccm_getMarketplaceItemDetails($(this).attr('mpID'));
	});

	$(".ccm-marketplace-item-thumbnail").mouseover(function () {
		var img = $(this).parent().find('div.ccm-marketplace-results-image-hover').clone().addClass('ccm-marketplace-results-image-hover-displayed').appendTo(document.body);
		var t = $(this).offset().top;
		var l = $(this).offset().left;
		l = l + 60;
		img.css('top', t).css('left', l);
		img.show();
	});

	$(".ccm-marketplace-item-thumbnail").mouseout(function () {
		$('.ccm-marketplace-results-image-hover-displayed').hide().remove();
	});
};

ccm_getMarketplaceItemDetails = function ccm_getMarketplaceItemDetails(mpID) {
	jQuery.fn.dialog.showLoader();
	$("#ccm-intelligent-search-results").hide();
	ccm_testMarketplaceConnection(function () {
		$.fn.dialog.open({
			title: ccmi18n.community,
			href: CCM_TOOLS_PATH + '/marketplace/details?mpID=' + mpID,
			width: 820,
			appendButtons: true,
			modal: false,
			height: 640
		});
	}, 'get_item_details', mpID);
};

ccm_getMarketplaceItem = function (_ccm_getMarketplaceItem) {
	function ccm_getMarketplaceItem(_x) {
		return _ccm_getMarketplaceItem.apply(this, arguments);
	}

	ccm_getMarketplaceItem.toString = function () {
		return _ccm_getMarketplaceItem.toString();
	};

	return ccm_getMarketplaceItem;
}(function (args) {
	var mpID = args.mpID;
	var closeTop = args.closeTop;
	var token = args.token;

	this.onComplete = function () {};

	if (args.onComplete) {
		ccm_getMarketplaceItem.onComplete = args.onComplete;
	}

	if (closeTop) {
		jQuery.fn.dialog.closeTop(); // this is here due to a weird safari behavior
	}
	jQuery.fn.dialog.showLoader();
	// first, we check our local install to ensure that we're connected to the
	// marketplace, etc..
	params = { 'mpID': mpID };
	$.getJSON(CCM_TOOLS_PATH + '/marketplace/connect', params, function (resp) {
		jQuery.fn.dialog.hideLoader();
		if (resp.isConnected) {
			if (!resp.purchaseRequired) {
				$.fn.dialog.open({
					title: ccmi18n.community,
					href: CCM_TOOLS_PATH + '/marketplace/download?install=1&mpID=' + mpID + '&ccm_token=' + resp.token,
					width: 500,
					appendButtons: true,
					modal: false,
					height: 400
				});
			} else {
				$.fn.dialog.open({
					title: ccmi18n.communityCheckout,
					iframe: true,
					href: CCM_TOOLS_PATH + '/marketplace/checkout?mpID=' + mpID,
					width: '560px',
					modal: false,
					height: '400px'
				});
			}
		} else {
			$.fn.dialog.open({
				title: ccmi18n.community,
				href: CCM_TOOLS_PATH + '/marketplace/frame?task=get&mpID=' + mpID + '&ccm_token=' + token,
				width: '90%',
				modal: false,
				height: '70%'
			});
		}
	});
});

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* 
 * Search
 */

var ccm_searchActivatePostFunction = new Array();

ccm_setupAdvancedSearchFields = function ccm_setupAdvancedSearchFields(searchType) {
	ccm_totalAdvancedSearchFields = $('.ccm-search-request-field-set').length;
	$("#ccm-" + searchType + "-search-add-option").unbind();
	$("#ccm-" + searchType + "-search-add-option").click(function () {
		ccm_totalAdvancedSearchFields++;
		if ($("#ccm-search-fields-wrapper").length > 0) {
			$("#ccm-search-fields-wrapper").append('<div class="ccm-search-field" id="ccm-' + searchType + '-search-field-set' + ccm_totalAdvancedSearchFields + '">' + $("#ccm-search-field-base").html() + '<\/div>');
		} else {
			$("#ccm-" + searchType + "-search-advanced-fields").append('<tr class="ccm-search-field" id="ccm-' + searchType + '-search-field-set' + ccm_totalAdvancedSearchFields + '">' + $("#ccm-search-field-base").html() + '<\/tr>');
		}
		ccm_activateAdvancedSearchFields(searchType, ccm_totalAdvancedSearchFields);
	});

	// we have to activate any of the fields that were here based on the request
	// these fields show up after a page is reloaded but we want to keep showing the request fields
	var i = 1;
	$('.ccm-search-request-field-set').each(function () {
		ccm_activateAdvancedSearchFields(searchType, i);
		i++;
	});
};

ccm_setupAdvancedSearch = function ccm_setupAdvancedSearch(searchType) {
	ccm_setupAdvancedSearchFields(searchType);
	$("#ccm-" + searchType + "-advanced-search").ajaxForm({
		beforeSubmit: function beforeSubmit() {
			ccm_deactivateSearchResults(searchType);
		},

		success: function success(resp) {
			ccm_parseAdvancedSearchResponse(resp, searchType);
		}
	});
	ccm_setupInPagePaginationAndSorting(searchType);
	ccm_setupSortableColumnSelection(searchType);
};

ccm_parseAdvancedSearchResponse = function ccm_parseAdvancedSearchResponse(resp, searchType) {
	var obj = $("#ccm-" + searchType + "-search-results");
	if (obj.length == 0 || searchType == null) {
		obj = $("#ccm-search-results");
	}
	obj.html(resp);
	ccm_activateSearchResults(searchType);
};

ccm_deactivateSearchResults = function ccm_deactivateSearchResults(searchType) {
	var obj = $("#ccm-" + searchType + "-search-fields-submit");
	if (obj.length == 0 || searchType == null) {
		obj = $("#ccm-search-fields-submit");
	}
	obj.attr('disabled', true);
	var obj = $("#ccm-" + searchType + "-search-results table.ccm-results-list");
	if (obj.length == 0 || searchType == null) {
		obj = $("#ccm-search-results");
	}
	obj.css('opacity', 0.4);
	jQuery.fn.dialog.showLoader();
};

ccm_activateSearchResults = function ccm_activateSearchResults(searchType) {
	/*if ($('a[name=ccm-' + searchType + '-list-wrapper-anchor]').length > 0) {
 	window.location.hash = 'ccm-' + searchType + '-list-wrapper-anchor';
 }*/
	if ($('.ui-dialog-content').length == 0) {
		window.scrollTo(0, 0);
	} else {
		$('.ui-dialog-content').each(function (i) {
			$(this).get(0).scrollTop = 0;
		});
	}
	$('.dialog-launch').dialog();
	var obj = $("#ccm-" + searchType + "-search-results table.ccm-results-list");
	if (obj.length == 0 || searchType == null) {
		obj = $("#ccm-search-results");
	}
	obj.css('opacity', 1);
	jQuery.fn.dialog.hideLoader();
	var obj = $("#ccm-" + searchType + "-search-fields-submit");
	if (obj.length == 0 || searchType == null) {
		obj = $("#ccm-search-fields-submit");
	}
	obj.attr('disabled', false);
	ccm_setupInPagePaginationAndSorting(searchType);
	ccm_setupSortableColumnSelection(searchType);
	if (typeof ccm_searchActivatePostFunction[searchType] == 'function') {
		ccm_searchActivatePostFunction[searchType]();
	}
};

ccm_setupInPagePaginationAndSorting = function ccm_setupInPagePaginationAndSorting(searchType) {
	$(".ccm-results-list th a").click(function () {
		ccm_deactivateSearchResults(searchType);
		var obj = $("#ccm-" + searchType + "-search-results");
		if (obj.length == 0) {
			obj = $("#ccm-search-results");
		}
		obj.load($(this).attr('href'), false, function () {
			ccm_activateSearchResults(searchType);
		});
		return false;
	});
	$("div.ccm-pagination a").click(function () {
		if (!$(this).parent().hasClass('disabled')) {
			ccm_deactivateSearchResults(searchType);
			var obj = $("#ccm-" + searchType + "-search-results");
			if (obj.length == 0) {
				obj = $("#ccm-search-results");
			}
			obj.load($(this).attr('href'), false, function () {
				ccm_activateSearchResults(searchType);
				$("div.ccm-dialog-content").attr('scrollTop', 0);
			});
		}
		return false;
	});
	$(".ccm-pane-dialog-pagination").each(function () {
		$(this).closest('.ui-dialog-content').dialog('option', 'buttons', [{}]);
		$(this).closest('.ui-dialog').find('.ui-dialog-buttonpane .ccm-pane-dialog-pagination').remove();
		$(this).appendTo($(this).closest('.ui-dialog').find('.ui-dialog-buttonpane').addClass('ccm-ui'));
	});
};

ccm_setupSortableColumnSelection = function ccm_setupSortableColumnSelection(searchType) {
	$("#ccm-list-view-customize").unbind();
	$("#ccm-list-view-customize").click(function () {
		jQuery.fn.dialog.open({
			width: 550,
			height: 350,
			appendButtons: true,
			modal: false,
			href: $(this).attr('href'),
			title: ccmi18n.customizeSearch
		});
		return false;
	});
};

ccm_checkSelectedAdvancedSearchField = function ccm_checkSelectedAdvancedSearchField(searchType, fieldset) {
	$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-search-option-type-date_time input").each(function () {
		$(this).attr('id', $(this).attr('id') + fieldset);
	});
	$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-search-option-type-date_time input").datepicker({
		showAnim: 'fadeIn'
	});
	$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-search-option-type-rating input").rating();
};

ccm_activateAdvancedSearchFields = function ccm_activateAdvancedSearchFields(searchType, fieldset) {
	var selTag = $("#ccm-" + searchType + "-search-field-set" + fieldset + " select:first");
	selTag.unbind();
	selTag.change(function () {
		var selected = $(this).find(':selected').val();
		$(this).parent().parent().find('input.ccm-' + searchType + '-selected-field').val(selected);

		var itemToCopy = $('#ccm-' + searchType + '-search-field-base-elements span[search-field=' + selected + ']');
		$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-selected-field-content").html('');
		itemToCopy.clone().appendTo("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-selected-field-content");

		$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-selected-field-content .ccm-search-option").show();
		ccm_checkSelectedAdvancedSearchField(searchType, fieldset);
	});

	// add the initial state of the latest select menu
	/*
 var lastSelect = $("#ccm-" + searchType + "-search-field-set" + fieldset + " select[ccm-advanced-search-selector=1]").eq($(".ccm-" + searchType + "-search-field select[ccm-advanced-search-selector=1]").length-1);
 var selected = lastSelect.find(':selected').val();
 lastSelect.next('input.ccm-" + searchType + "-selected-field').val(selected);
 */

	$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-search-remove-option").unbind();
	$("#ccm-" + searchType + "-search-field-set" + fieldset + " .ccm-search-remove-option").click(function () {
		$(this).parents('div.ccm-search-field').remove();
		$(this).parents('tr.ccm-search-field').remove();

		//ccm_totalAdvancedSearchFields--;
	});

	ccm_checkSelectedAdvancedSearchField(searchType, fieldset);
};

ccm_activateEditablePropertiesGrid = function ccm_activateEditablePropertiesGrid() {
	$("tr.ccm-attribute-editable-field").each(function () {
		var trow = $(this);
		$(this).find('a').click(function () {
			trow.find('.ccm-attribute-editable-field-text').hide();
			trow.find('.ccm-attribute-editable-field-clear-button').hide();
			trow.find('.ccm-attribute-editable-field-form').show();
			trow.find('.ccm-attribute-editable-field-save-button').show();
		});

		trow.find('form').submit(function () {
			return false;
		});

		trow.find('.ccm-attribute-editable-field-save-button').parent().click(function () {
			var task = trow.find('form input[name=task]');
			if (task.val() == 'clear_extended_attribute') {
				task.val(task.attr('data-original-task'));
				task.attr('data-original-task', '');
			}
			ccm_submitEditablePropertiesGrid(trow);
		});

		trow.find('.ccm-attribute-editable-field-clear-button').parent().unbind();
		trow.find('.ccm-attribute-editable-field-clear-button').parent().click(function () {
			var task = trow.find('form input[name=task]');
			task.attr('data-original-task', task.val());
			task.val('clear_extended_attribute');
			ccm_submitEditablePropertiesGrid(trow);
			return false;
		});
	});
};

ccm_submitEditablePropertiesGrid = function ccm_submitEditablePropertiesGrid(trow) {

	trow.find('.ccm-attribute-editable-field-save-button').hide();
	trow.find('.ccm-attribute-editable-field-clear-button').hide();
	trow.find('.ccm-attribute-editable-field-loading').show();
	try {
		tinyMCE.triggerSave(true, true);
	} catch (e) {}

	trow.find('form').ajaxSubmit(function (resp) {
		// resp is new HTML to display in the div
		trow.find('.ccm-attribute-editable-field-loading').hide();
		trow.find('.ccm-attribute-editable-field-save-button').show();
		trow.find('.ccm-attribute-editable-field-text').html(resp);
		trow.find('.ccm-attribute-editable-field-form').hide();
		trow.find('.ccm-attribute-editable-field-save-button').hide();
		trow.find('.ccm-attribute-editable-field-text').show();
		trow.find('.ccm-attribute-editable-field-clear-button').show();
		trow.find('td').show('highlight', {
			color: '#FFF9BB'
		});
	});
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tr_activeNode = false;
//var tr_doAnim = false; // we initial set it to false, but once we're done loading the initial state we can make it true
if (typeof tr_doAnim == 'undefined') {
	var tr_doAnim = false; // we initial set it to false, but once we're done loading the initial state we can make it true
}
var tr_parseSubnodes = true;
var tr_reorderMode = false;
var tr_moveCopyMode = false;

showPageMenu = function showPageMenu(obj, e) {
	ccm_hideMenus();
	e.stopPropagation();
	/* now, check to see if this menu has been made */
	var bobj = $("#ccm-page-menu" + obj.cID);

	if (!bobj.get(0)) {

		// create the 1st instance of the menu
		el = document.createElement("DIV");
		el.id = "ccm-page-menu" + obj.cID;
		el.className = "ccm-menu ccm-ui";
		el.style.display = "block";
		el.style.visibility = "hidden";
		document.body.appendChild(el);

		bobj = $("#ccm-page-menu" + obj.cID);
		bobj.css("position", "absolute");

		/* contents  of menu */
		var html = '<div class="popover"><div class="arrow"></div><div class="inner"><div class="content">';
		html += "<ul>";

		if (obj.isTrash) {

			html += '<li><a class="ccm-menu-icon ccm-icon-delete-menu" onclick="ccm_sitemapDeleteForever(' + obj.instance_id + ',' + obj.cID + ', true)" href="javascript:void(0)">' + ccmi18n_sitemap.emptyTrash + '<\/a><\/li>';
		} else if (obj.inTrash) {

			html += '<li><a class="ccm-menu-icon ccm-icon-search-pages" onclick="ccm_previewInternalTheme(' + obj.cID + ', false, \'' + ccmi18n_sitemap.previewPage + '\')" href="javascript:void(0)">' + ccmi18n_sitemap.previewPage + '<\/a><\/li>';
			html += '<li class=\"ccm-menu-separator\"><\/li>';
			html += '<li><a class="ccm-menu-icon ccm-icon-delete-menu" onclick="ccm_sitemapDeleteForever(' + obj.instance_id + ',' + obj.cID + ', false)" href="javascript:void(0)">' + ccmi18n_sitemap.deletePageForever + '<\/a><\/li>';
		} else if (obj.cAlias == 'LINK' || obj.cAlias == 'POINTER') {

			html += '<li><a class="ccm-menu-icon ccm-icon-visit" id="menuVisit' + obj.cID + '" href="javascript:void(0)" onclick="window.location.href=\'' + CCM_DISPATCHER_FILENAME + '?cID=' + obj.cID + '\'">' + ccmi18n_sitemap.visitExternalLink + '<\/a><\/li>';
			if (obj.cAlias == 'LINK' && obj.canEditProperties) {
				html += '<li><a class="ccm-menu-icon ccm-icon-edit-external-link" dialog-width="350" dialog-height="170" dialog-title="' + ccmi18n_sitemap.editExternalLink + '" dialog-modal="false" dialog-append-buttons="true" id="menuLink' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=edit_external">' + ccmi18n_sitemap.editExternalLink + '<\/a><\/li>';
			}

			if (obj.canDelete) {
				html += '<li><a class="ccm-menu-icon ccm-icon-delete-menu" dialog-append-buttons="true" id="menuDelete' + obj.cID + '" dialog-width="360" dialog-height="150" dialog-modal="false" dialog-append-buttons="true" dialog-title="' + ccmi18n_sitemap.deleteExternalLink + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&display_mode=' + obj.display_mode + '&instance_id=' + obj.instance_id + '&select_mode=' + obj.select_mode + '&ctask=delete_external">' + ccmi18n_sitemap.deleteExternalLink + '<\/a><\/li>';
			}
		} else {

			html += '<li><a class="ccm-menu-icon ccm-icon-visit" id="menuVisit' + obj.cID + '" href="' + CCM_DISPATCHER_FILENAME + '?cID=' + obj.cID + '">' + ccmi18n_sitemap.visitPage + '<\/a><\/li>';
			if (obj.canCompose) {
				html += '<li><a class="ccm-menu-icon ccm-icon-edit-in-composer-menu" id="menuComposer' + obj.cID + '" href="' + CCM_DISPATCHER_FILENAME + '/dashboard/composer/write/-/edit/' + obj.cID + '">' + ccmi18n_sitemap.editInComposer + '<\/a><\/li>';
			}
			if (obj.canEditProperties || obj.canEditSpeedSettings || obj.canEditPermissions || obj.canEditDesign || obj.canViewVersions || obj.canDelete) {
				html += '<li class=\"ccm-menu-separator\"><\/li>';
			}
			if (obj.canEditProperties) {
				html += '<li><a class="ccm-menu-icon ccm-icon-properties-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-width="670" dialog-height="360" dialog-append-buttons="true" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.pagePropertiesTitle + '" id="menuProperties' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=edit_metadata">' + ccmi18n_sitemap.pageProperties + '<\/a><\/li>';
			}
			if (obj.canEditSpeedSettings) {
				html += '<li><a class="ccm-menu-icon ccm-icon-speed-settings-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-width="550" dialog-height="280" dialog-append-buttons="true" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.speedSettingsTitle + '" id="menuSpeedSettings' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=edit_speed_settings">' + ccmi18n_sitemap.speedSettings + '<\/a><\/li>';
			}
			if (obj.canEditPermissions) {
				html += '<li><a class="ccm-menu-icon ccm-icon-permissions-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-width="420" dialog-height="630" dialog-append-buttons="true" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.setPagePermissions + '" id="menuPermissions' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=edit_permissions">' + ccmi18n_sitemap.setPagePermissions + '<\/a><\/li>';
			}
			if (obj.canEditDesign) {
				html += '<li><a class="ccm-menu-icon ccm-icon-design-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-width="610" dialog-append-buttons="true" dialog-height="405" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.pageDesign + '" id="menuDesign' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=set_theme">' + ccmi18n_sitemap.pageDesign + '<\/a><\/li>';
			}
			if (obj.canViewVersions) {
				html += '<li><a class="ccm-menu-icon ccm-icon-versions-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-width="640" dialog-height="340" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.pageVersions + '" id="menuVersions' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/versions.php?rel=SITEMAP&cID=' + obj.cID + '">' + ccmi18n_sitemap.pageVersions + '<\/a><\/li>';
			}
			if (obj.canDelete) {
				html += '<li><a class="ccm-menu-icon ccm-icon-delete-menu" dialog-on-close="ccm_sitemapExitEditMode(' + obj.cID + ')" dialog-append-buttons="true" id="menuDelete' + obj.cID + '" dialog-width="360" dialog-height="200" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.deletePage + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&display_mode=' + obj.display_mode + '&instance_id=' + obj.instance_id + '&select_mode=' + obj.select_mode + '&ctask=delete">' + ccmi18n_sitemap.deletePage + '<\/a><\/li>';
			}
			if (obj.display_mode == 'explore' || obj.display_mode == 'search') {
				html += '<li class=\"ccm-menu-separator\"><\/li>';
				html += '<li><a class="ccm-menu-icon ccm-icon-move-copy-menu" dialog-width="90%" dialog-height="70%" dialog-modal="false" dialog-title="' + ccmi18n_sitemap.moveCopyPage + '" id="menuMoveCopy' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/sitemap_search_selector?sitemap_select_mode=move_copy_delete&cID=' + obj.cID + '" id="menuMoveCopy' + obj.cID + '">' + ccmi18n_sitemap.moveCopyPage + '<\/a><\/li>';
				if (obj.display_mode == 'explore') {
					html += '<li><a class="ccm-menu-icon ccm-icon-move-up" id="menuSendToStop' + obj.cID + '" href="' + CCM_DISPATCHER_FILENAME + '/dashboard/sitemap/explore?cNodeID=' + obj.cID + '&task=send_to_top">' + ccmi18n_sitemap.sendToTop + '<\/a><\/li>';
					html += '<li><a class="ccm-menu-icon ccm-icon-move-down" id="menuSendToBottom' + obj.cID + '" href="' + CCM_DISPATCHER_FILENAME + '/dashboard/sitemap/explore?cNodeID=' + obj.cID + '&task=send_to_bottom">' + ccmi18n_sitemap.sendToBottom + '<\/a><\/li>';
				}
			}
			if (obj.cNumChildren > 0) {
				html += '<li class=\"ccm-menu-separator\"><\/li>';

				//var searchURL = (obj.display_mode == 'explore') ? CCM_REL + CCM_DISPATCHER_FILENAME + '/dashboard/sitemap/search/?selectedSearchField[]=parent&cParentAll=1&cParentIDSearchField=' + obj.cID : 'javascript:searchSubPages(' + obj.cID + ')';
				var searchURL = CCM_DISPATCHER_FILENAME + '/dashboard/sitemap/search/?selectedSearchField[]=parent&cParentAll=1&cParentIDSearchField=' + obj.cID;

				if (obj.display_mode == 'full' || obj.display_mode == '' || obj.display_mode == 'explore') {
					html += '<li><a class="ccm-menu-icon ccm-icon-search-pages" id="menuSearch' + obj.cID + '" href="' + searchURL + '">' + ccmi18n_sitemap.searchPages + '<\/a><\/li>';
				}
				if (obj.display_mode != 'explore') {
					html += '<li><a class="ccm-menu-icon ccm-icon-flat-view" id="menuExplore' + obj.cID + '" href="' + CCM_DISPATCHER_FILENAME + '/dashboard/sitemap/explore/-/' + obj.cID + '">' + ccmi18n_sitemap.explorePages + '<\/a><\/li>';
				}
			}
			if (obj.canAddSubpages || obj.canAddExternalLinks) {
				html += '<li class=\"ccm-menu-separator\"><\/li>';
			}
			if (obj.canAddSubpages) {
				html += '<li><a class="ccm-menu-icon ccm-icon-add-page-menu" dialog-append-buttons="true" dialog-width="645" dialog-modal="false" dialog-height="345" dialog-title="' + ccmi18n_sitemap.addPage + '" id="menuSubPage' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&mode=' + obj.display_mode + '&cID=' + obj.cID + '&ctask=add">' + ccmi18n_sitemap.addPage + '<\/a><\/li>';
			}
			if (obj.display_mode != 'search' && obj.canAddExternalLinks) {
				html += '<li><a class="ccm-menu-icon ccm-icon-add-external-link-menu" dialog-width="350" dialog-modal="false" dialog-height="170" dialog-title="' + ccmi18n_sitemap.addExternalLink + '" dialog-modal="false" dialog-append-buttons="true" id="menuLink' + obj.cID + '" href="' + CCM_TOOLS_PATH + '/edit_collection_popup.php?rel=SITEMAP&cID=' + obj.cID + '&ctask=add_external">' + ccmi18n_sitemap.addExternalLink + '<\/a><\/li>';
			}
		}

		html += '<\/ul>';

		html += '</div></div></div>';

		bobj.append(html);

		$(bobj).find('a').bind('click.hide-menu', function (e) {
			ccm_hideMenus();
		});

		$("#menuProperties" + obj.cID).dialog();
		$("#menuSpeedSettings" + obj.cID).dialog();
		$("#menuSubPage" + obj.cID).dialog();
		$("#menuDesign" + obj.cID).dialog();
		$("#menuLink" + obj.cID).dialog();
		$("#menuVersions" + obj.cID).dialog();
		$("#menuPermissions" + obj.cID).dialog();
		$("#menuMoveCopy" + obj.cID).dialog();
		$("#menuDelete" + obj.cID).dialog();
	} else {
		bobj = $("#ccm-page-menu" + obj.cID);
	}

	ccm_fadeInMenu(bobj, e);
};

hideBranch = function hideBranch(nodeID) {
	// hides branch and its drop zone
	$("#tree-node" + nodeID).hide();
	$("#tree-dz" + nodeID).hide();
};

cancelReorder = function cancelReorder() {
	if (tr_reorderMode) {
		//$('img.handle').removeClass('moveable');
		tr_reorderMode = false;
		$('li.tree-node[draggable=true]').draggable('destroy');
		if (!tr_moveCopyMode) {
			hideSitemapMessage();
		}
	}
};

ccm_sitemapExitEditMode = function ccm_sitemapExitEditMode(cID) {
	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_check_in?cID=" + cID + "&ccm_token=" + CCM_SECURITY_TOKEN);
};

searchSubPages = function searchSubPages(cID) {
	$("#ccm-tree-search-trigger" + cID).hide();
	if (ccm_animEffects) {
		$("#ccm-tree-search" + cID).fadeIn(200, function () {
			$("#ccm-tree-search" + cID + " input").get(0).focus();
		});
	} else {
		$("#ccm-tree-search" + cID).show();
		$("#ccm-tree-search" + cID + " input").get(0).focus();
	}
};

activateReorder = function activateReorder() {
	tr_reorderMode = true;

	/*
 
 $('div.tree-label').droppable({
 	accept: '.tree-node',
 	hoverClass: 'on-drop',
 	drop: function(e, ui) {
 		var orig = ui.draggable;
 		var destCID = $(this).attr('id').substring(10);
 		var origCID = $(orig).attr('id').substring(9);
 		if(destCID==origCID) return false;
 		var dialog_url=CCM_TOOLS_PATH + '/dashboard/sitemap_drag_request.php?origCID=' + origCID + '&destCID=' + destCID;
 		//prevent window from opening twice
 		if(SITEMAP_LAST_DIALOGUE_URL==dialog_url) return false;
 		else SITEMAP_LAST_DIALOGUE_URL=dialog_url;
 		$.fn.dialog.open({
 			title: ccmi18n_sitemap.moveCopyPage,
 			href: dialog_url,
 			width: 350,
 			modal: false,
 			height: 350, 
 			onClose: function() {
 				showBranch(origCID);
 				SITEMAP_LAST_DIALOGUE_URL='';
 			}
 		});
 		hideBranch(origCID);
 	}
 }); 
 */

	$('li.tree-node[draggable=true]').draggable({
		handle: 'img.handle',
		opacity: 0.5,
		revert: false,
		helper: 'clone',
		start: function start() {
			$(document.body).css('overflowX', 'hidden');
		},
		stop: function stop() {
			$(document.body).css('overflowX', 'auto');
		}
	});
	fixResortingDroppables();
	//showSitemapMessage(ccmi18n_sitemap.reorderPageMessage);
};

deleteBranchFade = function deleteBranchFade(nodeID) {
	// hides branch and its drop zone
	if (ccm_animEffects) {
		$("#tree-node" + nodeID).fadeOut(300, function () {
			$("#tree-node" + nodeID).remove();
		});
		$("#tree-dz" + nodeID).fadeOut(300, function () {
			$("#tree-dz" + nodeID).remove();
		});
	} else {
		deleteBranchDirect(nodeID);
	}
};

deleteBranchDirect = function deleteBranchDirect(nodeID) {
	// hides branch and its drop zone
	$("#tree-node" + nodeID).remove();
	$("#tree-dz" + nodeID).remove();
};

showBranch = function showBranch(nodeID) {
	var orig = $("#tree-node" + nodeID);
	$("#tree-node" + nodeID).show();
	$("#tree-dz" + nodeID).show();
};

rescanDisplayOrder = function rescanDisplayOrder(nodeID) {
	setLoading(nodeID);
	var queryString = "?foo=1";
	var nodes = $('#tree-root' + nodeID).children('li.tree-node');
	for (i = 0; i < nodes.length; i++) {
		if ($(nodes[i]).hasClass('ui-draggable-dragging')) continue;
		queryString += "&cID[]=" + $(nodes[i]).attr('id').substring(9);
	}
	$.getJSON(CCM_TOOLS_PATH + '/dashboard/sitemap_update.php', queryString, function (resp) {
		ccm_parseJSON(resp, function () {});
		removeLoading(nodeID);
	});
};

var SITEMAP_LAST_DIALOGUE_URL = '';
var ccm_sitemap_html = '';

parseSitemapResponse = function parseSitemapResponse(instanceID, display_mode, select_mode, nodeID, resp) {
	var container = $("ul[tree-root-node-id=" + nodeID + "][sitemap-instance-id=" + instanceID + "]");
	container.html(resp);
	container.slideDown(150, 'easeOutExpo');
};

selectMoveCopyTarget = function selectMoveCopyTarget(instanceID, display_mode, select_mode, destCID, origCID) {
	if (!origCID) {
		var origCID = CCM_CID;
	}
	var dialog_title = ccmi18n_sitemap.moveCopyPage;
	var dialog_url = CCM_TOOLS_PATH + '/dashboard/sitemap_drag_request.php?instance_id=' + instanceID + '&display_mode=' + display_mode + '&select_mode=' + select_mode + '&origCID=' + origCID + '&destCID=' + destCID;
	var dialog_height = 350;
	var dialog_width = 350;

	try {
		if (CCM_NODE_ACTION == '<none>') {
			if (CCM_TARGET_ID != '') {
				$('#' + CCM_TARGET_ID).val(destCID);
			}
			$.fn.dialog.closeTop();
			return;
		}

		if (CCM_NODE_ACTION != '') dialog_url = CCM_NODE_ACTION + '?destCID=' + destCID;
		if (CCM_DIALOG_TITLE != '') dialog_title = CCM_DIALOG_TITLE;
		if (CCM_DIALOG_HEIGHT != '') dialog_height = CCM_DIALOG_HEIGHT;
		if (CCM_DIALOG_WIDTH != '') dialog_width = CCM_DIALOG_WIDTH;
	} catch (e) {}

	$.fn.dialog.open({
		title: dialog_title,
		href: dialog_url,
		width: dialog_width,
		appendButtons: true,
		modal: false,
		height: dialog_height,
		onClose: function onClose() {
			//$("#tree").fadeIn(200);
			if (typeof CCM_TARGET_ID != "undefined" && CCM_TARGET_ID != '') {
				$('#' + CCM_TARGET_ID).val(destCID);
			}
			if (tr_moveCopyMode == true) {
				deactivateMoveCopy();
			}
		}

	});
};

selectLabel = function selectLabel(e, node) {
	var cNumChildren = node.attr('tree-node-children');
	if (node.attr('sitemap-select-mode') == "move_copy_delete" || tr_moveCopyMode == true) {
		var destCID = node.attr('id').substring(10);
		var origCID = node.attr('selected-page-id');
		selectMoveCopyTarget(node.attr('sitemap-instance-id'), node.attr('sitemap-display-mode'), node.attr('sitemap-select-mode'), destCID, origCID);
	} else if (node.attr('sitemap-select-mode') == 'select_page') {
		var callback = node.parents('[sitemap-wrapper=1]').attr('sitemap-select-callback');
		if (callback == null || callback == '' || typeof callback == 'undefined') {
			callback = 'ccm_selectSitemapNode';
		}
		eval(callback + '(node.attr(\'id\').substring(10), unescape(node.attr(\'tree-node-title\')));');
		jQuery.fn.dialog.closeTop();
	} else {
		node.addClass('tree-label-selected');
		if (tr_activeNode != false) {
			if (tr_activeNode.attr('id') != node.attr('id')) {
				tr_activeNode.removeClass('tree-label-selected');
			}
		}
		params = {
			'cID': node.attr('id').substring(10),
			'display_mode': node.attr('sitemap-display-mode'),
			'isTrash': node.attr('tree-node-istrash'),
			'inTrash': node.attr('tree-node-intrash'),
			'select_mode': node.attr('sitemap-select-mode'),
			'instance_id': node.attr('sitemap-instance-id'),
			'canCompose': node.attr('tree-node-cancompose'),
			'canEditProperties': node.attr('tree-node-can-edit-properties'),
			'canEditSpeedSettings': node.attr('tree-node-can-edit-speed-settings'),
			'canEditPermissions': node.attr('tree-node-can-edit-permissions'),
			'canEditDesign': node.attr('tree-node-can-edit-design'),
			'canViewVersions': node.attr('tree-node-can-view-versions'),
			'canDelete': node.attr('tree-node-can-delete'),
			'canAddSubpages': node.attr('tree-node-can-add-subpages'),
			'canAddExternalLinks': node.attr('tree-node-can-add-external-links'),
			'cNumChildren': node.attr('tree-node-children'),
			'cAlias': node.attr('tree-node-alias')
		};

		showPageMenu(params, e);
		tr_activeNode = node;
	}
};

ccmSitemapHighlightPageLabel = function ccmSitemapHighlightPageLabel(cID, name) {
	var sp = $("#tree-label" + cID + " > span");

	if (sp.length == 0) {
		var sp = $("tr.ccm-list-record[cID=" + cID + "]");
		if (sp.length > 0) {
			$("#ccm-page-advanced-search").submit();
		}
	} else {
		if (name != null) {
			sp.html(name);
		}
	}

	sp.show('highlight');
};

activateLabels = function (_activateLabels) {
	function activateLabels(_x, _x2, _x3) {
		return _activateLabels.apply(this, arguments);
	}

	activateLabels.toString = function () {
		return _activateLabels.toString();
	};

	return activateLabels;
}(function (instance_id, display_mode, select_mode) {
	var smwrapper = $("ul[sitemap-instance-id=" + instance_id + "]");
	smwrapper.find('div.tree-label span').unbind();
	smwrapper.find('div.tree-label span').click(function (e) {
		selectLabel(e, $(this).parent());
	});

	// now we make sure that all the items that are open are registered as open
	//if ($(this).parent().attr('sitemap-display-mode') != 'explore') {
	smwrapper.find("ul[tree-root-state=closed]").each(function () {
		var container = $(this);
		var nodeID = $(this).attr('tree-root-node-id');
		if ($(this).find('li').length > 0) {
			container.attr('tree-root-state', 'open');
			$("#tree-collapse" + nodeID).attr('src', CCM_IMAGE_PATH + '/dashboard/minus.jpg');
		}
	});

	//}

	if (select_mode == 'select_page' || select_mode == 'move_copy_delete') {
		smwrapper.find("li.ccm-sitemap-explore-paging a").each(function () {
			$(this).click(function () {
				var treeRootNode = $(this).parentsUntil('ul').parent().parentsUntil('ul').parent().attr('tree-root-node-id');
				jQuery.fn.dialog.showLoader();
				$.get($(this).attr('href'), function (r) {
					parseSitemapResponse(instance_id, display_mode, select_mode, treeRootNode, r);
					activateLabels(instance_id, display_mode, select_mode);
					jQuery.fn.dialog.hideLoader();
				});

				return false;
			});
		});
	}
	if ((display_mode == 'explore' || display_mode == 'full') && !select_mode) {
		smwrapper.find('img.handle').addClass('moveable');
	}

	if (display_mode == 'full' && !select_mode) {

		//drop onto a page
		smwrapper.find('div.tree-label').droppable({
			accept: '.tree-node',
			hoverClass: 'on-drop',
			drop: function drop(e, ui) {
				var orig = ui.draggable;
				var destCID = $(this).attr('id').substring(10);
				var origCID = $(orig).attr('id').substring(9);
				if (destCID == origCID) return false;
				var dialog_url = CCM_TOOLS_PATH + '/dashboard/sitemap_drag_request.php?instance_id=' + instance_id + '&origCID=' + origCID + '&destCID=' + destCID;
				//prevent window from opening twice
				if (SITEMAP_LAST_DIALOGUE_URL == dialog_url) return false;else SITEMAP_LAST_DIALOGUE_URL = dialog_url;
				$.fn.dialog.open({
					title: ccmi18n_sitemap.moveCopyPage,
					href: dialog_url,
					width: 350,
					modal: false,
					height: 350,
					appendButtons: true,
					onClose: function onClose() {
						showBranch(origCID);
						SITEMAP_LAST_DIALOGUE_URL = '';
					}
				});
				//hideBranch(origCID);
			}
		});

		//addResortDroppable(nodeID);		

		smwrapper.find('li.tree-node[draggable=true]').draggable({
			handle: 'img.handle',
			opacity: 0.5,
			revert: false,
			helper: 'clone',
			start: function start() {
				$(document.body).css('overflowX', 'hidden');
			},
			stop: function stop() {
				$(document.body).css('overflowX', 'auto');
			}
		});
	}
});

ccm_triggerProgressiveOperation = function ccm_triggerProgressiveOperation(url, params, dialogTitle, onComplete, onError) {
	jQuery.fn.dialog.showLoader();
	$('#ccm-dialog-progress-bar').remove();
	$.ajax({
		url: url,
		type: 'POST',
		data: params,
		success: function success(r) {
			jQuery.fn.dialog.hideLoader();
			$('<div id="ccm-dialog-progress-bar" />').appendTo(document.body).html(r).jqdialog({
				autoOpen: false,
				height: 200,
				width: 400,
				modal: true,
				title: dialogTitle,
				closeOnEscape: false,
				open: function open(e, ui) {
					$('.ui-dialog-titlebar-close', this.parentNode).hide();
					var totalItems = $('#ccm-progressive-operation-progress-bar').attr('data-total-items');
					params.push({
						'name': 'process',
						'value': '1'
					});
					ccm_doProgressiveOperation(url, params, totalItems, onComplete, onError);
				}
			});
			$("#ccm-dialog-progress-bar").jqdialog('open');
		}
	});
};

ccm_doProgressiveOperation = function (_ccm_doProgressiveOperation) {
	function ccm_doProgressiveOperation(_x4, _x5, _x6, _x7, _x8) {
		return _ccm_doProgressiveOperation.apply(this, arguments);
	}

	ccm_doProgressiveOperation.toString = function () {
		return _ccm_doProgressiveOperation.toString();
	};

	return ccm_doProgressiveOperation;
}(function (url, params, totalItems, onComplete, onError) {
	$.ajax({
		url: url,
		dataType: 'json',
		type: 'POST',
		data: params,
		error: function error(xhr, status, r) {
			switch (status) {
				case 'timeout':
					var text = ccmi18n.requestTimeout;
					break;
				default:
					var text = xhr.responseText;
					break;
			}
			$('#ccm-dialog-progress-bar').dialog('option', 'height', 200);
			$('#ccm-dialog-progress-bar').dialog('option', 'closeOnEscape', true);
			$('#ccm-progressive-operation-progress-bar').html('<div class="alert alert-error">' + text + '</div>');
			$('.ui-dialog-titlebar-close').show();
		},

		success: function success(r) {
			if (r.error) {
				var text = r.message;
				$('#ccm-dialog-progress-bar').dialog('option', 'height', 200);
				$('#ccm-dialog-progress-bar').dialog('option', 'closeOnEscape', true);
				$('#ccm-progressive-operation-progress-bar').html('<div class="alert alert-error">' + text + '</div>');
				$('.ui-dialog-titlebar-close').show();
				if (typeof onError == 'function') {
					onError(r);
				}
			} else {
				var totalItemsLeft = r.totalItems;
				// update the percentage
				var pct = Math.round((totalItems - totalItemsLeft) / totalItems * 100);
				$('#ccm-progressive-operation-status').html(1);
				if (totalItems - totalItemsLeft > 0) {
					$('#ccm-progressive-operation-status').html(totalItems - totalItemsLeft);
				}
				$('#ccm-progressive-operation-progress-bar div.bar').width(pct + '%');
				if (totalItemsLeft > 0) {
					setTimeout(function () {
						ccm_doProgressiveOperation(url, params, totalItems, onComplete, onError);
					}, 250);
				} else {
					setTimeout(function () {
						// give the animation time to catch up.
						$('#ccm-progressive-operation-progress-bar div.bar').width('0%');
						$('#ccm-dialog-progress-bar').dialog('close');
						if (typeof onComplete == 'function') {
							onComplete(r);
						}
					}, 1000);
				}
			}
		}
	});
});

ccm_refreshCopyOperations = function ccm_refreshCopyOperations() {
	var dialogTitle = ccmi18n_sitemap.copyProgressTitle;
	ccm_triggerProgressiveOperation(CCM_TOOLS_PATH + '/dashboard/sitemap_copy_all', [], dialogTitle, function () {
		$('.ui-dialog-content').dialog('close');
		window.location.reload();
	});
};

moveCopyAliasNode = function moveCopyAliasNode(reloadPage) {

	var origCID = $('#origCID').val();
	var destParentID = $('#destParentID').val();
	var destCID = $('#destCID').val();
	var ctask = $("input[name=ctask]:checked").val();
	var instance_id = $("input[name=instance_id]").val();
	var display_mode = $("input[name=display_mode]").val();
	var select_mode = $("input[name=select_mode]").val();
	var copyAll = $("input[name=copyAll]:checked").val();
	var saveOldPagePath = $("input[name=saveOldPagePath]:checked").val();
	// DO THE DEED

	params = {

		'origCID': origCID,
		'destCID': destCID,
		'ctask': ctask,
		'ccm_token': CCM_SECURITY_TOKEN,
		'copyAll': copyAll,
		'saveOldPagePath': saveOldPagePath
	};

	if (copyAll == 1) {

		var dialogTitle = ccmi18n_sitemap.copyProgressTitle;
		ccm_triggerProgressiveOperation(CCM_TOOLS_PATH + '/dashboard/sitemap_copy_all', [{ 'name': 'origCID', 'value': origCID }, { 'name': 'destCID', 'value': destCID }], dialogTitle, function () {
			$('.ui-dialog-content').dialog('close');
			openSub(instance_id, destParentID, display_mode, select_mode, function () {
				openSub(instance_id, destCID, display_mode, select_mode);
			});
		});
	} else {

		jQuery.fn.dialog.showLoader();

		$.getJSON(CCM_TOOLS_PATH + '/dashboard/sitemap_drag_request.php', params, function (resp) {
			// parse response
			ccm_parseJSON(resp, function () {
				jQuery.fn.dialog.closeAll();
				jQuery.fn.dialog.hideLoader();
				ccmAlert.hud(resp.message, 2000);
				if (reloadPage == true) {
					if (typeof CCM_LAUNCHER_SITEMAP != 'undefined') {
						if (CCM_LAUNCHER_SITEMAP == 'explore') {
							// we are in the dashboard and we need to actually go to the explore node
							window.location.href = CCM_DISPATCHER_FILENAME + "/dashboard/sitemap/explore/-/" + destCID;
							return false;
						}
						if (CCM_LAUNCHER_SITEMAP == 'search') {
							ccm_deactivateSearchResults(CCM_SEARCH_INSTANCE_ID);
							$("#ccm-" + CCM_SEARCH_INSTANCE_ID + "-advanced-search").ajaxSubmit(function (resp) {
								ccm_parseAdvancedSearchResponse(resp, CCM_SEARCH_INSTANCE_ID);
							});
						}
					} else {
						setTimeout(function () {
							window.location.href = CCM_DISPATCHER_FILENAME + "?cID=" + resp.cID;
						}, 2000);
						return false;
					}
				}

				switch (ctask) {
					case "COPY":
					case "ALIAS":
						// since we're copying we show the original again
						showBranch(origCID);
						break;
					case "MOVE":
						deleteBranchDirect(origCID);
						break;
				}

				openSub(instance_id, destParentID, display_mode, select_mode, function () {
					openSub(instance_id, destCID, display_mode, select_mode);
				});
				jQuery.fn.dialog.closeTop();
				jQuery.fn.dialog.closeTop();
			});
		});
	}
};

/*
searchSitemapNode = function(cID) {
	var q = $('form#ccm-tree-search' + cID + ' input').val();
	openSubSearch(cID, q);
	return false;
}
*/

toggleSub = function toggleSub(instanceID, nodeID, display_mode, select_mode) {
	ccm_hideMenus();
	var container = $("ul[tree-root-node-id=" + nodeID + "][sitemap-instance-id=" + instanceID + "]");
	if (container.attr('tree-root-state') == 'closed') {
		openSub(instanceID, nodeID, display_mode, select_mode);
	} else {
		closeSub(instanceID, nodeID, display_mode, select_mode);
	}
};

ccm_sitemapDeleteForever = function ccm_sitemapDeleteForever(instance_id, nodeID, isTrash) {
	var dialogTitle = isTrash ? ccmi18n_sitemap.emptyTrash : ccmi18n_sitemap.deletePages;
	ccm_triggerProgressiveOperation(CCM_TOOLS_PATH + '/dashboard/sitemap_delete_forever', [{ 'name': 'cID', 'value': nodeID }], dialogTitle, function () {
		if (isTrash) {
			closeSub(instance_id, nodeID, 'full', '');
			var container = $("ul[tree-root-node-id=" + nodeID + "]").parent();
			container.find('img.tree-plus').remove();
			container.find('span.ccm-sitemap-num-subpages').remove();
		} else {
			deleteBranchFade(nodeID);
			ccmAlert.hud(ccmi18n_sitemap.deletePageSuccessMsg, 2000);
		}
	});
};

setLoading = function setLoading(nodeID) {
	var listNode = $("#tree-node" + nodeID);
	listNode.removeClass('tree-node-' + listNode.attr('tree-node-type'));
	listNode.addClass('tree-node-loading');
};

removeLoading = function removeLoading(nodeID) {
	var listNode = $("#tree-node" + nodeID);
	listNode.removeClass('tree-node-loading');
	listNode.addClass('tree-node-' + listNode.attr('tree-node-type'));
};

openSub = function openSub(instanceID, nodeID, display_mode, select_mode, onComplete) {
	setLoading(nodeID);
	var container = $("#tree-root" + nodeID);
	cancelReorder();
	ccm_sitemap_html = '';
	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php?instance_id=" + instanceID + "&node=" + nodeID + "&display_mode=" + display_mode + "&select_mode=" + select_mode + "&selectedPageID=" + container.attr('selected-page-id'), function (resp) {
		parseSitemapResponse(instanceID, 'full', select_mode, nodeID, resp);
		activateLabels(instanceID, 'full', select_mode);
		if (select_mode != 'move_copy_delete' && select_mode != 'select_page') {
			activateReorder();
		}

		setTimeout(function () {
			removeLoading(nodeID);
			if (onComplete != null) {
				onComplete();
			}
		}, 200);
	});
};

/*
openSubSearch = function(nodeID, query, onComplete) {
	setLoading(nodeID);
	var container = $("#tree-root" + nodeID);
	ccm_sitemap_html = '';
	container.html('');
	container.addClass('ccm-sitemap-search-results');
	cancelReorder();
	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php?node=" + nodeID, {'keywords': query, 'mode': 'full'}, function(resp) {
		parseSitemapResponse('full', nodeID, resp);	
		activateLabels('full');
		setTimeout(function() {
			removeLoading(nodeID);
			if (onComplete != null) {
				onComplete();
			}			
		}, 200);
	});	
}
*/

closeSub = function closeSub(instanceID, nodeID, display_mode, select_mode) {
	var container = $("ul[tree-root-node-id=" + nodeID + "][sitemap-instance-id=" + instanceID + "]");
	if (tr_doAnim) {
		setLoading(nodeID);
		container.slideUp(150, 'easeOutExpo', function () {
			removeLoading(nodeID);
			container.attr('tree-root-state', 'closed');
			container.html('');
			$("#ccm-tree-search" + nodeID).hide();
			$("#tree-collapse" + nodeID).attr('src', CCM_IMAGE_PATH + '/dashboard/plus.jpg');
			container.removeClass('ccm-sitemap-search-results');
		});
	} else {
		container.hide();
		container.attr('tree-root-state', 'closed');
		container.removeClass('ccm-sitemap-search-results');
		$("#ccm-tree-search" + nodeID).hide();
		$("#tree-collapse" + nodeID).attr('src', CCM_IMAGE_PATH + '/dashboard/plus.jpg');
	}

	if (tr_moveCopyMode == true) {
		$("#ccm-tree-search-trigger" + cID).show();
	}

	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php?instance_id=" + instanceID + "&select_mode=" + select_mode + "&display_mode=" + display_mode + "&node=" + nodeID + '&ctask=close-node');
};

toggleMove = function toggleMove() {
	if ($("#copyThisPage").get(0)) {
		$("#copyThisPage").get(0).disabled = true;
		$("#copyChildren").get(0).disabled = true;
		$("#saveOldPagePath").attr('disabled', false);
	}
};

toggleAlias = function toggleAlias() {
	if ($("#copyThisPage").get(0)) {
		$("#copyThisPage").get(0).disabled = true;
		$("#copyChildren").get(0).disabled = true;
		$("#saveOldPagePath").attr('checked', false);
		$("#saveOldPagePath").attr('disabled', 'disabled');
	}
};

toggleCopy = function toggleCopy() {
	if ($("#copyThisPage").get(0)) {
		$("#copyThisPage").get(0).disabled = false;
		$("#copyThisPage").get(0).checked = true;
		$("#copyChildren").get(0).disabled = false;
		$("#saveOldPagePath").attr('checked', false);
		$("#saveOldPagePath").attr('disabled', 'disabled');
	}
};

showSitemapMessage = function showSitemapMessage(msg) {
	$("#ccm-sitemap-message").addClass('message');
	$("#ccm-sitemap-message").html(msg);
	$("#ccm-sitemap-message").fadeIn(200);
};

hideSitemapMessage = function hideSitemapMessage() {
	$("#ccm-sitemap-message").hide();
};

function fixResortingDroppables() {
	if (tr_reorderMode == false) {
		return false;
	}

	var DZs = $('.dropzone');
	for (var i = 0; i < DZs.length; i++) {
		var nodeID = $(DZs[i]).attr('id').substr(7);
		if (nodeID.indexOf('-sub') > 0) {
			nodeID = nodeID.substr(0, nodeID.length - 4);
		}
		addResortDroppable(nodeID);
	}
}
//drop onto a dropzone - used only for reordering pages 
function addResortDroppable(nodeID) {
	//ignore levels with only one branch
	if ($('.tree-branch' + nodeID).length <= 1) return;
	//add reordering droppable targets
	$('div.tree-dz' + nodeID).droppable({
		accept: '.tree-branch' + nodeID,
		activeClass: 'dropzone-ready',
		hoverClass: 'dropzone-active',
		drop: function drop(e, ui) {
			var node = ui.draggable;
			$(node).insertAfter(this);
			var dzNode = $(node).attr('id').substring(9);
			$("#tree-dz" + dzNode).insertAfter($(node));
			rescanDisplayOrder($(this).attr('tree-parent'));
		}
	});
}

ccmSitemapExploreNode = function ccmSitemapExploreNode(instance_id, display_mode, select_mode, cID, selectedPageID) {
	jQuery.fn.dialog.showLoader();
	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php", { 'instance_id': instance_id, 'display_mode': display_mode, 'select_mode': select_mode, 'node': cID, 'selectedPageID': selectedPageID }, function (resp) {
		parseSitemapResponse(instance_id, 'explore', select_mode, 0, resp);
		activateLabels(instance_id, 'explore', select_mode);
		jQuery.fn.dialog.hideLoader();
		ccm_sitemap_html = '';
	});
};

ccmSitemapLoad = function ccmSitemapLoad(instance_id, display_mode, select_mode, node, selectedPageID, onComplete) {
	if (select_mode == 'move_copy_delete' || select_mode == 'select_page') {
		ccmSitemapExploreNode(instance_id, display_mode, select_mode, node, selectedPageID);
	} else if (display_mode == 'full') {

		activateLabels(instance_id, display_mode, select_mode);
		if (select_mode != 'move_copy_delete' && select_mode != 'select_page') {
			activateReorder();
		}
		tr_doAnim = true;
		tr_parseSubnodes = false;
		ccm_sitemap_html = '';
	} else {
		if (select_mode != 'move_copy_delete' && select_mode != 'select_page') {
			$("ul[sitemap-instance-id=" + instance_id + "]").sortable({
				cursor: 'move',
				items: 'li[draggable=true]',
				opacity: 0.5,
				stop: function stop(sor) {
					var ss = $("ul[sitemap-instance-id=" + instance_id + "]").sortable('toArray');
					var queryString = '';
					for (i = 0; i < ss.length; i++) {
						if (ss[i] != '') {
							queryString += '&cID[]=' + ss[i].substring(9);
						}
					}

					$.getJSON(CCM_TOOLS_PATH + '/dashboard/sitemap_update.php', queryString, function (resp) {
						ccm_parseJSON(resp, function () {});
					});
				}
			});
		}
		activateLabels(instance_id, display_mode, select_mode);
	}

	if (onComplete) {
		onComplete();
	}
};

ccm_sitemapSetupSearch = function ccm_sitemapSetupSearch(instance_id) {
	ccm_setupAdvancedSearch(instance_id);
	ccm_sitemapSetupSearchPages(instance_id);
	ccm_searchActivatePostFunction[instance_id] = function () {
		ccm_sitemapSetupSearchPages(instance_id);
		ccm_sitemapSearchSetupCheckboxes(instance_id);
	};
	ccm_sitemapSearchSetupCheckboxes(instance_id);
};

ccm_sitemapSearchSetupCheckboxes = function ccm_sitemapSearchSetupCheckboxes(instance_id) {
	$("#ccm-" + instance_id + "-list-cb-all").click(function (e) {
		e.stopPropagation();
		if ($(this).prop('checked') == true) {
			$('.ccm-list-record td.ccm-' + instance_id + '-list-cb input[type=checkbox]').attr('checked', true);
			$("#ccm-" + instance_id + "-list-multiple-operations").attr('disabled', false);
		} else {
			$('.ccm-list-record td.ccm-' + instance_id + '-list-cb input[type=checkbox]').attr('checked', false);
			$("#ccm-" + instance_id + "-list-multiple-operations").attr('disabled', true);
		}
	});
	$("td.ccm-" + instance_id + "-list-cb input[type=checkbox]").click(function (e) {
		e.stopPropagation();
		if ($("td.ccm-" + instance_id + "-list-cb input[type=checkbox]:checked").length > 0) {
			$("#ccm-" + instance_id + "-list-multiple-operations").attr('disabled', false);
		} else {
			$("#ccm-" + instance_id + "-list-multiple-operations").attr('disabled', true);
		}
	});

	// if we're not in the dashboard, add to the multiple operations select menu

	$("#ccm-" + instance_id + "-list-multiple-operations").change(function () {
		var action = $(this).val();
		cIDstring = '';
		$("td.ccm-" + instance_id + "-list-cb input[type=checkbox]:checked").each(function () {
			cIDstring = cIDstring + '&cID[]=' + $(this).val();
		});
		switch (action) {
			case "delete":
				jQuery.fn.dialog.open({
					width: 500,
					height: 400,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/delete?' + cIDstring + '&searchInstance=' + instance_id,
					title: ccmi18n_sitemap.deletePages
				});
				break;
			case "design":
				jQuery.fn.dialog.open({
					width: 610,
					height: 405,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/design?' + cIDstring + '&searchInstance=' + instance_id,
					title: ccmi18n_sitemap.pageDesign
				});
				break;
			case 'move_copy':
				jQuery.fn.dialog.open({
					width: 640,
					height: 340,
					modal: false,
					href: CCM_TOOLS_PATH + '/sitemap_overlay?instance_id=' + instance_id + '&select_mode=move_copy_delete&' + cIDstring,
					title: ccmi18n_sitemap.moveCopyPage
				});
				break;
			case 'speed_settings':
				jQuery.fn.dialog.open({
					width: 610,
					height: 340,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/speed_settings?' + cIDstring,
					title: ccmi18n_sitemap.speedSettingsTitle
				});
				break;
			case 'permissions':
				jQuery.fn.dialog.open({
					width: 430,
					height: 630,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/permissions?' + cIDstring,
					title: ccmi18n_sitemap.pagePermissionsTitle
				});
				break;
			case 'permissions_add_access':
				jQuery.fn.dialog.open({
					width: 440,
					height: 200,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/permissions_access?task=add&' + cIDstring,
					title: ccmi18n_sitemap.pagePermissionsTitle
				});
				break;
			case 'permissions_remove_access':
				jQuery.fn.dialog.open({
					width: 440,
					height: 300,
					modal: false,
					appendButtons: true,
					href: CCM_TOOLS_PATH + '/pages/permissions_access?task=remove&' + cIDstring,
					title: ccmi18n_sitemap.pagePermissionsTitle
				});
				break;
			case "properties":
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/pages/bulk_metadata_update?' + cIDstring,
					title: ccmi18n_sitemap.pagePropertiesTitle
				});
				break;
		}

		$(this).get(0).selectedIndex = 0;
	});
};

ccm_sitemapSetupSearchPages = function ccm_sitemapSetupSearchPages(instance_id) {
	$('#ccm-' + instance_id + '-list tr').click(function (e) {
		var node = $(this);
		if (node.hasClass('ccm-results-list-header')) {
			return false;
		}

		if (node.attr('sitemap-select-mode') == 'select_page') {
			var callback = node.attr('sitemap-select-callback');
			if (callback == null || callback == '' || typeof callback == 'undefined') {
				callback = 'ccm_selectSitemapNode';
			}
			eval(callback + '(node.attr(\'cID\'), unescape(node.attr(\'cName\')));');
			jQuery.fn.dialog.closeTop();
		} else if (node.attr('sitemap-select-mode') == 'move_copy_delete') {
			var destCID = node.attr('cID');
			var origCID = node.attr('selected-page-id');
			selectMoveCopyTarget(node.attr('sitemap-instance-id'), node.attr('sitemap-display-mode'), node.attr('sitemap-select-mode'), destCID, origCID);
		} else {
			params = {
				'cID': node.attr('cID'),
				'select_mode': node.attr('sitemap-select-mode'),
				'display_mode': node.attr('sitemap-display-mode'),
				'instance_id': node.attr('sitemap-instance-id'),
				'isTrash': node.attr('tree-node-istrash'),
				'inTrash': node.attr('tree-node-intrash'),
				'canCompose': node.attr('tree-node-cancompose'),
				'canEditProperties': node.attr('tree-node-can-edit-properties'),
				'canEditSpeedSettings': node.attr('tree-node-can-edit-speed-settings'),
				'canEditPermissions': node.attr('tree-node-can-edit-permissions'),
				'canEditDesign': node.attr('tree-node-can-edit-design'),
				'canViewVersions': node.attr('tree-node-can-view-versions'),
				'canDelete': node.attr('tree-node-can-delete'),
				'canAddSubpages': node.attr('tree-node-can-add-subpages'),
				'canAddExternalLinks': node.attr('tree-node-can-add-external-links'),
				'cNumChildren': node.attr('cNumChildren'),
				'cAlias': node.attr('cAlias')
			};
			showPageMenu(params, e);
		}
	});
};

ccm_sitemapSelectDisplayMode = function ccm_sitemapSelectDisplayMode(instance_id, display_mode, select_mode, selectedPageID) {
	// finds the selector for the instance of the sitemap and reloads it to be this mode

	var ul = $("ul[sitemap-instance-id=" + instance_id + "]");
	ul.html('');
	ul.attr('sitemap-display-mode', display_mode);
	ul.attr('sitemap-select-mode', select_mode);
	ul.attr('sitemap-display-mode', display_mode);
	if (display_mode == 'explore') {
		var node = 1;
	} else {
		var node = 0;
	}
	ccmSitemapLoad(instance_id, display_mode, select_mode, node, selectedPageID, function () {
		if (display_mode == 'explore') {
			$("div[sitemap-wrapper=1][sitemap-instance-id=" + instance_id + "]").addClass("ccm-sitemap-explore");
		} else {
			$("div[sitemap-wrapper=1][sitemap-instance-id=" + instance_id + "]").removeClass("ccm-sitemap-explore");
		}
	});

	// now we save the preference	
	$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php?task=save_sitemap_display_mode&display_mode=" + display_mode);
};

ccm_sitemapDeletePages = function ccm_sitemapDeletePages(searchInstance) {
	var params = $('#ccm-' + searchInstance + '-delete-form').formToArray(true);
	ccm_triggerProgressiveOperation(CCM_TOOLS_PATH + '/pages/delete', params, ccmi18n_sitemap.deletePages, function () {
		$('.ui-dialog-content').dialog('close');
		ccm_deactivateSearchResults(searchInstance);
		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
			ccm_parseAdvancedSearchResponse(resp, searchInstance);
		});
		if (isTrash) {
			closeSub(instance_id, nodeID, 'full', '');
			var container = $("ul[tree-root-node-id=" + nodeID + "]").parent();
			container.find('img.tree-plus').remove();
			container.find('span.ccm-sitemap-num-subpages').remove();
		} else {
			deleteBranchFade(nodeID);
			ccmAlert.hud(ccmi18n_sitemap.deletePageSuccessMsg, 2000);
		}
	});

	/*
 $("#ccm-" + searchInstance + "-delete-form").ajaxSubmit(function(resp) {
 	ccm_parseJSON(resp, function() {	
 		jQuery.fn.dialog.closeTop();
 		ccm_deactivateSearchResults(searchInstance);
 		$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function(resp) {
 			ccm_parseAdvancedSearchResponse(resp, searchInstance);
 		});
 	});
 });
 */
};

ccm_sitemapUpdateDesign = function ccm_sitemapUpdateDesign(searchInstance) {
	$("#ccm-" + searchInstance + "-design-form").ajaxSubmit(function (resp) {
		ccm_parseJSON(resp, function () {
			jQuery.fn.dialog.closeTop();
			ccm_deactivateSearchResults(searchInstance);
			$("#ccm-" + searchInstance + "-advanced-search").ajaxSubmit(function (resp) {
				ccm_parseAdvancedSearchResponse(resp, searchInstance);
			});
		});
	});
};

$(function () {
	/*
 $(document).ajaxError(function(event, request, settings) {
 	ccmAlert.notice(ccmi18n_sitemap.loadErrorTitle, request.responseText);
 });
 */

	$(document).click(function () {
		ccm_hideMenus();
		$("div.tree-label").removeClass('tree-label-selected');
	});

	$("#ccm-show-all-pages-cb").click(function () {
		var showSystemPages = $(this).get(0).checked == true ? 1 : 0;
		$.get(CCM_TOOLS_PATH + "/dashboard/sitemap_data.php?show_system=" + showSystemPages, function (resp) {
			location.reload();
		});
	});
});

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


ccm_statusBar = {

	items: [],

	addItem: function addItem(item) {
		this.items.push(item);
	},

	activate: function activate(containerID) {
		if (!containerID) {
			containerID = 'ccm-page-controls-wrapper';
		}

		if (this.items.length > 0) {
			var d = '<div id="ccm-page-status-bar" class="ccm-ui">';
			for (i = 0; i < this.items.length; i++) {
				var it = this.items[i];
				var buttonStr = '';
				var buttons = it.getButtons();
				for (j = 0; j < buttons.length; j++) {
					attribs = '';
					var innerButtonLeft = '';
					var innerButtonRight = '';
					if (buttons[j].getInnerButtonLeftHTML() != '') {
						innerButtonLeft = buttons[j].getInnerButtonLeftHTML() + ' ';
					}
					if (buttons[j].getInnerButtonRightHTML() != '') {
						innerButtonRight = ' ' + buttons[j].getInnerButtonRightHTML();
					}
					var _attribs = buttons[j].getAttributes();
					for (k in _attribs) {
						attribs += _attribs[k].key + '="' + _attribs[k].value + '" ';
					}
					if (buttons[j].getURL() != '') {
						buttonStr += '<a href="' + buttons[j].getURL() + '" ' + attribs + ' class="btn btn-small ' + buttons[j].getCSSClass() + '">' + innerButtonLeft + buttons[j].getLabel() + innerButtonRight + '</a>';
					} else {
						buttonStr += '<button type="submit" ' + attribs + ' name="action_' + buttons[j].getAction() + '" class="btn-small btn ' + buttons[j].getCSSClass() + '">' + innerButtonLeft + buttons[j].getLabel() + innerButtonRight + '</button>';
					}
				}
				var line = '<form method="post" action="' + it.getAction() + '" id="ccm-status-bar-form-' + i + '" ' + (it.useAjaxForm ? 'class="ccm-status-bar-ajax-form"' : '') + '><div class="alert-message alert ' + it.getCSSClass() + '"><button type="button" class="close" data-dismiss="alert">×</button><span>' + it.getDescription() + '</span> <div class="ccm-page-status-bar-buttons">' + buttonStr + '</div></div></form>';
				d += line;
			}
			d += '</div>';
			$('#' + containerID).append(d);
			$('#ccm-page-status-bar .dialog-launch').dialog();
			$('#ccm-page-status-bar .alert').bind('closed', function () {
				$(this).remove();
				var visi = $('#ccm-page-status-bar .alert:visible').length;
				if (visi == 0) {
					$('#ccm-page-status-bar').remove();
				}
			});
			$('#ccm-page-status-bar .ccm-status-bar-ajax-form').ajaxForm({
				dataType: 'json',
				beforeSubmit: function beforeSubmit() {
					jQuery.fn.dialog.showLoader();
				},
				success: function success(r) {
					if (r.redirect) {
						window.location.href = r.redirect;
					}
				}
			});
		}
	}

};

ccm_statusBarItem = function ccm_statusBarItem() {

	this.css = '';
	this.description = '';
	this.buttons = [];
	this.action = '';
	this.useAjaxForm = false;

	this.setCSSClass = function (css) {
		this.css = css;
	};

	this.enableAjaxForm = function () {
		this.useAjaxForm = true;
	};

	this.setDescription = function (description) {
		this.description = description;
	};

	this.getCSSClass = function () {
		return this.css;
	};

	this.getDescription = function () {
		return this.description;
	};

	this.addButton = function (btn) {
		this.buttons.push(btn);
	};

	this.getButtons = function () {
		return this.buttons;
	};

	this.setAction = function (action) {
		this.action = action;
	};

	this.getAction = function () {
		return this.action;
	};
};

ccm_statusBarItemButton = function ccm_statusBarItemButton() {

	this.css = '';
	this.innerbuttonleft = '';
	this.innerbuttonright = '';
	this.label = '';
	this.action = '';
	this.url = '';
	this.attribs = new Array();

	this.setLabel = function (label) {
		this.label = label;
	};

	this.setCSSClass = function (css) {
		this.css = css;
	};

	this.setInnerButtonLeftHTML = function (html) {
		this.innerbuttonleft = html;
	};

	this.setInnerButtonRightHTML = function (html) {
		this.innerbuttonright = html;
	};

	this.setAction = function (action) {
		this.action = action;
	};

	this.getAttributes = function () {
		return this.attribs;
	};

	this.addAttribute = function (key, value) {
		this.attribs.push({ 'key': key, 'value': value });
	};

	this.getAction = function () {
		return this.action;
	};

	this.setURL = function (url) {
		this.url = url;
	};

	this.getURL = function () {
		return this.url;
	};

	this.getCSSClass = function () {
		return this.css;
	};

	this.getInnerButtonLeftHTML = function () {
		return this.innerbuttonleft;
	};

	this.getInnerButtonRightHTML = function () {
		return this.innerbuttonright;
	};

	this.getLabel = function () {
		return this.label;
	};
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * Tab Bar
 */

ccm_activateTabBar = function ccm_activateTabBar(selector) {
	$('#ccm-tab-content-' + selector.find('li[class=active] a').attr('data-tab')).show();
	selector.find('a').unbind().click(function () {
		selector.find('li').removeClass('active');
		$(this).parent().addClass('active');
		selector.find('a').each(function () {
			$('#ccm-tab-content-' + $(this).attr('data-tab')).hide();
		});
		var tab = $(this).attr('data-tab');
		$('#ccm-tab-content-' + tab).show();
		return false;
	});
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * Theme JS
 */

function ccm_previewInternalTheme(cID, themeID, themeName) {
	var ctID = $("input[name=ctID]").val();
	$.fn.dialog.open({
		title: themeName,
		href: CCM_TOOLS_PATH + "/themes/preview?themeID=" + themeID + '&previewCID=' + cID + '&ctID=' + ctID,
		width: '85%',
		modal: false,
		height: '75%'
	});
}

function ccm_previewMarketplaceTheme(cID, themeCID, themeName, themeHandle) {
	var ctID = $("input[name=ctID]").val();

	$.fn.dialog.open({
		title: themeName,
		href: CCM_TOOLS_PATH + "/themes/preview?themeCID=" + themeCID + '&previewCID=' + cID + '&themeHandle=' + encodeURIComponent(themeHandle) + '&ctID=' + ctID,
		width: '85%',
		modal: false,
		height: '75%'
	});
}

ccm_marketplaceDetailShowMore = function ccm_marketplaceDetailShowMore() {
	$(".ccm-marketplace-item-information-more").hide();
	$(".ccm-marketplace-item-information-inner").css('max-height', 'none');
	//ccm_marketplaceBrowserSetupNextAndPrevious();
};

ccm_marketplaceUpdatesShowMore = function ccm_marketplaceUpdatesShowMore(obj) {
	$(obj).parent().hide();
	$(obj).parent().parent().find('.ccm-marketplace-update-changelog').css('max-height', 'none');
};

ccm_enableDesignScrollers = function ccm_enableDesignScrollers() {
	$("a.ccm-scroller-l").hover(function () {
		$(this).find('img').attr('src', CCM_IMAGE_PATH + '/button_scroller_l_active.png');
	}, function () {
		$(this).find('img').attr('src', CCM_IMAGE_PATH + '/button_scroller_l.png');
	});

	$("a.ccm-scroller-r").hover(function () {
		$(this).find('img').attr('src', CCM_IMAGE_PATH + '/button_scroller_r_active.png');
	}, function () {
		$(this).find('img').attr('src', CCM_IMAGE_PATH + '/button_scroller_r.png');
	});

	var numThumbs = 4;
	var thumbWidth = 132;

	$('a.ccm-scroller-r').unbind('click');
	$('a.ccm-scroller-l').unbind('click');

	$('a.ccm-scroller-r').click(function () {
		var item = $(this).parent().children('div.ccm-scroller-inner').children('ul');

		var currentPage = $(this).parent().attr('current-page');
		var currentPos = $(this).parent().attr('current-pos');
		var numPages = $(this).parent().attr('num-pages');

		var migratePos = numThumbs * thumbWidth;
		currentPos = parseInt(currentPos) - migratePos;
		currentPage++;

		$(this).parent().attr('current-page', currentPage);
		$(this).parent().attr('current-pos', currentPos);

		if (currentPage == numPages) {
			$(this).hide();
		}
		if (currentPage > 1) {
			$(this).siblings('a.ccm-scroller-l').show();
		}
		/*
  $(item).animate({
  	left: currentPos + 'px'
  }, 300);*/

		$(item).css('left', currentPos + 'px');
	});

	$('a.ccm-scroller-l').click(function () {
		var item = $(this).parent().children('div.ccm-scroller-inner').children('ul');
		var currentPage = $(this).parent().attr('current-page');
		var currentPos = $(this).parent().attr('current-pos');
		var numPages = $(this).parent().attr('num-pages');

		var migratePos = numThumbs * thumbWidth;
		currentPos = parseInt(currentPos) + migratePos;
		currentPage--;

		$(this).parent().attr('current-page', currentPage);
		$(this).parent().attr('current-pos', currentPos);

		if (currentPage == 1) {
			$(this).hide();
		}

		if (currentPage < numPages) {
			$(this).siblings('a.ccm-scroller-r').show();
		}

		/*
  $(item).animate({
  	left: currentPos + 'px'
  }, 300);*/

		$(item).css('left', currentPos + 'px');
	});
	$('a.ccm-scroller-l').hide();
	$('a.ccm-scroller-r').each(function () {
		if (parseInt($(this).parent().attr('num-pages')) == 1) {
			$(this).hide();
		}
	});

	$("#ccm-select-page-type a").click(function () {
		$("#ccm-select-page-type li").each(function () {
			$(this).removeClass('ccm-item-selected');
		});
		$(this).parent().addClass('ccm-item-selected');
		$("input[name=ctID]").val($(this).attr('ccm-page-type-id'));
	});

	$("#ccm-select-theme a").click(function () {
		$("#ccm-select-theme li").each(function () {
			$(this).removeClass('ccm-item-selected');
		});
		$(this).parent().addClass('ccm-item-selected');
		$("input[name=plID]").val($(this).attr('ccm-theme-id'));
	});
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** 
 * TinyMCE
 */

var ccm_editorCurrentAuxTool = false;
ccm_editorSetupImagePicker = function ccm_editorSetupImagePicker() {
	tinyMCE.activeEditor.focus();
	var bm = tinyMCE.activeEditor.selection.getBookmark();
	ccm_chooseAsset = function ccm_chooseAsset(obj) {
		var mceEd = tinyMCE.activeEditor;
		mceEd.selection.moveToBookmark(bm); // reset selection to the bookmark (ie looses it)
		var args = {};
		tinymce.extend(args, {
			src: obj.filePathInline,
			alt: obj.title,
			width: obj.width,
			height: obj.height
		});

		mceEd.execCommand('mceInsertContent', false, '<img id="__mce_tmp" src="javascript:;" />', { skip_undo: 1 });
		mceEd.dom.setAttribs('__mce_tmp', args);
		mceEd.dom.setAttrib('__mce_tmp', 'id', '');
		mceEd.undoManager.add();
	};

	return false;
};

ccm_editorSetupFilePicker = function ccm_editorSetupFilePicker() {
	tinyMCE.activeEditor.focus();
	var bm = tinyMCE.activeEditor.selection.getBookmark();
	ccm_chooseAsset = function ccm_chooseAsset(obj) {
		var mceEd = tinyMCE.activeEditor;
		mceEd.selection.moveToBookmark(bm); // reset selection to the bookmark (ie looses it)
		var selectedText = mceEd.selection.getContent();

		if (selectedText != '') {
			// make a link, let mce deal with the text of the link..
			mceEd.execCommand('mceInsertLink', false, {
				href: obj.filePath,
				title: obj.title,
				target: null,
				'class': 'file ext-' + obj.filePathDirect.split('.').pop()
			});
		} else {
			// insert a normal link
			var html = '<a href="' + obj.filePath + '" class="file ext-' + obj.filePathDirect.split('.').pop() + '">' + obj.title + '<\/a>';
			tinyMCE.execCommand('mceInsertRawHTML', false, html, true);
		}
	};
	return false;
};

ccm_editorSitemapOverlay = function ccm_editorSitemapOverlay() {

	tinyMCE.activeEditor.focus();
	var bm = tinyMCE.activeEditor.selection.getBookmark();

	$.fn.dialog.open({
		title: ccmi18n_sitemap.choosePage,
		href: CCM_TOOLS_PATH + '/sitemap_search_selector.php?sitemap_select_mode=select_page&callback=ccm_editorSelectSitemapNode',
		width: '90%',
		modal: false,
		height: '70%'
	});

	ccm_editorSelectSitemapNode = function ccm_editorSelectSitemapNode(cID, cName) {
		var mceEd = tinyMCE.activeEditor;
		mceEd.selection.moveToBookmark(bm);
		var selectedText = mceEd.selection.getContent();

		var url = CCM_BASE_URL + CCM_DISPATCHER_FILENAME + '?cID=' + cID;

		if (selectedText != '') {
			mceEd.execCommand('mceInsertLink', false, {
				href: url,
				title: cName,
				target: null,
				'class': null
			});
		} else {
			var selectedText = '<a href="' + CCM_BASE_URL + CCM_DISPATCHER_FILENAME + '?cID=' + cID + '" title="' + cName + '">' + cName + '<\/a>';
			tinyMCE.execCommand('mceInsertRawHTML', false, selectedText, true);
		}
	};
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


$(function () {
	if ($("#ccm-toolbar").length > 0) {
		ccm_intelligentSearchActivateResults();
		ccm_intelligentSearchDoRemoteCalls($('#ccm-nav-intelligent-search').val());
	}
});

ccm_togglePopover = function ccm_togglePopover(e, link) {
	if ($('.popover').is(':visible')) {
		$(link).popover('hide');
	} else {
		$(link).popover('show');
		e.stopPropagation();
		$(window).bind('click.popover', function () {
			$(link).popover('hide');
			$(window).unbind('click.popover');
		});
	}
};

ccm_toggleQuickNav = function ccm_toggleQuickNav(cID, token) {
	var l = $("#ccm-add-to-quick-nav");
	if (l.hasClass('ccm-icon-favorite-selected')) {
		l.removeClass('ccm-icon-favorite-selected').addClass('ccm-icon-favorite');
	} else {
		l.removeClass('ccm-icon-favorite').addClass('ccm-icon-favorite-selected');
	}
	var accepter = $('#ccm-nav-dashboard');
	var title = l.parent().parent().parent().find('h3');
	title.css('display', 'inline');
	title.effect("transfer", { to: accepter, 'easing': 'easeOutExpo' }, 600);
	$.get(CCM_TOOLS_PATH + '/dashboard/add_to_quick_nav', {
		'cID': cID,
		'token': token
	}, function (r) {
		var div = $('<div />').html(r);
		$('#ccm-intelligent-search-results').html(div.find('#ccm-intelligent-search-results').html());
		$('#ccm-dashboard-overlay').html(div.find('#ccm-dashboard-overlay').html());
		$('#ccm-nav-intelligent-search').data('liveUpdate').setupCache();
	});
};

var ccm_hideToolbarMenusTimer = false;
ccm_hideToolbarMenus = function ccm_hideToolbarMenus() {
	$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
	$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
	$('#ccm-edit-overlay').fadeOut(90, 'easeOutExpo');
	$('#ccm-dashboard-overlay').fadeOut(90, 'easeOutExpo');
	clearTimeout(ccm_hideToolbarMenusTimer);
};

ccm_activateToolbar = function ccm_activateToolbar() {

	$("#ccm-dashboard-overlay").css('visibility', 'visible').hide();

	$("#ccm-nav-intelligent-search-wrapper").click(function () {
		$("#ccm-nav-intelligent-search").focus();
	});
	$("#ccm-nav-intelligent-search").focus(function () {
		$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
		$(this).parent().addClass("ccm-system-nav-selected");
		if ($("#ccm-dashboard-overlay").is(':visible')) {
			$('#ccm-dashboard-overlay').fadeOut(90, 'easeOutExpo');
			$(window).unbind('click.dashboard-nav');
		}
	});

	$(".ccm-nav-edit-mode-active").click(function () {
		void 0;
		return false;
	});

	$("#ccm-edit-overlay,#ccm-dashboard-overlay").mouseover(function () {
		clearTimeout(ccm_hideToolbarMenusTimer);
	});

	$("#ccm-nav-dashboard").hoverIntent(function () {
		clearTimeout(ccm_hideToolbarMenusTimer);
		$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
		$(this).parent().addClass('ccm-system-nav-selected');
		$("#ccm-nav-intelligent-search").val('');
		$("#ccm-intelligent-search-results").fadeOut(90, 'easeOutExpo');

		if ($('#ccm-edit-overlay').is(':visible')) {
			$('#ccm-edit-overlay').fadeOut(90, 'easeOutExpo');
			$(window).unbind('click.ccm-edit');
		}

		/*if ($('#ccm-dashboard-overlay').is(':visible')) {
  	$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
  	$('#ccm-dashboard-overlay').fadeOut(90, 'easeOutExpo');
  	$(window).unbind('click.dashboard-nav');
  } else {*/
		$("#ccm-dashboard-overlay").fadeIn(160, 'easeOutExpo');
		$(window).bind('click.dashboard-nav', function () {
			$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
			$('#ccm-dashboard-overlay').fadeOut(90, 'easeOutExpo');
			$(window).unbind('click.dashboard-nav');
		});
		//}
		return false;
	}, function () {});

	$("#ccm-nav-dashboard,#ccm-dashboard-overlay,#ccm-nav-edit,#ccm-edit-overlay").mouseout(function () {
		ccm_hideToolbarMenusTimer = setTimeout(function () {
			ccm_hideToolbarMenus();
		}, 1500);
	});

	$("#ccm-nav-intelligent-search").bind('keydown.ccm-intelligent-search', function (e) {
		if (e.keyCode == 13 || e.keyCode == 40 || e.keyCode == 38) {
			e.preventDefault();
			e.stopPropagation();

			if (e.keyCode == 13 && $("a.ccm-intelligent-search-result-selected").length > 0) {
				var href = $("a.ccm-intelligent-search-result-selected").attr('href');
				if (!href || href == '#' || href == 'javascript:void(0)') {
					$("a.ccm-intelligent-search-result-selected").click();
				} else {
					window.location.href = href;
				}
			}
			var visibleitems = $("#ccm-intelligent-search-results li:visible");
			var sel;

			if (e.keyCode == 40 || e.keyCode == 38) {
				$.each(visibleitems, function (i, item) {
					if ($(item).children('a').hasClass('ccm-intelligent-search-result-selected')) {
						if (e.keyCode == 38) {
							io = visibleitems[i - 1];
						} else {
							io = visibleitems[i + 1];
						}
						sel = $(io).find('a');
					}
				});
				if (sel && sel.length > 0) {
					$("a.ccm-intelligent-search-result-selected").removeClass();
					$(sel).addClass('ccm-intelligent-search-result-selected');
				}
			}
		}
	});

	$("#ccm-nav-intelligent-search").bind('keyup.ccm-intelligent-search', function (e) {
		ccm_intelligentSearchDoRemoteCalls($(this).val());
	});

	$("#ccm-nav-intelligent-search").blur(function () {
		$(this).parent().removeClass("ccm-system-nav-selected");
	});

	$("#ccm-nav-intelligent-search").liveUpdate('ccm-intelligent-search-results', 'intelligent-search');
	$("#ccm-nav-intelligent-search").bind('click', function (e) {
		if (this.value == "") {
			$("#ccm-intelligent-search-results").hide();
		}
	});

	$("#ccm-toolbar-nav-properties").dialog();
	$("#ccm-toolbar-nav-preview-as-user").dialog();
	$("#ccm-toolbar-add-subpage").dialog();
	$("#ccm-toolbar-nav-versions").dialog();
	$("#ccm-toolbar-nav-design").dialog();
	$("#ccm-toolbar-nav-permissions").dialog();
	$("#ccm-toolbar-nav-speed-settings").dialog();
	$("#ccm-toolbar-nav-move-copy").dialog();
	$("#ccm-toolbar-nav-delete").dialog();

	$("#ccm-edit-overlay,#ccm-dashboard-overlay").click(function (e) {
		e.stopPropagation();
	});

	$("#ccm-nav-edit").hoverIntent(function () {
		clearTimeout(ccm_hideToolbarMenusTimer);
		$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
		$(this).parent().addClass('ccm-system-nav-selected');
		$("#ccm-nav-intelligent-search").val('');
		$("#ccm-intelligent-search-results").fadeOut(90, 'easeOutExpo');

		if ($('#ccm-dashboard-overlay').is(':visible')) {
			$('#ccm-dashboard-overlay').fadeOut(90, 'easeOutExpo');
			$(window).unbind('click.dashboard-nav');
		}

		/*if ($('#ccm-edit-overlay').is(':visible')) {
  	$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
  	$('#ccm-edit-overlay').fadeOut(90, 'easeOutExpo');
  	$(window).unbind('click.ccm-edit');
  } else {*/
		setTimeout("$('#ccm-check-in-comments').focus();", 300);
		$("#ccm-check-in-preview").click(function () {
			$("#ccm-approve-field").val('PREVIEW');
			$("#ccm-check-in").submit();
		});

		$("#ccm-check-in-discard").click(function () {
			$("#ccm-approve-field").val('DISCARD');
			$("#ccm-check-in").submit();
		});

		$("#ccm-check-in-publish").click(function () {
			$("#ccm-approve-field").val('APPROVE');
			$("#ccm-check-in").submit();
		});
		var posX = $(this).position().left;
		if (posX > 0) {
			posX = posX - 20; // BACK it up!
		}
		$("#ccm-edit-overlay").css('left', posX + "px");
		$("#ccm-edit-overlay").fadeIn(160, 'easeOutExpo', function () {
			$(this).find('a').click(function () {
				ccm_toolbarCloseEditMenu();
			});
		});
		$(window).bind('click.ccm-edit', function () {
			ccm_toolbarCloseEditMenu();
		});
		//}
		return false;
	}, function () {});
};
var ajaxtimer = null;
var ajaxquery = null;

ccm_toolbarCloseEditMenu = function ccm_toolbarCloseEditMenu() {
	$(".ccm-system-nav-selected").removeClass('ccm-system-nav-selected');
	$('#ccm-edit-overlay').fadeOut(90, 'easeOutExpo');
	$(window).unbind('click.ccm-edit');
};

ccm_intelligentSearchActivateResults = function ccm_intelligentSearchActivateResults() {
	if ($("#ccm-intelligent-search-results div:visible").length == 0) {
		$("#ccm-intelligent-search-results").hide();
	}
	$("#ccm-intelligent-search-results a").hover(function () {
		$('a.ccm-intelligent-search-result-selected').removeClass();
		$(this).addClass('ccm-intelligent-search-result-selected');
	}, function () {
		$(this).removeClass('ccm-intelligent-search-result-selected');
	});
};

ccm_intelligentSearchDoRemoteCalls = function ccm_intelligentSearchDoRemoteCalls(query) {
	query = jQuery.trim(query);
	if (!query) {
		return;
	}
	if (query.length > 2) {
		if (query == ajaxquery) {
			return;
		}

		if (ajaxtimer) {
			window.clearTimeout(ajaxtimer);
		}
		ajaxquery = query;
		ajaxtimer = window.setTimeout(function () {
			ajaxtimer = null;
			$("#ccm-intelligent-search-results-list-marketplace").parent().show();
			$("#ccm-intelligent-search-results-list-help").parent().show();
			$("#ccm-intelligent-search-results-list-your-site").parent().show();
			$("#ccm-intelligent-search-results-list-marketplace").parent().addClass('ccm-intelligent-search-results-module-loading');
			$("#ccm-intelligent-search-results-list-help").parent().addClass('ccm-intelligent-search-results-module-loading');
			$("#ccm-intelligent-search-results-list-your-site").parent().addClass('ccm-intelligent-search-results-module-loading');

			$.getJSON(CCM_TOOLS_PATH + '/marketplace/intelligent_search', {
				'q': ajaxquery
			}, function (r) {
				$("#ccm-intelligent-search-results-list-marketplace").parent().removeClass('ccm-intelligent-search-results-module-loading');
				$("#ccm-intelligent-search-results-list-marketplace").html('');
				for (i = 0; i < r.length; i++) {
					var rr = r[i];
					var _onclick = "ccm_getMarketplaceItemDetails(" + rr.mpID + ")";
					$("#ccm-intelligent-search-results-list-marketplace").append('<li><a href="javascript:void(0)" onclick="' + _onclick + '"><img src="' + rr.img + '" />' + rr.name + '</a></li>');
				}
				if (r.length == 0) {
					$("#ccm-intelligent-search-results-list-marketplace").parent().hide();
				}
				if ($('.ccm-intelligent-search-result-selected').length == 0) {
					$("#ccm-intelligent-search-results").find('li a').removeClass('ccm-intelligent-search-result-selected');
					$("#ccm-intelligent-search-results li:visible a:first").addClass('ccm-intelligent-search-result-selected');
				}
				ccm_intelligentSearchActivateResults();
			}).error(function () {
				$("#ccm-intelligent-search-results-list-marketplace").parent().hide();
			});

			$.getJSON(CCM_TOOLS_PATH + '/get_remote_help', {
				'q': ajaxquery
			}, function (r) {

				$("#ccm-intelligent-search-results-list-help").parent().removeClass('ccm-intelligent-search-results-module-loading');
				$("#ccm-intelligent-search-results-list-help").html('');
				for (i = 0; i < r.length; i++) {
					var rr = r[i];
					$("#ccm-intelligent-search-results-list-help").append('<li><a href="' + rr.href + '">' + rr.name + '</a></li>');
				}
				if (r.length == 0) {
					$("#ccm-intelligent-search-results-list-help").parent().hide();
				}
				if ($('.ccm-intelligent-search-result-selected').length == 0) {
					$("#ccm-intelligent-search-results").find('li a').removeClass('ccm-intelligent-search-result-selected');
					$("#ccm-intelligent-search-results li:visible a:first").addClass('ccm-intelligent-search-result-selected');
				}
				ccm_intelligentSearchActivateResults();
			}).error(function () {
				$("#ccm-intelligent-search-results-list-help").parent().hide();
			});

			$.getJSON(CCM_TOOLS_PATH + '/pages/intelligent_search', {
				'q': ajaxquery
			}, function (r) {

				$("#ccm-intelligent-search-results-list-your-site").parent().removeClass('ccm-intelligent-search-results-module-loading');
				$("#ccm-intelligent-search-results-list-your-site").html('');
				for (i = 0; i < r.length; i++) {
					var rr = r[i];
					$("#ccm-intelligent-search-results-list-your-site").append('<li><a href="' + rr.href + '">' + rr.name + '</a></li>');
				}
				if (r.length == 0) {
					$("#ccm-intelligent-search-results-list-your-site").parent().hide();
				}
				if ($('.ccm-intelligent-search-result-selected').length == 0) {
					$("#ccm-intelligent-search-results").find('li a').removeClass('ccm-intelligent-search-result-selected');
					$("#ccm-intelligent-search-results li:visible a:first").addClass('ccm-intelligent-search-result-selected');
				}
				ccm_intelligentSearchActivateResults();
			}).error(function () {
				$("#ccm-intelligent-search-results-list-your-site").parent().hide();
			});
		}, 500);
	}
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * UI
 */

var ccm_arrangeMode = false;
var ccm_selectedDomID = false;
var ccm_isBlockError = false;
var ccm_activeMenu = false;
var ccm_blockError = false;

ccm_menuInit = function ccm_menuInit(obj) {

	if (CCM_EDIT_MODE && !CCM_ARRANGE_MODE) {
		switch (obj.type) {
			case "BLOCK":
				$("#b" + obj.bID + "-" + obj.aID).mouseover(function (e) {
					ccm_activate(obj, "#b" + obj.bID + "-" + obj.aID);
				});
				break;
			case "AREA":
				$("#a" + obj.aID + "controls").mouseover(function (e) {
					ccm_activate(obj, "#a" + obj.aID + "controls");
				});
				break;
		}
	}
};

ccm_showBlockMenu = function ccm_showBlockMenu(obj, e) {
	ccm_hideMenus();
	e.stopPropagation();
	ccm_activeMenu = true;

	// now, check to see if this menu has been made
	var bobj = document.getElementById("ccm-block-menu" + obj.bID + "-" + obj.aID);

	if (!bobj) {
		// create the 1st instance of the menu
		el = document.createElement("DIV");
		el.id = "ccm-block-menu" + obj.bID + "-" + obj.aID;
		el.className = "ccm-menu ccm-ui";
		el.style.display = "block";
		el.style.visibility = "hidden";
		document.body.appendChild(el);

		bobj = $("#ccm-block-menu" + obj.bID + "-" + obj.aID);
		bobj.css("position", "absolute");

		//contents of menu
		var html = '<div class="popover"><div class="arrow"></div><div class="inner"><div class="content">';
		html += '<ul>';
		//html += '<li class="header"></li>';
		if (obj.canWrite && obj.hasEditDialog) {
			html += obj.editInline ? '<li><a class="ccm-menu-icon ccm-icon-edit-menu" onclick="ccm_hideMenus()" id="menuEdit' + obj.bID + '-' + obj.aID + '" href="' + CCM_DISPATCHER_FILENAME + '?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=edit#_edit' + obj.bID + '">' + ccmi18n.editBlock + '</a></li>' : '<li><a class="ccm-menu-icon ccm-icon-edit-menu" onclick="ccm_hideMenus()" dialog-title="' + ccmi18n.editBlockWithName.replace(/%s/g, obj.btName) + '" dialog-append-buttons="true" dialog-modal="false" dialog-on-close="ccm_blockWindowAfterClose()" dialog-width="' + obj.width + '" dialog-height="' + obj.height + '" id="menuEdit' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=edit">' + ccmi18n.editBlock + '</a></li>';
		}
		if (obj.canWriteStack) {
			html += '<li><a class="ccm-menu-icon ccm-icon-edit-menu" id="menuEdit' + obj.bID + '-' + obj.aID + '" href="' + CCM_DISPATCHER_FILENAME + '/dashboard/blocks/stacks/-/view_details/' + obj.stID + '">' + ccmi18n.editStackContents + '</a></li>';
			html += '<li class="header"></li>';
		}
		if (obj.canCopyToScrapbook) {
			html += '<li><a class="ccm-menu-icon ccm-icon-clipboard-menu" id="menuAddToScrapbook' + obj.bID + '-' + obj.aID + '" href="#" onclick="javascript:ccm_addToScrapbook(' + obj.cID + ',' + obj.bID + ',\'' + encodeURIComponent(obj.arHandle) + '\');return false;">' + ccmi18n.copyBlockToScrapbook + '</a></li>';
		}

		if (obj.canArrange) {
			html += '<li><a class="ccm-menu-icon ccm-icon-move-menu" id="menuArrange' + obj.bID + '-' + obj.aID + '" href="javascript:ccm_arrangeInit()">' + ccmi18n.arrangeBlock + '</a></li>';
		}
		if (obj.canDelete) {
			html += '<li><a class="ccm-menu-icon ccm-icon-delete-menu" id="menuDelete' + obj.bID + '-' + obj.aID + '" href="#" onclick="javascript:ccm_deleteBlock(' + obj.cID + ',' + obj.bID + ',' + obj.aID + ', \'' + encodeURIComponent(obj.arHandle) + '\', \'' + obj.deleteMessage + '\');return false;">' + ccmi18n.deleteBlock + '</a></li>';
		}
		if (obj.canDesign || obj.canEditBlockCustomTemplate) {
			html += '<li class="ccm-menu-separator"></li>';
		}
		if (obj.canDesign) {
			html += '<li><a class="ccm-menu-icon ccm-icon-design-menu" onclick="ccm_hideMenus()" dialog-modal="false" dialog-title="' + ccmi18n.changeBlockBaseStyle + '" dialog-width="475" dialog-height="500" dialog-append-buttons="true" id="menuChangeCSS' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=block_css&modal=true&width=300&height=100" title="' + ccmi18n.changeBlockCSS + '">' + ccmi18n.changeBlockCSS + '</a></li>';
		}
		if (obj.canEditBlockCustomTemplate) {
			html += '<li><a class="ccm-menu-icon ccm-icon-custom-template-menu" onclick="ccm_hideMenus()" dialog-append-buttons="true" dialog-modal="false" dialog-title="' + ccmi18n.changeBlockTemplate + '" dialog-width="300" dialog-height="275" id="menuChangeTemplate' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=template&modal=true&width=300&height=275" title="' + ccmi18n.changeBlockTemplate + '">' + ccmi18n.changeBlockTemplate + '</a></li>';
		}

		if (obj.canModifyGroups || obj.canScheduleGuestAccess || obj.canAliasBlockOut || obj.canSetupComposer) {
			html += '<li class="ccm-menu-separator"></li>';
		}

		if (obj.canModifyGroups) {
			html += '<li><a title="' + ccmi18n.setBlockPermissions + '" onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-permissions-menu" dialog-width="420" dialog-height="350" id="menuBlockGroups' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=groups" dialog-append-buttons="true" dialog-title="' + ccmi18n.setBlockPermissions + '">' + ccmi18n.setBlockPermissions + '</a></li>';
		}
		if (obj.canScheduleGuestAccess) {
			html += '<li><a title="' + ccmi18n.scheduleGuestAccess + '" onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-clock-menu" dialog-width="500" dialog-height="220" id="menuBlockViewClock' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=guest_timed_access" dialog-append-buttons="true" dialog-title="' + ccmi18n.scheduleGuestAccess + '">' + ccmi18n.scheduleGuestAccess + '</a></li>';
		}
		if (obj.canAliasBlockOut) {
			html += '<li><a class="ccm-menu-icon ccm-icon-setup-child-pages-menu" dialog-append-buttons="true" onclick="ccm_hideMenus()" dialog-width="550" dialog-height="450" id="menuBlockAliasOut' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=child_pages" dialog-title="' + ccmi18n.setBlockAlias + '">' + ccmi18n.setBlockAlias + '</a></li>';
		}
		if (obj.canSetupComposer) {
			html += '<li><a class="ccm-menu-icon ccm-icon-setup-composer-menu" dialog-append-buttons="true" onclick="ccm_hideMenus()" dialog-width="450" dialog-modal="false" dialog-height="130" id="menuBlockSetupComposer' + obj.bID + '-' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_block_popup.php?cID=' + obj.cID + '&bID=' + obj.bID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&btask=composer" dialog-title="' + ccmi18n.setBlockComposerSettings + '">' + ccmi18n.setBlockComposerSettings + '</a></li>';
		}

		html += '</ul>';
		html += '</div></div></div>';
		bobj.append(html);

		// add dialog elements where necessary
		if (obj.canWrite && !obj.editInline) {
			$('a#menuEdit' + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canEditBlockCustomTemplate) {
			$('a#menuChangeTemplate' + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canDesign) {
			$('a#menuChangeCSS' + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canAliasBlockOut) {
			$('a#menuBlockAliasOut' + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canSetupComposer) {
			$('a#menuBlockSetupComposer' + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canModifyGroups) {
			$("#menuBlockGroups" + obj.bID + '-' + obj.aID).dialog();
		}
		if (obj.canScheduleGuestAccess) {
			$("#menuBlockViewClock" + obj.bID + '-' + obj.aID).dialog();
		}
	} else {
		bobj = $("#ccm-block-menu" + obj.bID + '-' + obj.aID);
	}

	ccm_fadeInMenu(bobj, e);
};

ccm_reloadAreaMenuPermissions = function ccm_reloadAreaMenuPermissions(aID, cID) {
	var config = window['ccm_areaMenuObj' + aID];
	if (config) {
		var action = CCM_TOOLS_PATH + '/reload_area_permissions_js.php' + '?arHandle=' + config.arHandle + '&cID=' + cID + '&maximumBlocks=' + config.maximumBlocks;
		$.getScript(action);
	}
};

ccm_openAreaAddBlock = function ccm_openAreaAddBlock(arHandle, addOnly, cID) {
	if (!addOnly) {
		addOnly = 0;
	}

	if (!cID) {
		cID = CCM_CID;
	}

	$.fn.dialog.open({
		title: ccmi18n.blockAreaMenu,
		href: CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + cID + '&atask=add&arHandle=' + arHandle + '&addOnly=' + addOnly,
		width: 550,
		modal: false,
		height: 380
	});
};

ccm_showAreaMenu = function ccm_showAreaMenu(obj, e) {
	var addOnly = obj.addOnly ? 1 : 0;
	ccm_activeMenu = true;
	if (e.shiftKey) {
		ccm_openAreaAddBlock(obj.arHandle, addOnly);
	} else {
		e.stopPropagation();

		// now, check to see if this menu has been made
		var aobj = document.getElementById("ccm-area-menu" + obj.aID);

		if (!aobj) {
			// create the 1st instance of the menu
			el = document.createElement("DIV");
			el.id = "ccm-area-menu" + obj.aID;
			el.className = "ccm-menu ccm-ui";
			el.style.display = "block";
			el.style.visibility = "hidden";
			document.body.appendChild(el);

			aobj = $("#ccm-area-menu" + obj.aID);
			aobj.css("position", "absolute");

			//contents of menu
			var html = '<div class="popover"><div class="arrow"></div><div class="inner"><div class="content">';
			html += '<ul>';
			//html += '<li class="header"></li>';
			if (obj.canAddBlocks) {
				html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-add-block-menu" dialog-title="' + ccmi18n.addBlockNew + '" dialog-modal="false" dialog-width="550" dialog-height="380" id="menuAddNewBlock' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=add&addOnly=' + addOnly + '">' + ccmi18n.addBlockNew + '</a></li>';
				html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-clipboard-menu" dialog-title="' + ccmi18n.addBlockPaste + '" dialog-modal="false" dialog-width="550" dialog-height="380" id="menuAddPaste' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=paste&addOnly=' + addOnly + '">' + ccmi18n.addBlockPaste + '</a></li>';
			}
			if (obj.canAddStacks) {
				html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-add-stack-menu" dialog-title="' + ccmi18n.addBlockStack + '" dialog-modal="false" dialog-width="550" dialog-height="380" id="menuAddNewStack' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=add_from_stack&addOnly=' + addOnly + '">' + ccmi18n.addBlockStack + '</a></li>';
			}
			if (obj.canAddBlocks && (obj.canDesign || obj.canLayout)) {
				html += '<li class="ccm-menu-separator"></li>';
			}
			if (obj.canLayout) {
				html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-add-layout-menu" dialog-title="' + ccmi18n.addAreaLayout + '" dialog-modal="false" dialog-width="400" dialog-height="300" dialog-append-buttons="true" id="menuAreaLayout' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=layout">' + ccmi18n.addAreaLayout + '</a></li>';
			}
			if (obj.canDesign) {
				html += '<li><a onclick="ccm_hideMenus()" class="ccm-menu-icon ccm-icon-design-menu" dialog-title="' + ccmi18n.changeAreaCSS + '" dialog-modal="false" dialog-append-buttons="true" dialog-width="475" dialog-height="500" id="menuAreaStyle' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=design">' + ccmi18n.changeAreaCSS + '</a></li>';
			}
			if (obj.canWrite && obj.canModifyGroups) {
				html += '<li class="ccm-menu-separator"></li>';
			}
			if (obj.canModifyGroups) {
				html += '<li><a onclick="ccm_hideMenus()" title="' + ccmi18n.setAreaPermissions + '" dialog-append-buttons="true" dialog-modal="false" class="ccm-menu-icon ccm-icon-permissions-menu" dialog-width="420" dialog-height="425" id="menuAreaGroups' + obj.aID + '" href="' + CCM_TOOLS_PATH + '/edit_area_popup.php?cID=' + CCM_CID + '&arHandle=' + encodeURIComponent(obj.arHandle) + '&atask=groups" dialog-title="' + ccmi18n.setAreaPermissions + '">' + ccmi18n.setAreaPermissions + '</a></li>';
			}

			html += '</ul>';
			html += '</div></div></div>';
			aobj.append(html);

			// add dialog elements where necessary
			if (obj.canAddBlocks) {
				$('a#menuAddNewBlock' + obj.aID).dialog();
				$('a#menuAddPaste' + obj.aID).dialog();
			}
			if (obj.canAddStacks) {
				$('a#menuAddNewStack' + obj.aID).dialog();
			}
			if (obj.canLayout) {
				$('a#menuAreaLayout' + obj.aID).dialog();
			}
			if (obj.canDesign) {
				$('a#menuAreaStyle' + obj.aID).dialog();
			}
			if (obj.canModifyGroups) {
				$('a#menuAreaGroups' + obj.aID).dialog();
			}
		} else {
			aobj = $("#ccm-area-menu" + obj.aID);
		}

		ccm_fadeInMenu(aobj, e);
	}
};

ccm_hideHighlighter = function ccm_hideHighlighter() {
	$("#ccm-highlighter").css('display', 'none');
	$('div.ccm-menu-hotspot-active').removeClass('ccm-menu-hotspot-active');
};

ccm_addError = function ccm_addError(err) {
	if (!ccm_isBlockError) {
		ccm_blockError = '';
		ccm_blockError += '<ul>';
	}

	ccm_isBlockError = true;
	ccm_blockError += "<li>" + err + "</li>";
};

ccm_resetBlockErrors = function ccm_resetBlockErrors() {
	ccm_isBlockError = false;
	ccm_blockError = "";
};

ccm_addToScrapbook = function ccm_addToScrapbook(cID, bID, arHandle) {
	ccm_mainNavDisableDirectExit();
	// got to grab the message too, eventually
	ccm_hideHighlighter();
	$.ajax({
		type: 'POST',
		url: CCM_TOOLS_PATH + '/pile_manager.php',
		data: 'cID=' + cID + '&bID=' + bID + '&arHandle=' + arHandle + '&btask=add&scrapbookName=userScrapbook',
		success: function success(resp) {
			ccm_hideHighlighter();
			ccmAlert.hud(ccmi18n.copyBlockToScrapbookMsg, 2000, 'add', ccmi18n.copyBlockToScrapbook);
		} });
};

ccm_deleteBlock = function ccm_deleteBlock(cID, bID, aID, arHandle, msg) {
	if (confirm(msg)) {
		ccm_mainNavDisableDirectExit();
		// got to grab the message too, eventually
		ccm_hideHighlighter();
		$d = $("#b" + bID + '-' + aID);
		$d.hide();
		ccmAlert.hud(ccmi18n.deleteBlockMsg, 2000, 'delete_small', ccmi18n.deleteBlock);
		$.ajax({
			type: 'POST',
			url: CCM_DISPATCHER_FILENAME,
			data: 'cID=' + cID + '&ccm_token=' + CCM_SECURITY_TOKEN + '&isAjax=true&btask=remove&bID=' + bID + '&arHandle=' + arHandle
		});
		ccm_reloadAreaMenuPermissions(aID, cID);
		if (typeof window.ccm_parseBlockResponsePost == 'function') {
			ccm_parseBlockResponsePost({});
		}
	}
};

ccm_hideMenus = function ccm_hideMenus() {
	/* 1st, hide all items w/the css menu class */
	ccm_activeMenu = false;
	$("div.ccm-menu").hide();
	$("div.ccm-menu").css('visibility', 'hidden');
	$("div.ccm-menu").show();
};

ccm_parseBlockResponse = function ccm_parseBlockResponse(r, currentBlockID, task) {
	try {
		r = r.replace(/(<([^>]+)>)/ig, ""); // because some plugins add bogus HTML after our JSON requests and screw everything up
		resp = eval('(' + r + ')');
		if (resp.error == true) {
			var message = '<ul>';
			for (i = 0; i < resp.response.length; i++) {
				message += '<li>' + resp.response[i] + '<\/li>';
			}
			message += '<\/ul>';
			ccmAlert.notice(ccmi18n.error, message);
		} else {
			ccm_blockWindowClose();
			if (resp.cID) {
				cID = resp.cID;
			} else {
				cID = CCM_CID;
			}
			var action = CCM_TOOLS_PATH + '/edit_block_popup?cID=' + cID + '&bID=' + resp.bID + '&arHandle=' + encodeURIComponent(resp.arHandle) + '&btask=view_edit_mode';
			$.get(action, function (r) {
				if (task == 'add') {
					if ($("#a" + resp.aID + " div.ccm-area-styles-a" + resp.aID).length > 0) {
						$("#a" + resp.aID + " div.ccm-area-styles-a" + resp.aID).append(r);
					} else {
						$("#a" + resp.aID).append(r);
					}
				} else {
					$('#b' + currentBlockID + '-' + resp.aID).before(r).remove();
				}
				jQuery.fn.dialog.hideLoader();
				ccm_mainNavDisableDirectExit();
				if (task == 'add') {
					ccmAlert.hud(ccmi18n.addBlockMsg, 2000, 'add', ccmi18n.addBlock);
					jQuery.fn.dialog.closeAll();
				} else {
					ccmAlert.hud(ccmi18n.updateBlockMsg, 2000, 'success', ccmi18n.updateBlock);
				}
				if (typeof window.ccm_parseBlockResponsePost == 'function') {
					ccm_parseBlockResponsePost(resp);
				}
			});
			ccm_reloadAreaMenuPermissions(resp.aID, cID);
		}
	} catch (e) {
		ccmAlert.notice(ccmi18n.error, r);
	}
};

ccm_mainNavDisableDirectExit = function ccm_mainNavDisableDirectExit(disableShow) {
	// make sure that exit edit mode is enabled
	$("#ccm-exit-edit-mode-direct").hide();
	if (!disableShow) {
		$("#ccm-exit-edit-mode-comment").show();
	}
};

ccm_setupBlockForm = function ccm_setupBlockForm(form, currentBlockID, task) {
	form.ajaxForm({
		type: 'POST',
		iframe: true,
		beforeSubmit: function beforeSubmit() {
			ccm_hideHighlighter();
			$('input[name=ccm-block-form-method]').val('AJAX');
			jQuery.fn.dialog.showLoader();
			return ccm_blockFormSubmit();
		},
		success: function success(r) {
			ccm_parseBlockResponse(r, currentBlockID, task);
		}
	});
};

ccm_activate = function ccm_activate(obj, domID) {
	if (ccm_arrangeMode || ccm_activeMenu) {
		return false;
	}

	if (ccm_selectedDomID) {
		$(ccm_selectedDomID).removeClass('ccm-menu-hotspot-active');
	}

	aobj = $(domID);
	aobj.addClass('ccm-menu-hotspot-active');
	ccm_selectedDomID = domID;

	offs = aobj.offset();

	$("#ccm-highlighter").hide();

	$("#ccm-highlighter").css("width", aobj.outerWidth());
	$("#ccm-highlighter").css("height", aobj.outerHeight());
	$("#ccm-highlighter").css("top", offs.top);
	$("#ccm-highlighter").css("left", offs.left);
	$("#ccm-highlighter").fadeIn(120, 'easeOutExpo');
	/*
 $("#ccmMenuHighlighter").mouseover(
 	function() {clearTimeout(ccm_deactivateTimer)}
 );
 */
	$("#ccm-highlighter").mouseout(function (e) {
		if (!ccm_activeMenu) {
			if (!e.target) {
				ccm_hideHighlighter();
			} else if ($(e.toElement).parents('div.ccm-menu').length == 0) {
				ccm_hideHighlighter();
			}
		}
	});

	$("#ccm-highlighter").unbind('click');
	$("#ccm-highlighter").click(function (e) {
		switch (obj.type) {
			case "BLOCK":
				ccm_showBlockMenu(obj, e);
				break;
			case "AREA":
				ccm_showAreaMenu(obj, e);
				break;
		}
	});
};

ccm_editInit = function ccm_editInit() {

	document.write = function () {
		// stupid javascript in html blocks
		void 0;
	};

	$(document.body).append('<div style="position: absolute; display:none" id="ccm-highlighter">&nbsp;</div>');
	$(document).click(function () {
		ccm_hideMenus();
	});

	$("div.ccm-menu a").bind('click.hide-menu', function (e) {
		ccm_hideMenus();
		return false;
	});
};

ccm_triggerSelectUser = function ccm_triggerSelectUser(uID, uName, uEmail) {
	alert(uID);
	alert(uName);
	alert(uEmail);
};

ccm_setupUserSearch = function ccm_setupUserSearch(searchInstance) {
	$(".chosen-select").chosen(ccmi18n_chosen);
	$("#ccm-user-list-cb-all").click(function () {
		if ($(this).prop('checked') == true) {
			$('.ccm-list-record td.ccm-user-list-cb input[type=checkbox]').attr('checked', true);
			$("#ccm-user-list-multiple-operations").attr('disabled', false);
		} else {
			$('.ccm-list-record td.ccm-user-list-cb input[type=checkbox]').attr('checked', false);
			$("#ccm-user-list-multiple-operations").attr('disabled', true);
		}
	});
	$("td.ccm-user-list-cb input[type=checkbox]").click(function (e) {
		if ($("td.ccm-user-list-cb input[type=checkbox]:checked").length > 0) {
			$("#ccm-user-list-multiple-operations").attr('disabled', false);
		} else {
			$("#ccm-user-list-multiple-operations").attr('disabled', true);
		}
	});

	// if we're not in the dashboard, add to the multiple operations select menu

	$("#ccm-user-list-multiple-operations").change(function () {
		var action = $(this).val();
		switch (action) {
			case 'choose':
				var idstr = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					ccm_triggerSelectUser($(this).val(), $(this).attr('user-name'), $(this).attr('user-email'));
				});
				jQuery.fn.dialog.closeTop();
				break;
			case "properties":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_properties?' + uIDstring,
					title: ccmi18n.properties
				});
				break;
			case "activate":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_activate?searchInstance=' + searchInstance + '&' + uIDstring,
					title: ccmi18n.user_activate
				});
				break;
			case "deactivate":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_deactivate?searchInstance=' + searchInstance + '&' + uIDstring,
					title: ccmi18n.user_deactivate
				});
				break;
			case "group_add":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_group_add?searchInstance=' + searchInstance + '&' + uIDstring,
					title: ccmi18n.user_group_add
				});
				break;
			case "group_remove":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_group_remove?searchInstance=' + searchInstance + '&' + uIDstring,
					title: ccmi18n.user_group_remove
				});
				break;
			case "delete":
				uIDstring = '';
				$("td.ccm-user-list-cb input[type=checkbox]:checked").each(function () {
					uIDstring = uIDstring + '&uID[]=' + $(this).val();
				});
				jQuery.fn.dialog.open({
					width: 630,
					height: 450,
					modal: false,
					href: CCM_TOOLS_PATH + '/users/bulk_delete?searchInstance=' + searchInstance + '&' + uIDstring,
					title: ccmi18n.user_delete
				});
				break;
		}

		$(this).get(0).selectedIndex = 0;
	});
};

ccm_triggerSelectGroup = function ccm_triggerSelectGroup(gID, gName) {
	alert(gID);
	alert(gName);
};

ccm_setupGroupSearchPaging = function ccm_setupGroupSearchPaging() {
	$("div#ccm-group-paging").each(function () {
		$(this).closest('.ui-dialog-content').dialog('option', 'buttons', [{}]);
		$(this).closest('.ui-dialog').find('.ui-dialog-buttonpane .ccm-pane-dialog-pagination').remove();
		$(this).appendTo($(this).closest('.ui-dialog').find('.ui-dialog-buttonpane').addClass('ccm-ui'));
	});
};

ccm_setupGroupSearch = function ccm_setupGroupSearch(callback) {
	$('div.ccm-group a').unbind();
	if (callback) {
		func = window[callback];
	} else {
		func = ccm_triggerSelectGroup;
	}

	$('div.ccm-group a').each(function (i) {
		var gla = $(this);
		$(this).click(function () {
			func(gla.attr('group-id'), gla.attr('group-name'));
			$.fn.dialog.closeTop();
			return false;
		});
	});
	$("#ccm-group-search").ajaxForm({
		beforeSubmit: function beforeSubmit() {
			$("#ccm-group-search-wrapper").html("");
		},
		success: function success(resp) {
			$("#ccm-group-search-wrapper").html(resp);
		}
	});

	/* setup paging */
	ccm_setupGroupSearchPaging();
	$("div#ccm-group-paging a").click(function () {
		$("#ccm-group-search-wrapper").html("");
		$.ajax({
			type: "GET",
			url: $(this).attr('href'),
			success: function success(resp) {
				//$("#ccm-dialog-throbber").css('visibility','hidden');
				$("#ccm-group-search-wrapper").html(resp);
			}
		});
		return false;
	});
};

/*

ccm_saveArrangement = function(cID, origin, destination) {

	if (!cID) {
		cID = CCM_CID;
	}

	ccm_mainNavDisableDirectExit();
	var serial = '';
	$.each([origin, destination], function(idx, area) {
		var $area = $(area);
		areaStr = '&area[' + $area.attr('id').substring(1) + '][]=';

		bArray = $area.sortable('toArray');

		for (i = 0; i < bArray.length; i++ ) {
			if (bArray[i] != '' && bArray[i].substring(0, 1) == 'b') {
				// make sure to only go from b to -, meaning b28-9 becomes "28"
				var bID = bArray[i].substring(1, bArray[i].indexOf('-'));
				var bObj = $('#' + bArray[i]);
				if (bObj.attr('custom-style')) {
					bID += '-' + bObj.attr('custom-style');
				}
				serial += areaStr + bID;
			}
		}
	});

	$.ajax({
		type: 'POST',
		url: CCM_DISPATCHER_FILENAME,
		dataType: 'json',
		data: 'cID=' + cID + '&ccm_token=' + CCM_SECURITY_TOKEN + '&btask=ajax_do_arrange' + serial,
		success: function(r) {
			ccm_parseJSON(r, function() {
				$("div.ccm-area").removeClass('ccm-move-mode');
				$('div.ccm-block-arrange').each(function() {
					$(this).addClass('ccm-block');
					$(this).removeClass('ccm-block-arrange');
				});
				ccm_arrangeMode = false;
				$(".ccm-main-nav-edit-option").fadeIn(300);
				ccmAlert.hud(ccmi18n.arrangeBlockMsg, 2000, 'up_down', ccmi18n.arrangeBlock);
			});
		}});
};

*/

ccm_saveArrangement = function ccm_saveArrangement(cID, block, source, destination) {
	if (!cID) {
		cID = CCM_CID;
	}

	var bID = block.attr('id').substring(1, block.attr('id').indexOf('-'));
	var sourceBlockAreaID = source.attr('id').substring(1);
	var destinationBlockAreaID = destination.attr('id').substring(1);

	ccm_mainNavDisableDirectExit();
	var serial = '&sourceBlockID=' + bID + '&sourceBlockAreaID=' + sourceBlockAreaID + '&destinationBlockAreaID=' + destinationBlockAreaID;
	var areaArray = [source];
	if (sourceBlockAreaID != destinationBlockAreaID) {
		areaArray.push(destination);
	}
	$.each(areaArray, function (idx, area) {
		areaStr = '&area[' + area.attr('id').substring(1) + '][]=';

		bArray = area.sortable('toArray');

		for (i = 0; i < bArray.length; i++) {
			if (bArray[i] != '' && bArray[i].substring(0, 1) == 'b') {
				var bObj = $('#' + bArray[i]);
				if (bObj.closest('div.ccm-area')[0] == area[0]) {
					// make sure to only go from b to -, meaning b28-9 becomes "28"
					var bID = bArray[i].substring(1, bArray[i].indexOf('-'));
					if (bObj.attr('custom-style')) {
						bID += '-' + bObj.attr('custom-style');
					}
					serial += areaStr + bID;
				}
			}
		}
	});

	$.ajax({
		type: 'POST',
		url: CCM_DISPATCHER_FILENAME,
		dataType: 'json',
		data: 'cID=' + cID + '&ccm_token=' + CCM_SECURITY_TOKEN + '&btask=ajax_do_arrange' + serial,
		success: function success(r) {
			ccm_parseJSON(r, function () {
				$("div.ccm-area").removeClass('ccm-move-mode');
				$('div.ccm-block-arrange').each(function () {
					$(this).addClass('ccm-block');
					$(this).removeClass('ccm-block-arrange');
				});
				ccm_arrangeMode = false;
				$(".ccm-main-nav-edit-option").fadeIn(300);
				ccmAlert.hud(ccmi18n.arrangeBlockMsg, 2000, 'up_down', ccmi18n.arrangeBlock);
			});
		} });
};

ccm_arrangeInit = function ccm_arrangeInit() {
	//$(document.body).append('<img src="' + CCM_IMAGE_PATH + '/topbar_throbber.gif" width="16" height="16" id="ccm-topbar-loader" />');

	ccm_arrangeMode = true;

	ccm_hideHighlighter();

	$('div.ccm-block').each(function () {
		$(this).addClass('ccm-block-arrange');
		$(this).removeClass('ccm-block');
	});

	$(".ccm-main-nav-edit-option").fadeOut(300, function () {
		$(".ccm-main-nav-arrange-option").fadeIn(300);
	});

	$("div.ccm-area").each(function () {
		var area = $(this);
		var cID = area.attr('cID');
		area.addClass('ccm-move-mode');
		area.sortable({
			items: 'div.ccm-block-arrange',
			connectWith: $("div.ccm-area-move-enabled"),
			accept: 'div.ccm-block-arrange',
			opacity: 0.5,
			stop: function stop(e, ui) {
				// two possibilities here.
				// 1, we could be dropping a block into a different area
				// or are we could be rearranging an existing area. Very
				// different use cases.
				var source = area;
				var destination = ui.item.closest('.ccm-area');
				ccm_saveArrangement(cID, ui.item, source, destination);
			}
		});
	});
};

if (typeof ccm_selectSitemapNode != 'function') {
	ccm_selectSitemapNode = function ccm_selectSitemapNode(cID, cName) {
		alert(cID);
		alert(cName);
	};
}

ccm_goToSitemapNode = function ccm_goToSitemapNode(cID, cName) {
	window.location.href = CCM_DISPATCHER_FILENAME + '?cID=' + cID;
};

ccm_fadeInMenu = function ccm_fadeInMenu(bobj, e) {
	var mwidth = bobj.find('div.popover div.inner').width();
	var mheight = bobj.find('div.popover').height();
	bobj.hide();
	bobj.css('visibility', 'visible');

	var posX = e.pageX + 2;
	var posY = e.pageY + 2;

	if ($(window).height() < e.clientY + mheight) {
		posY = posY - mheight - 10;
		posX = posX - mwidth / 2;
		bobj.find('div.popover').removeClass('below');
		bobj.find('div.popover').addClass('above');
	} else {
		posX = posX - mwidth / 2;
		posY = posY + 10;
		bobj.find('div.popover').removeClass('above');
		bobj.find('div.popover').addClass('below');
	}

	bobj.css("top", posY + "px");
	bobj.css("left", posX + "px");
	bobj.fadeIn(60);
};

ccm_blockWindowClose = function ccm_blockWindowClose() {
	jQuery.fn.dialog.closeTop();
	ccm_blockWindowAfterClose();
};

ccm_blockWindowAfterClose = function ccm_blockWindowAfterClose() {
	ccmValidateBlockForm = function ccmValidateBlockForm() {
		return true;
	};
};

ccm_blockFormSubmit = function ccm_blockFormSubmit() {
	if (typeof window.ccmValidateBlockForm == 'function') {
		r = window.ccmValidateBlockForm();
		if (ccm_isBlockError) {
			jQuery.fn.dialog.hideLoader();
			if (ccm_blockError) {
				ccmAlert.notice(ccmi18n.error, ccm_blockError + '</ul>');
			}
			ccm_resetBlockErrors();
			return false;
		}
	}
	return true;
};

ccm_paneToggleOptions = function ccm_paneToggleOptions(obj) {
	var pane = $(obj).parent().find('div.ccm-pane-options-content');
	if ($(obj).hasClass('ccm-icon-option-closed')) {
		$(obj).removeClass('ccm-icon-option-closed').addClass('ccm-icon-option-open');
		pane.slideDown('fast', 'easeOutExpo');
	} else {
		$(obj).removeClass('ccm-icon-option-open').addClass('ccm-icon-option-closed');
		pane.slideUp('fast', 'easeOutExpo');
	}
};

ccm_setupGridStriping = function ccm_setupGridStriping(tbl) {
	$("#" + tbl + " tr").removeClass();
	var j = 0;
	$("#" + tbl + " tr").each(function () {
		if ($(this).css('display') != 'none') {
			if (j % 2 == 0) {
				$(this).addClass('ccm-row-alt');
			}
			j++;
		}
	});
};

/**
 * JavaScript localization. Provide a key and then reference that key in PHP somewhere (where it will be translated)
 */
ccm_t = function ccm_t(key) {
	return $("input[name=ccm-string-" + key + "]").val();
};

/* Block Styles Customization Popup */
var ccmCustomStyle = {
	tabs: function tabs(aLink, tab) {
		$('.ccm-styleEditPane').hide();
		$('#ccm-styleEditPane-' + tab).show();
		$(aLink.parentNode.parentNode).find('li').removeClass('ccm-nav-active');
		$(aLink.parentNode).addClass('ccm-nav-active');
		return false;
	},
	resetAll: function resetAll() {
		if (!confirm(ccmi18n.confirmCssReset)) {
			return false;
		}
		jQuery.fn.dialog.showLoader();

		$('#ccm-reset-style').val(1);
		$('#ccmCustomCssForm').get(0).submit();
		return true;
	},
	showPresetDeleteIcon: function showPresetDeleteIcon() {
		if ($('select[name=cspID]').val() > 0) {
			$("#ccm-style-delete-preset").show();
		} else {
			$("#ccm-style-delete-preset").hide();
		}
	},
	deletePreset: function deletePreset() {
		var cspID = $('select[name=cspID]').val();
		if (cspID > 0) {

			if (!confirm(ccmi18n.confirmCssPresetDelete)) return false;

			var action = $('#ccm-custom-style-refresh-action').val() + '&deleteCspID=' + cspID + '&subtask=delete_custom_style_preset';
			jQuery.fn.dialog.showLoader();

			$.get(action, function (r) {
				$("#ccm-custom-style-wrapper").html(r);
				jQuery.fn.dialog.hideLoader();
			});
		}
	},
	initForm: function initForm() {
		if ($("#cspFooterPreset").length > 0) {
			$("#ccmCustomCssFormTabs input, #ccmCustomCssFormTabs select, #ccmCustomCssFormTabs textarea").bind('change click', function () {
				$("#cspFooterPreset").show();
				$("#cspFooterNoPreset").remove();
				$("#ccmCustomCssFormTabs input, #ccmCustomCssFormTabs select").unbind('change click');
			});
		}
		$('input[name=cspPresetAction]').click(function () {
			if ($(this).val() == 'create_new_preset' && $(this).prop('checked')) {
				$('input[name=cspName]').attr('disabled', false).focus();
			} else {
				$('input[name=cspName]').val('').attr('disabled', true);
			}
		});
		ccmCustomStyle.showPresetDeleteIcon();

		ccmCustomStyle.lastPresetID = parseInt($('select[name=cspID]').val());

		$('select[name=cspID]').change(function () {
			var cspID = parseInt($(this).val());
			var selectedCsrID = parseInt($('input[name=selectedCsrID]').val());

			if (ccmCustomStyle.lastPresetID == cspID) return false;
			ccmCustomStyle.lastPresetID = cspID;

			jQuery.fn.dialog.showLoader();
			var action;
			if (cspID > 0) {
				action = $('#ccm-custom-style-refresh-action').val() + '&cspID=' + cspID;
			} else {
				action = $('#ccm-custom-style-refresh-action').val() + '&csrID=' + selectedCsrID;
			}

			$.get(action, function (r) {
				$("#ccm-custom-style-wrapper").html(r);
				jQuery.fn.dialog.hideLoader();
			});
		});

		$('#ccmCustomCssForm').submit(function () {
			if ($('input[name=cspCreateNew]').prop('checked') == true) {
				if ($('input[name=cspName]').val() == '') {
					$('input[name=cspName]').focus();
					alert(ccmi18n.errorCustomStylePresetNoName);
					return false;
				}
			}

			jQuery.fn.dialog.showLoader();
			return true;
		});

		//IE bug fix 0 can't focus on txt fields if new block just added
		if (!parseInt(ccmCustomStyle.lastPresetID)) setTimeout(function () {
			$("#ccmCustomCssFormTabs input").attr("disabled", false).get(0).focus();
		}, 500);
	},
	validIdCheck: function validIdCheck(el, prevID) {
		var selEl = $('#' + el.value);
		if (selEl && selEl.get(0) && selEl.get(0).id != prevID) {
			$('#ccm-styles-invalid-id').css('display', 'block');
		} else {
			$('#ccm-styles-invalid-id').css('display', 'none');
		}
	}
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3);
__webpack_require__(5);
__webpack_require__(6);
__webpack_require__(7);
__webpack_require__(0);
__webpack_require__(2);
__webpack_require__(4);
__webpack_require__(8);
__webpack_require__(9);
__webpack_require__(10);
__webpack_require__(11);
__webpack_require__(12);
__webpack_require__(13);
__webpack_require__(14);
__webpack_require__(15);
__webpack_require__(16);
__webpack_require__(17);
__webpack_require__(19);
__webpack_require__(21);
__webpack_require__(20);
__webpack_require__(18);
module.exports = __webpack_require__(1);


/***/ })
/******/ ]);